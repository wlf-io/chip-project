/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/astar-typescript-cost/dist/astar.js":
/*!**********************************************************!*\
  !*** ./node_modules/astar-typescript-cost/dist/astar.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar astar_finder_1 = __webpack_require__(/*! ./finders/astar-finder */ \"./node_modules/astar-typescript-cost/dist/finders/astar-finder.js\");\r\nObject.defineProperty(exports, \"AStarFinder\", { enumerable: true, get: function () { return astar_finder_1.AStarFinder; } });\r\nvar grid_1 = __webpack_require__(/*! ./core/grid */ \"./node_modules/astar-typescript-cost/dist/core/grid.js\");\r\nObject.defineProperty(exports, \"Grid\", { enumerable: true, get: function () { return grid_1.Grid; } });\r\n\n\n//# sourceURL=webpack:///./node_modules/astar-typescript-cost/dist/astar.js?");

/***/ }),

/***/ "./node_modules/astar-typescript-cost/dist/core/grid.js":
/*!**************************************************************!*\
  !*** ./node_modules/astar-typescript-cost/dist/core/grid.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Grid = void 0;\r\nconst node_1 = __webpack_require__(/*! ./node */ \"./node_modules/astar-typescript-cost/dist/core/node.js\");\r\nclass Grid {\r\n    constructor(aParams) {\r\n        // Set the general properties\r\n        if (aParams.width && aParams.height) {\r\n            this.width = aParams.width;\r\n            this.height = aParams.height;\r\n            this.numberOfFields = this.width * this.height;\r\n        }\r\n        else if (aParams.matrix) {\r\n            this.width = aParams.matrix[0].length;\r\n            this.height = aParams.matrix.length;\r\n            this.numberOfFields = this.width * this.height;\r\n        }\r\n        this.maxCost = aParams.maxCost || 0;\r\n        // Create and generate the matrix\r\n        this.gridNodes = this.buildGridWithNodes(aParams.matrix || undefined, this.width, this.height, aParams.densityOfObstacles || 0);\r\n    }\r\n    /**\r\n     * Build grid, fill it with nodes and return it.\r\n     * @param matrix [ 0 or 1: 0 = walkable; 1 = not walkable ]\r\n     * @param width [grid width]\r\n     * @param height [grid height]\r\n     * @param densityOfObstacles [density of non walkable fields]\r\n     */\r\n    buildGridWithNodes(matrix, width, height, densityOfObstacles) {\r\n        const newGrid = [];\r\n        let id = 0;\r\n        // Generate an empty matrix\r\n        for (let y = 0; y < height; y++) {\r\n            newGrid[y] = [];\r\n            for (let x = 0; x < width; x++) {\r\n                newGrid[y][x] = new node_1.Node({\r\n                    id: id,\r\n                    position: { x: x, y: y }\r\n                });\r\n                id++;\r\n            }\r\n        }\r\n        /**\r\n         * If we have not loaded a predefined matrix,\r\n         * loop through our grid and set random obstacles.\r\n         */\r\n        if (matrix === undefined) {\r\n            for (let y = 0; y < height; y++) {\r\n                for (let x = 0; x < width; x++) {\r\n                    const rndNumber = Math.floor(Math.random() * 10) + 1;\r\n                    if (rndNumber > 10 - densityOfObstacles) {\r\n                        newGrid[y][x].setIsWalkable(false);\r\n                    }\r\n                    else {\r\n                        newGrid[y][x].setIsWalkable(true);\r\n                    }\r\n                }\r\n            }\r\n            return newGrid;\r\n        }\r\n        /**\r\n         * In case we have a matrix loaded.\r\n         * Load up the informations of the matrix.\r\n         */\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                if (this.maxCost) {\r\n                    newGrid[y][x].setIsWalkable(matrix[y][x] < this.maxCost);\r\n                    newGrid[y][x].setCost(matrix[y][x]);\r\n                }\r\n                else {\r\n                    if (matrix[y][x]) {\r\n                        newGrid[y][x].setIsWalkable(false);\r\n                    }\r\n                    else {\r\n                        newGrid[y][x].setIsWalkable(true);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return newGrid;\r\n    }\r\n    /**\r\n     * Return a specific node.\r\n     * @param position [position on the grid]\r\n     */\r\n    getNodeAt(position) {\r\n        return this.gridNodes[position.y][position.x];\r\n    }\r\n    /**\r\n     * Check if specific node walkable.\r\n     * @param position [position on the grid]\r\n     */\r\n    isWalkableAt(position) {\r\n        return this.gridNodes[position.y][position.x].getIsWalkable();\r\n    }\r\n    /**\r\n     * Check if specific node is on the grid.\r\n     * @param position [position on the grid]\r\n     */\r\n    isOnTheGrid(position) {\r\n        return (position.x >= 0 &&\r\n            position.x < this.width &&\r\n            position.y >= 0 &&\r\n            position.y < this.height);\r\n    }\r\n    /**\r\n     * Get surrounding nodes.\r\n     * @param currentXPos [x-position on the grid]\r\n     * @param currentYPos [y-position on the grid]\r\n     * @param diagnonalMovementAllowed [is diagnonal movement allowed?]\r\n     */\r\n    getSurroundingNodes(currentPosition, diagnonalMovementAllowed) {\r\n        const surroundingNodes = [];\r\n        for (var y = currentPosition.y - 1; y <= currentPosition.y + 1; y++) {\r\n            for (var x = currentPosition.x - 1; x <= currentPosition.x + 1; x++) {\r\n                if (this.isOnTheGrid({ x, y })) {\r\n                    if (this.isWalkableAt({ x, y })) {\r\n                        if (diagnonalMovementAllowed) {\r\n                            surroundingNodes.push(this.getNodeAt({ x, y }));\r\n                        }\r\n                        else {\r\n                            if (x == currentPosition.x || y == currentPosition.y) {\r\n                                surroundingNodes.push(this.getNodeAt({ x, y }));\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        continue;\r\n                    }\r\n                }\r\n                else {\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        return surroundingNodes;\r\n    }\r\n    setGrid(newGrid) {\r\n        this.gridNodes = newGrid;\r\n    }\r\n    /**\r\n     * Reset the grid\r\n     */\r\n    resetGrid() {\r\n        for (let y = 0; y < this.gridNodes.length; y++) {\r\n            for (let x = 0; x < this.gridNodes[y].length; x++) {\r\n                this.gridNodes[y][x].setIsOnClosedList(false);\r\n                this.gridNodes[y][x].setIsOnOpenList(false);\r\n                this.gridNodes[y][x].setParent(undefined);\r\n                this.gridNodes[y][x].setFGHValuesToZero();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Get all the nodes of the grid.\r\n     */\r\n    getGridNodes() {\r\n        return this.gridNodes;\r\n    }\r\n    /**\r\n     * Get a clone of the grid\r\n     */\r\n    clone() {\r\n        const cloneGrid = [];\r\n        let id = 0;\r\n        for (let y = 0; y < this.height; y++) {\r\n            cloneGrid[y] = [];\r\n            for (let x = 0; x < this.width; x++) {\r\n                cloneGrid[y][x] = new node_1.Node({\r\n                    id: id,\r\n                    position: { x: x, y: y },\r\n                    walkable: this.gridNodes[y][x].getIsWalkable(),\r\n                    cost: this.gridNodes[y][x].getCost(),\r\n                });\r\n                id++;\r\n            }\r\n        }\r\n        return cloneGrid;\r\n    }\r\n}\r\nexports.Grid = Grid;\r\n\n\n//# sourceURL=webpack:///./node_modules/astar-typescript-cost/dist/core/grid.js?");

/***/ }),

/***/ "./node_modules/astar-typescript-cost/dist/core/heuristic.js":
/*!*******************************************************************!*\
  !*** ./node_modules/astar-typescript-cost/dist/core/heuristic.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Resources:\r\n * http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\r\n * https://en.wikipedia.org/wiki/Taxicab_geometry\r\n * https://en.wikipedia.org/wiki/Euclidean_distance\r\n * https://en.wikipedia.org/wiki/Chebyshev_distance\r\n * http://www.gameaipro.com/GameAIPro/GameAIPro_Chapter17_Pathfinding_Architecture_Optimizations.pdf\r\n * https://github.com/riscy/a_star_on_grids#heuristics\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.calculateHeuristic = void 0;\r\n/**\r\n * Calculate for two positions the heuristic function.\r\n * @param heuristicFunction\r\n * @param pos0\r\n * @param pos1\r\n * @param weight\r\n */\r\nfunction calculateHeuristic(heuristicFunction, pos0, pos1, weight) {\r\n    const dx = Math.abs(pos1.x - pos0.x);\r\n    const dy = Math.abs(pos1.y - pos0.y);\r\n    switch (heuristicFunction) {\r\n        // TODO: Remove Manhatten in next major release\r\n        case 'Manhatten':\r\n        case 'Manhattan':\r\n            /**\r\n             * Calculate the Manhattan distance.\r\n             * Generally: Overestimates distances because diagonal movement not taken into accout.\r\n             * Good for a 4-connected grid (diagonal movement not allowed)\r\n             */\r\n            return (dx + dy) * weight;\r\n        case 'Euclidean':\r\n            /**\r\n             * Calculate the Euclidean distance.\r\n             * Generally: Underestimates distances, assuming paths can have any angle.\r\n             * Can be used f.e. when units can move at any angle.\r\n             */\r\n            return Math.sqrt(dx * dx + dy * dy) * weight;\r\n        case 'Chebyshev':\r\n            /**\r\n             * Calculate the Chebyshev distance.\r\n             * Should be used when diagonal movement is allowed.\r\n             * D * (dx + dy) + (D2 - 2 * D) * Math.min(dx, dy)\r\n             * D = 1 and D2 = 1\r\n             * => (dx + dy) - Math.min(dx, dy)\r\n             * This is equivalent to Math.max(dx, dy)\r\n             */\r\n            return Math.max(dx, dy) * weight;\r\n        case 'Octile':\r\n            /**\r\n             * Calculate the Octile distance.\r\n             * Should be used on an 8-connected grid (diagonal movement allowed).\r\n             * D * (dx + dy) + (D2 - 2 * D) * Math.min(dx, dy)\r\n             * D = 1 and D2 = sqrt(2)\r\n             * => (dx + dy) - 0.58 * Math.min(dx, dy)\r\n             */\r\n            return (dx + dy - 0.58 * Math.min(dx, dy)) * weight;\r\n    }\r\n}\r\nexports.calculateHeuristic = calculateHeuristic;\r\n\n\n//# sourceURL=webpack:///./node_modules/astar-typescript-cost/dist/core/heuristic.js?");

/***/ }),

/***/ "./node_modules/astar-typescript-cost/dist/core/node.js":
/*!**************************************************************!*\
  !*** ./node_modules/astar-typescript-cost/dist/core/node.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Node = void 0;\r\nclass Node {\r\n    constructor(aParams) {\r\n        this.id = aParams.id;\r\n        this.position = aParams.position;\r\n        this.hValue = 0;\r\n        this.gValue = 0;\r\n        this.fValue = 0;\r\n        this.parentNode = undefined;\r\n        this.isOnClosedList = false;\r\n        this.isOnOpenList = false;\r\n        this.isWalkable = aParams.walkable || true;\r\n        this.cost = aParams.cost || 0;\r\n    }\r\n    /**\r\n     * Calculate or Recalculate the F value\r\n     * This is a private function\r\n     */\r\n    calculateFValue() {\r\n        this.fValue = this.gValue + this.hValue;\r\n    }\r\n    /**\r\n     * Set the g value of the node\r\n     */\r\n    setGValue(gValue) {\r\n        this.gValue = gValue;\r\n        // The G value has changed, so recalculate the f value\r\n        this.calculateFValue();\r\n    }\r\n    /**\r\n     * Set the h value of the node\r\n     */\r\n    setHValue(hValue) {\r\n        this.hValue = hValue;\r\n        // The H value has changed, so recalculate the f value\r\n        this.calculateFValue();\r\n    }\r\n    /**\r\n     * Reset the FGH values to zero\r\n     */\r\n    setFGHValuesToZero() {\r\n        this.fValue = this.gValue = this.hValue = 0;\r\n    }\r\n    /**\r\n     * Getter functions\r\n     */\r\n    getFValue() {\r\n        return this.fValue;\r\n    }\r\n    getGValue() {\r\n        return this.gValue;\r\n    }\r\n    getHValue() {\r\n        return this.hValue;\r\n    }\r\n    getParent() {\r\n        return this.parentNode;\r\n    }\r\n    getIsOnClosedList() {\r\n        return this.isOnClosedList;\r\n    }\r\n    getIsOnOpenList() {\r\n        return this.isOnOpenList;\r\n    }\r\n    getIsWalkable() {\r\n        return this.isWalkable;\r\n    }\r\n    getCost() {\r\n        return this.cost;\r\n    }\r\n    /**\r\n     * Setter functions\r\n     */\r\n    setParent(parent) {\r\n        this.parentNode = parent;\r\n    }\r\n    setIsOnClosedList(isOnClosedList) {\r\n        this.isOnClosedList = isOnClosedList;\r\n    }\r\n    setIsOnOpenList(isOnOpenList) {\r\n        this.isOnOpenList = isOnOpenList;\r\n    }\r\n    setIsWalkable(isWalkable) {\r\n        this.isWalkable = isWalkable;\r\n    }\r\n    setCost(cost) {\r\n        this.cost = cost;\r\n    }\r\n}\r\nexports.Node = Node;\r\n\n\n//# sourceURL=webpack:///./node_modules/astar-typescript-cost/dist/core/node.js?");

/***/ }),

/***/ "./node_modules/astar-typescript-cost/dist/core/util.js":
/*!**************************************************************!*\
  !*** ./node_modules/astar-typescript-cost/dist/core/util.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.backtrace = void 0;\r\n/**\r\n * Backtrace from end node through parents and return the path.\r\n * @param node\r\n * @param includeStartingNode\r\n */\r\nfunction backtrace(node, includeStartNode, includeEndNode) {\r\n    // Init empty path\r\n    const path = [];\r\n    let currentNode;\r\n    if (includeEndNode) {\r\n        // Attach the end node to be the current node\r\n        currentNode = node;\r\n    }\r\n    else {\r\n        currentNode = node.getParent();\r\n    }\r\n    // Loop as long the current node has a parent\r\n    while (currentNode.getParent()) {\r\n        path.push([currentNode.position.x, currentNode.position.y]);\r\n        currentNode = currentNode.getParent();\r\n    }\r\n    // If true we will also include the starting node\r\n    if (includeStartNode) {\r\n        path.push([currentNode.position.x, currentNode.position.y]);\r\n    }\r\n    return path.reverse();\r\n}\r\nexports.backtrace = backtrace;\r\n\n\n//# sourceURL=webpack:///./node_modules/astar-typescript-cost/dist/core/util.js?");

/***/ }),

/***/ "./node_modules/astar-typescript-cost/dist/finders/astar-finder.js":
/*!*************************************************************************!*\
  !*** ./node_modules/astar-typescript-cost/dist/finders/astar-finder.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AStarFinder = void 0;\r\nconst lodash_1 = __webpack_require__(/*! lodash */ \"./node_modules/astar-typescript-cost/node_modules/lodash/lodash.js\");\r\nconst util_1 = __webpack_require__(/*! ../core/util */ \"./node_modules/astar-typescript-cost/dist/core/util.js\");\r\nconst heuristic_1 = __webpack_require__(/*! ../core/heuristic */ \"./node_modules/astar-typescript-cost/dist/core/heuristic.js\");\r\nconst grid_1 = __webpack_require__(/*! ../core/grid */ \"./node_modules/astar-typescript-cost/dist/core/grid.js\");\r\nclass AStarFinder {\r\n    constructor(aParams) {\r\n        // Create grid\r\n        this.grid = new grid_1.Grid({\r\n            width: aParams.grid.width,\r\n            height: aParams.grid.height,\r\n            matrix: aParams.grid.matrix || undefined,\r\n            densityOfObstacles: aParams.grid.densityOfObstacles || 0,\r\n            maxCost: aParams.grid.maxCost || 0,\r\n        });\r\n        // Init lists\r\n        this.closedList = [];\r\n        this.openList = [];\r\n        // Set diagonal boolean\r\n        this.diagonalAllowed =\r\n            aParams.diagonalAllowed !== undefined ? aParams.diagonalAllowed : true;\r\n        // Set heuristic function\r\n        this.heuristic = aParams.heuristic ? aParams.heuristic : 'Manhattan';\r\n        // Set if start node included\r\n        this.includeStartNode =\r\n            aParams.includeStartNode !== undefined ? aParams.includeStartNode : true;\r\n        // Set if end node included\r\n        this.includeEndNode =\r\n            aParams.includeEndNode !== undefined ? aParams.includeEndNode : true;\r\n        // Set weight\r\n        this.weight = aParams.weight || 1;\r\n    }\r\n    findPath(startPosition, endPosition) {\r\n        // Reset lists\r\n        this.closedList = [];\r\n        this.openList = [];\r\n        // Reset grid\r\n        this.grid.resetGrid();\r\n        const startNode = this.grid.getNodeAt(startPosition);\r\n        const endNode = this.grid.getNodeAt(endPosition);\r\n        // Break if start and/or end position is/are not walkable\r\n        if (!this.grid.isWalkableAt(endPosition) ||\r\n            !this.grid.isWalkableAt(startPosition)) {\r\n            // Path could not be created because the start and/or end position is/are not walkable.\r\n            return [];\r\n        }\r\n        // Push start node into open list\r\n        startNode.setIsOnOpenList(true);\r\n        this.openList.push(startNode);\r\n        // Loop through the grid\r\n        // Set the FGH values of non walkable nodes to zero and push them on the closed list\r\n        // Set the H value for walkable nodes\r\n        for (let y = 0; y < this.grid.height; y++) {\r\n            for (let x = 0; x < this.grid.width; x++) {\r\n                let node = this.grid.getNodeAt({ x, y });\r\n                if (!this.grid.isWalkableAt({ x, y })) {\r\n                    // OK, this node is not walkable\r\n                    // Set FGH values to zero\r\n                    node.setFGHValuesToZero();\r\n                    // Put on closed list\r\n                    node.setIsOnClosedList(true);\r\n                    this.closedList.push(node);\r\n                }\r\n                else {\r\n                    // OK, this node is walkable\r\n                    // Calculate the H value with the corresponding heuristic function\r\n                    node.setHValue(heuristic_1.calculateHeuristic(this.heuristic, node.position, endNode.position, this.weight));\r\n                }\r\n            }\r\n        }\r\n        // As long the open list is not empty, continue searching a path\r\n        while (this.openList.length !== 0) {\r\n            // Get node with lowest f value\r\n            const currentNode = lodash_1.minBy(this.openList, (o) => {\r\n                return o.getFValue();\r\n            });\r\n            // Move current node from open list to closed list\r\n            currentNode.setIsOnOpenList(false);\r\n            lodash_1.remove(this.openList, currentNode);\r\n            currentNode.setIsOnClosedList(true);\r\n            this.closedList.push(currentNode);\r\n            // End of path is reached\r\n            if (currentNode === endNode) {\r\n                return util_1.backtrace(endNode, this.includeStartNode, this.includeEndNode);\r\n            }\r\n            // Get neighbors\r\n            const neighbors = this.grid.getSurroundingNodes(currentNode.position, this.diagonalAllowed);\r\n            // Loop through all the neighbors\r\n            for (let i in neighbors) {\r\n                const neightbor = neighbors[i];\r\n                // Continue if node on closed list\r\n                if (neightbor.getIsOnClosedList()) {\r\n                    continue;\r\n                }\r\n                // Calculate the g value of the neightbor\r\n                const nextGValue = currentNode.getGValue() +\r\n                    neightbor.getCost() +\r\n                    (neightbor.position.x !== currentNode.position.x ||\r\n                        neightbor.position.y == currentNode.position.y\r\n                        ? this.weight\r\n                        : this.weight * 1.41421);\r\n                // Is the neighbor not on open list OR\r\n                // can it be reached with lower g value from current position\r\n                if (!neightbor.getIsOnOpenList() ||\r\n                    nextGValue < neightbor.getGValue()) {\r\n                    neightbor.setGValue(nextGValue);\r\n                    neightbor.setParent(currentNode);\r\n                    if (!neightbor.getIsOnOpenList()) {\r\n                        neightbor.setIsOnOpenList(true);\r\n                        this.openList.push(neightbor);\r\n                    }\r\n                    else {\r\n                        // okay this is a better way, so change the parent\r\n                        neightbor.setParent(currentNode);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Path could not be created\r\n        return [];\r\n    }\r\n    /**\r\n     * Set the heuristic to be used for pathfinding.\r\n     * @param newHeuristic\r\n     */\r\n    setHeuristic(newHeuristic) {\r\n        this.heuristic = newHeuristic;\r\n    }\r\n    /**\r\n     * Set the weight for the heuristic function.\r\n     * @param newWeight\r\n     */\r\n    setWeight(newWeight) {\r\n        this.weight = newWeight;\r\n    }\r\n    /**\r\n     * Get a copy/clone of the grid.\r\n     */\r\n    getGridClone() {\r\n        return this.grid.clone();\r\n    }\r\n    /**\r\n     * Get the current grid\r\n     */\r\n    getGrid() {\r\n        return this.grid;\r\n    }\r\n}\r\nexports.AStarFinder = AStarFinder;\r\n\n\n//# sourceURL=webpack:///./node_modules/astar-typescript-cost/dist/finders/astar-finder.js?");

/***/ }),

/***/ "./node_modules/astar-typescript-cost/node_modules/lodash/lodash.js":
/*!**************************************************************************!*\
  !*** ./node_modules/astar-typescript-cost/node_modules/lodash/lodash.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '4.17.19';\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Error message constants. */\n  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',\n      FUNC_ERROR_TEXT = 'Expected a function';\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500;\n\n  /** Used as the internal argument placeholder. */\n  var PLACEHOLDER = '__lodash_placeholder__';\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_DEEP_FLAG = 1,\n      CLONE_FLAT_FLAG = 2,\n      CLONE_SYMBOLS_FLAG = 4;\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n\n  /** Used to compose bitmasks for function metadata. */\n  var WRAP_BIND_FLAG = 1,\n      WRAP_BIND_KEY_FLAG = 2,\n      WRAP_CURRY_BOUND_FLAG = 4,\n      WRAP_CURRY_FLAG = 8,\n      WRAP_CURRY_RIGHT_FLAG = 16,\n      WRAP_PARTIAL_FLAG = 32,\n      WRAP_PARTIAL_RIGHT_FLAG = 64,\n      WRAP_ARY_FLAG = 128,\n      WRAP_REARG_FLAG = 256,\n      WRAP_FLIP_FLAG = 512;\n\n  /** Used as default options for `_.truncate`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DEFAULT_TRUNC_OMISSION = '...';\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 800,\n      HOT_SPAN = 16;\n\n  /** Used to indicate the type of lazy iteratees. */\n  var LAZY_FILTER_FLAG = 1,\n      LAZY_MAP_FLAG = 2,\n      LAZY_WHILE_FLAG = 3;\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308,\n      NAN = 0 / 0;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295,\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n  /** Used to associate wrap methods with their bit flags. */\n  var wrapFlags = [\n    ['ary', WRAP_ARY_FLAG],\n    ['bind', WRAP_BIND_FLAG],\n    ['bindKey', WRAP_BIND_KEY_FLAG],\n    ['curry', WRAP_CURRY_FLAG],\n    ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n    ['flip', WRAP_FLIP_FLAG],\n    ['partial', WRAP_PARTIAL_FLAG],\n    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n    ['rearg', WRAP_REARG_FLAG]\n  ];\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      domExcTag = '[object DOMException]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]',\n      weakSetTag = '[object WeakSet]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match empty string literals in compiled template source. */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n      reUnescapedHtml = /[&<>\"']/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to match template delimiters. */\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n      reHasRegExpChar = RegExp(reRegExpChar.source);\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim = /^\\s+|\\s+$/g,\n      reTrimStart = /^\\s+/,\n      reTrimEnd = /\\s+$/;\n\n  /** Used to match wrap detail comments. */\n  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n      reSplitDetails = /,? & /;\n\n  /** Used to match words composed of alphanumeric characters. */\n  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /**\n   * Used to match\n   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n  /** Used to ensure capturing order of template delimiters. */\n  var reNoMatch = /($^)/;\n\n  /** Used to match unescaped characters in compiled string literals. */\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange = '\\\\u0300-\\\\u036f',\n      reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n  /** Used to compose unicode capture groups. */\n  var rsApos = \"['\\u2019]\",\n      rsAstral = '[' + rsAstralRange + ']',\n      rsBreak = '[' + rsBreakRange + ']',\n      rsCombo = '[' + rsComboRange + ']',\n      rsDigits = '\\\\d+',\n      rsDingbat = '[' + rsDingbatRange + ']',\n      rsLower = '[' + rsLowerRange + ']',\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n      rsNonAstral = '[^' + rsAstralRange + ']',\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsUpper = '[' + rsUpperRange + ']',\n      rsZWJ = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n      reOptMod = rsModifier + '?',\n      rsOptVar = '[' + rsVarRange + ']?',\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n      rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match apostrophes. */\n  var reApos = RegExp(rsApos, 'g');\n\n  /**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */\n  var reComboMark = RegExp(rsCombo, 'g');\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /** Used to match complex or compound words. */\n  var reUnicodeWord = RegExp([\n    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n    rsUpper + '+' + rsOptContrUpper,\n    rsOrdUpper,\n    rsOrdLower,\n    rsDigits,\n    rsEmoji\n  ].join('|'), 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n  /** Used to detect strings that need a more robust regexp to match words. */\n  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\n    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify. */\n  var templateCounter = -1;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n  typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Used to map Latin Unicode letters to basic Latin letters. */\n  var deburredLetters = {\n    // Latin-1 Supplement block.\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss',\n    // Latin Extended-A block.\n    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n    '\\u0134': 'J',  '\\u0135': 'j',\n    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n    '\\u0174': 'W',  '\\u0175': 'w',\n    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n    '\\u0132': 'IJ', '\\u0133': 'ij',\n    '\\u0152': 'Oe', '\\u0153': 'oe',\n    '\\u0149': \"'n\", '\\u017f': 's'\n  };\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\"\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals. */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseFloat = parseFloat,\n      freeParseInt = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports =  true && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function() {\n    try {\n      // Use `util.types` for Node.js 10+.\n      var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n      if (types) {\n        return types;\n      }\n\n      // Legacy `process.binding('util')` for Node.js < 10.\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }());\n\n  /* Node.js helper references. */\n  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\n      nodeIsDate = nodeUtil && nodeUtil.isDate,\n      nodeIsMap = nodeUtil && nodeUtil.isMap,\n      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\n      nodeIsSet = nodeUtil && nodeUtil.isSet,\n      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0: return func.call(thisArg);\n      case 1: return func.call(thisArg, args[0]);\n      case 2: return func.call(thisArg, args[0], args[1]);\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n\n  /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      var value = array[index];\n      setter(accumulator, value, iteratee(value), array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.forEachRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEachRight(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n\n    while (length--) {\n      if (iteratee(array[length], length, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */\n  function arrayEvery(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n  }\n\n  /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.reduceRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n    var length = array == null ? 0 : array.length;\n    if (initAccum && length) {\n      accumulator = array[--length];\n    }\n    while (length--) {\n      accumulator = iteratee(accumulator, array[length], length, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gets the size of an ASCII `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  var asciiSize = baseProperty('length');\n\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function asciiToArray(string) {\n    return string.split('');\n  }\n\n  /**\n   * Splits an ASCII `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function asciiWords(string) {\n    return string.match(reAsciiWord) || [];\n  }\n\n  /**\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n   * without support for iteratee shorthands, which iterates over `collection`\n   * using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the found element or its key, else `undefined`.\n   */\n  function baseFindKey(collection, predicate, eachFunc) {\n    var result;\n    eachFunc(collection, function(value, key, collection) {\n      if (predicate(value, key, collection)) {\n        result = key;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value\n      ? strictIndexOf(array, value, fromIndex)\n      : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n\n  /**\n   * This function is like `baseIndexOf` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOfWith(array, value, fromIndex, comparator) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (comparator(array[index], value)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n\n  /**\n   * The base implementation of `_.mean` and `_.meanBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the mean.\n   */\n  function baseMean(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n    return length ? (baseSum(array, iteratee) / length) : NAN;\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function(object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function(value, index, collection) {\n      accumulator = initAccum\n        ? (initAccum = false, value)\n        : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */\n  function baseSortBy(array, comparer) {\n    var length = array.length;\n\n    array.sort(comparer);\n    while (length--) {\n      array[length] = array[length].value;\n    }\n    return array;\n  }\n\n  /**\n   * The base implementation of `_.sum` and `_.sumBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the sum.\n   */\n  function baseSum(array, iteratee) {\n    var result,\n        index = -1,\n        length = array.length;\n\n    while (++index < length) {\n      var current = iteratee(array[index]);\n      if (current !== undefined) {\n        result = result === undefined ? current : (result + current);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n   * of key-value pairs for `object` corresponding to the property names of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the key-value pairs.\n   */\n  function baseToPairs(object, props) {\n    return arrayMap(props, function(key) {\n      return [key, object[key]];\n    });\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function(value) {\n      return func(value);\n    };\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Gets the number of `placeholder` occurrences in `array`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} placeholder The placeholder to search for.\n   * @returns {number} Returns the placeholder count.\n   */\n  function countHolders(array, placeholder) {\n    var length = array.length,\n        result = 0;\n\n    while (length--) {\n      if (array[length] === placeholder) {\n        ++result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n   * letters to basic Latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  var deburrLetter = basePropertyOf(deburredLetters);\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n  /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(chr) {\n    return '\\\\' + stringEscapes[chr];\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n\n  /**\n   * Checks if `string` contains a word composed of Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\n   */\n  function hasUnicodeWord(string) {\n    return reHasUnicodeWord.test(string);\n  }\n\n  /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function iteratorToArray(iterator) {\n    var data,\n        result = [];\n\n    while (!(data = iterator.next()).done) {\n      result.push(data.value);\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */\n  function replaceHolders(array, placeholder) {\n    var index = -1,\n        length = array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value === placeholder || value === PLACEHOLDER) {\n        array[index] = PLACEHOLDER;\n        result[resIndex++] = index;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Converts `set` to its value-value pairs.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the value-value pairs.\n   */\n  function setToPairs(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = [value, value];\n    });\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * A specialized version of `_.lastIndexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictLastIndexOf(array, value, fromIndex) {\n    var index = fromIndex + 1;\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Gets the number of symbols in `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the string size.\n   */\n  function stringSize(string) {\n    return hasUnicode(string)\n      ? unicodeSize(string)\n      : asciiSize(string);\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray(string) {\n    return hasUnicode(string)\n      ? unicodeToArray(string)\n      : asciiToArray(string);\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n\n  /**\n   * Gets the size of a Unicode `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  function unicodeSize(string) {\n    var result = reUnicode.lastIndex = 0;\n    while (reUnicode.test(string)) {\n      ++result;\n    }\n    return result;\n  }\n\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n\n  /**\n   * Splits a Unicode `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function unicodeWords(string) {\n    return string.match(reUnicodeWord) || [];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new pristine `lodash` function using the `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Util\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // Create a suped-up `defer` in Node.js.\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */\n  var runInContext = (function runInContext(context) {\n    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\n\n    /** Built-in constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Error = context.Error,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /** Used for built-in method references. */\n    var arrayProto = Array.prototype,\n        funcProto = Function.prototype,\n        objectProto = Object.prototype;\n\n    /** Used to detect overreaching core-js shims. */\n    var coreJsData = context['__core-js_shared__'];\n\n    /** Used to resolve the decompiled source of functions. */\n    var funcToString = funcProto.toString;\n\n    /** Used to check objects for own properties. */\n    var hasOwnProperty = objectProto.hasOwnProperty;\n\n    /** Used to generate unique IDs. */\n    var idCounter = 0;\n\n    /** Used to detect methods masquerading as native. */\n    var maskSrcKey = (function() {\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n      return uid ? ('Symbol(src)_1.' + uid) : '';\n    }());\n\n    /**\n     * Used to resolve the\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n     * of values.\n     */\n    var nativeObjectToString = objectProto.toString;\n\n    /** Used to infer the `Object` constructor. */\n    var objectCtorString = funcToString.call(Object);\n\n    /** Used to restore the original `_` reference in `_.noConflict`. */\n    var oldDash = root._;\n\n    /** Used to detect if a method is native. */\n    var reIsNative = RegExp('^' +\n      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n    );\n\n    /** Built-in value references. */\n    var Buffer = moduleExports ? context.Buffer : undefined,\n        Symbol = context.Symbol,\n        Uint8Array = context.Uint8Array,\n        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n        getPrototype = overArg(Object.getPrototypeOf, Object),\n        objectCreate = Object.create,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        splice = arrayProto.splice,\n        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n        symIterator = Symbol ? Symbol.iterator : undefined,\n        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n    var defineProperty = (function() {\n      try {\n        var func = getNative(Object, 'defineProperty');\n        func({}, '', {});\n        return func;\n      } catch (e) {}\n    }());\n\n    /** Mocked built-ins. */\n    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,\n        ctxNow = Date && Date.now !== root.Date.now && Date.now,\n        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\n\n    /* Built-in method references for those with the same name as other `lodash` methods. */\n    var nativeCeil = Math.ceil,\n        nativeFloor = Math.floor,\n        nativeGetSymbols = Object.getOwnPropertySymbols,\n        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n        nativeIsFinite = context.isFinite,\n        nativeJoin = arrayProto.join,\n        nativeKeys = overArg(Object.keys, Object),\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeNow = Date.now,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random,\n        nativeReverse = arrayProto.reverse;\n\n    /* Built-in method references that are verified to be native. */\n    var DataView = getNative(context, 'DataView'),\n        Map = getNative(context, 'Map'),\n        Promise = getNative(context, 'Promise'),\n        Set = getNative(context, 'Set'),\n        WeakMap = getNative(context, 'WeakMap'),\n        nativeCreate = getNative(Object, 'create');\n\n    /** Used to store function metadata. */\n    var metaMap = WeakMap && new WeakMap;\n\n    /** Used to lookup unminified function names. */\n    var realNames = {};\n\n    /** Used to detect maps, sets, and weakmaps. */\n    var dataViewCtorString = toSource(DataView),\n        mapCtorString = toSource(Map),\n        promiseCtorString = toSource(Promise),\n        setCtorString = toSource(Set),\n        weakMapCtorString = toSource(WeakMap);\n\n    /** Used to convert symbols to primitives and strings. */\n    var symbolProto = Symbol ? Symbol.prototype : undefined,\n        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n        symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps `value` to enable implicit method\n     * chain sequences. Methods that operate on and return arrays, collections,\n     * and functions can be chained together. Methods that retrieve a single value\n     * or may return a primitive value will automatically end the chain sequence\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\n     * with `_#value`.\n     *\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n     * enabled using `_.chain`.\n     *\n     * The execution of chained methods is lazy, that is, it's deferred until\n     * `_#value` is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion.\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n     * the creation of intermediate arrays and can greatly reduce the number of\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\n     * fusion if the section is applied to an array and iteratees accept only\n     * one argument. The heuristic for whether a section qualifies for shortcut\n     * fusion is subject to change.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n     * `upperFirst`, `value`, and `words`\n     *\n     * @name _\n     * @constructor\n     * @category Seq\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // Returns an unwrapped value.\n     * wrapped.reduce(_.add);\n     * // => 6\n     *\n     * // Returns a wrapped value.\n     * var squares = wrapped.map(square);\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n        if (value instanceof LodashWrapper) {\n          return value;\n        }\n        if (hasOwnProperty.call(value, '__wrapped__')) {\n          return wrapperClone(value);\n        }\n      }\n      return new LodashWrapper(value);\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} proto The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    var baseCreate = (function() {\n      function object() {}\n      return function(proto) {\n        if (!isObject(proto)) {\n          return {};\n        }\n        if (objectCreate) {\n          return objectCreate(proto);\n        }\n        object.prototype = proto;\n        var result = new object;\n        object.prototype = undefined;\n        return result;\n      };\n    }());\n\n    /**\n     * The function whose prototype chain sequence wrappers inherit from.\n     *\n     * @private\n     */\n    function baseLodash() {\n      // No operation performed.\n    }\n\n    /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n     */\n    function LodashWrapper(value, chainAll) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__chain__ = !!chainAll;\n      this.__index__ = 0;\n      this.__values__ = undefined;\n    }\n\n    /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n     * following template settings to use alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type {Object}\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'escape': reEscape,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'evaluate': reEvaluate,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type {string}\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type {Object}\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type {Function}\n         */\n        '_': lodash\n      }\n    };\n\n    // Ensure wrappers are instances of `baseLodash`.\n    lodash.prototype = baseLodash.prototype;\n    lodash.prototype.constructor = lodash;\n\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n    LodashWrapper.prototype.constructor = LodashWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @constructor\n     * @param {*} value The value to wrap.\n     */\n    function LazyWrapper(value) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__dir__ = 1;\n      this.__filtered__ = false;\n      this.__iteratees__ = [];\n      this.__takeCount__ = MAX_ARRAY_LENGTH;\n      this.__views__ = [];\n    }\n\n    /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */\n    function lazyClone() {\n      var result = new LazyWrapper(this.__wrapped__);\n      result.__actions__ = copyArray(this.__actions__);\n      result.__dir__ = this.__dir__;\n      result.__filtered__ = this.__filtered__;\n      result.__iteratees__ = copyArray(this.__iteratees__);\n      result.__takeCount__ = this.__takeCount__;\n      result.__views__ = copyArray(this.__views__);\n      return result;\n    }\n\n    /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */\n    function lazyReverse() {\n      if (this.__filtered__) {\n        var result = new LazyWrapper(this);\n        result.__dir__ = -1;\n        result.__filtered__ = true;\n      } else {\n        result = this.clone();\n        result.__dir__ *= -1;\n      }\n      return result;\n    }\n\n    /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */\n    function lazyValue() {\n      var array = this.__wrapped__.value(),\n          dir = this.__dir__,\n          isArr = isArray(array),\n          isRight = dir < 0,\n          arrLength = isArr ? array.length : 0,\n          view = getView(0, arrLength, this.__views__),\n          start = view.start,\n          end = view.end,\n          length = end - start,\n          index = isRight ? end : (start - 1),\n          iteratees = this.__iteratees__,\n          iterLength = iteratees.length,\n          resIndex = 0,\n          takeCount = nativeMin(length, this.__takeCount__);\n\n      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\n        return baseWrapperValue(array, this.__actions__);\n      }\n      var result = [];\n\n      outer:\n      while (length-- && resIndex < takeCount) {\n        index += dir;\n\n        var iterIndex = -1,\n            value = array[index];\n\n        while (++iterIndex < iterLength) {\n          var data = iteratees[iterIndex],\n              iteratee = data.iteratee,\n              type = data.type,\n              computed = iteratee(value);\n\n          if (type == LAZY_MAP_FLAG) {\n            value = computed;\n          } else if (!computed) {\n            if (type == LAZY_FILTER_FLAG) {\n              continue outer;\n            } else {\n              break outer;\n            }\n          }\n        }\n        result[resIndex++] = value;\n      }\n      return result;\n    }\n\n    // Ensure `LazyWrapper` is an instance of `baseLodash`.\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n    LazyWrapper.prototype.constructor = LazyWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a hash object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Hash(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the hash.\n     *\n     * @private\n     * @name clear\n     * @memberOf Hash\n     */\n    function hashClear() {\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the hash.\n     *\n     * @private\n     * @name delete\n     * @memberOf Hash\n     * @param {Object} hash The hash to modify.\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function hashDelete(key) {\n      var result = this.has(key) && delete this.__data__[key];\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the hash value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Hash\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function hashGet(key) {\n      var data = this.__data__;\n      if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n      }\n      return hasOwnProperty.call(data, key) ? data[key] : undefined;\n    }\n\n    /**\n     * Checks if a hash value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Hash\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function hashHas(key) {\n      var data = this.__data__;\n      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n    }\n\n    /**\n     * Sets the hash `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Hash\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the hash instance.\n     */\n    function hashSet(key, value) {\n      var data = this.__data__;\n      this.size += this.has(key) ? 0 : 1;\n      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      return this;\n    }\n\n    // Add methods to `Hash`.\n    Hash.prototype.clear = hashClear;\n    Hash.prototype['delete'] = hashDelete;\n    Hash.prototype.get = hashGet;\n    Hash.prototype.has = hashHas;\n    Hash.prototype.set = hashSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an list cache object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function ListCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the list cache.\n     *\n     * @private\n     * @name clear\n     * @memberOf ListCache\n     */\n    function listCacheClear() {\n      this.__data__ = [];\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the list cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf ListCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function listCacheDelete(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        return false;\n      }\n      var lastIndex = data.length - 1;\n      if (index == lastIndex) {\n        data.pop();\n      } else {\n        splice.call(data, index, 1);\n      }\n      --this.size;\n      return true;\n    }\n\n    /**\n     * Gets the list cache value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf ListCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function listCacheGet(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      return index < 0 ? undefined : data[index][1];\n    }\n\n    /**\n     * Checks if a list cache value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf ListCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function listCacheHas(key) {\n      return assocIndexOf(this.__data__, key) > -1;\n    }\n\n    /**\n     * Sets the list cache `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf ListCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the list cache instance.\n     */\n    function listCacheSet(key, value) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        ++this.size;\n        data.push([key, value]);\n      } else {\n        data[index][1] = value;\n      }\n      return this;\n    }\n\n    // Add methods to `ListCache`.\n    ListCache.prototype.clear = listCacheClear;\n    ListCache.prototype['delete'] = listCacheDelete;\n    ListCache.prototype.get = listCacheGet;\n    ListCache.prototype.has = listCacheHas;\n    ListCache.prototype.set = listCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a map cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function MapCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the map.\n     *\n     * @private\n     * @name clear\n     * @memberOf MapCache\n     */\n    function mapCacheClear() {\n      this.size = 0;\n      this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map || ListCache),\n        'string': new Hash\n      };\n    }\n\n    /**\n     * Removes `key` and its value from the map.\n     *\n     * @private\n     * @name delete\n     * @memberOf MapCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function mapCacheDelete(key) {\n      var result = getMapData(this, key)['delete'](key);\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the map value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf MapCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n     * Checks if a map value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf MapCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function mapCacheHas(key) {\n      return getMapData(this, key).has(key);\n    }\n\n    /**\n     * Sets the map `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf MapCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the map cache instance.\n     */\n    function mapCacheSet(key, value) {\n      var data = getMapData(this, key),\n          size = data.size;\n\n      data.set(key, value);\n      this.size += data.size == size ? 0 : 1;\n      return this;\n    }\n\n    // Add methods to `MapCache`.\n    MapCache.prototype.clear = mapCacheClear;\n    MapCache.prototype['delete'] = mapCacheDelete;\n    MapCache.prototype.get = mapCacheGet;\n    MapCache.prototype.has = mapCacheHas;\n    MapCache.prototype.set = mapCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     *\n     * Creates an array cache object to store unique values.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [values] The values to cache.\n     */\n    function SetCache(values) {\n      var index = -1,\n          length = values == null ? 0 : values.length;\n\n      this.__data__ = new MapCache;\n      while (++index < length) {\n        this.add(values[index]);\n      }\n    }\n\n    /**\n     * Adds `value` to the array cache.\n     *\n     * @private\n     * @name add\n     * @memberOf SetCache\n     * @alias push\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache instance.\n     */\n    function setCacheAdd(value) {\n      this.__data__.set(value, HASH_UNDEFINED);\n      return this;\n    }\n\n    /**\n     * Checks if `value` is in the array cache.\n     *\n     * @private\n     * @name has\n     * @memberOf SetCache\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `true` if `value` is found, else `false`.\n     */\n    function setCacheHas(value) {\n      return this.__data__.has(value);\n    }\n\n    // Add methods to `SetCache`.\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n    SetCache.prototype.has = setCacheHas;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a stack cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Stack(entries) {\n      var data = this.__data__ = new ListCache(entries);\n      this.size = data.size;\n    }\n\n    /**\n     * Removes all key-value entries from the stack.\n     *\n     * @private\n     * @name clear\n     * @memberOf Stack\n     */\n    function stackClear() {\n      this.__data__ = new ListCache;\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the stack.\n     *\n     * @private\n     * @name delete\n     * @memberOf Stack\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function stackDelete(key) {\n      var data = this.__data__,\n          result = data['delete'](key);\n\n      this.size = data.size;\n      return result;\n    }\n\n    /**\n     * Gets the stack value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Stack\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n     * Checks if a stack value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Stack\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function stackHas(key) {\n      return this.__data__.has(key);\n    }\n\n    /**\n     * Sets the stack `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Stack\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the stack cache instance.\n     */\n    function stackSet(key, value) {\n      var data = this.__data__;\n      if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n          pairs.push([key, value]);\n          this.size = ++data.size;\n          return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n      }\n      data.set(key, value);\n      this.size = data.size;\n      return this;\n    }\n\n    // Add methods to `Stack`.\n    Stack.prototype.clear = stackClear;\n    Stack.prototype['delete'] = stackDelete;\n    Stack.prototype.get = stackGet;\n    Stack.prototype.has = stackHas;\n    Stack.prototype.set = stackSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of the enumerable property names of the array-like `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @param {boolean} inherited Specify returning inherited property names.\n     * @returns {Array} Returns the array of property names.\n     */\n    function arrayLikeKeys(value, inherited) {\n      var isArr = isArray(value),\n          isArg = !isArr && isArguments(value),\n          isBuff = !isArr && !isArg && isBuffer(value),\n          isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n          skipIndexes = isArr || isArg || isBuff || isType,\n          result = skipIndexes ? baseTimes(value.length, String) : [],\n          length = result.length;\n\n      for (var key in value) {\n        if ((inherited || hasOwnProperty.call(value, key)) &&\n            !(skipIndexes && (\n               // Safari 9 has enumerable `arguments.length` in strict mode.\n               key == 'length' ||\n               // Node.js 0.10 has enumerable non-index properties on buffers.\n               (isBuff && (key == 'offset' || key == 'parent')) ||\n               // PhantomJS 2 has enumerable non-index properties on typed arrays.\n               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n               // Skip index properties.\n               isIndex(key, length)\n            ))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.sample` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @returns {*} Returns the random element.\n     */\n    function arraySample(array) {\n      var length = array.length;\n      return length ? array[baseRandom(0, length - 1)] : undefined;\n    }\n\n    /**\n     * A specialized version of `_.sampleSize` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function arraySampleSize(array, n) {\n      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * A specialized version of `_.shuffle` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function arrayShuffle(array) {\n      return shuffleSelf(copyArray(array));\n    }\n\n    /**\n     * This function is like `assignValue` except that it doesn't assign\n     * `undefined` values.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignMergeValue(object, key, value) {\n      if ((value !== undefined && !eq(object[key], value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignValue(object, key, value) {\n      var objValue = object[key];\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {*} key The key to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function assocIndexOf(array, key) {\n      var length = array.length;\n      while (length--) {\n        if (eq(array[length][0], key)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\n     * by `iteratee` and values set by `setter`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseAggregator(collection, setter, iteratee, accumulator) {\n      baseEach(collection, function(value, key, collection) {\n        setter(accumulator, value, iteratee(value), collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.assign` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssign(object, source) {\n      return object && copyObject(source, keys(source), object);\n    }\n\n    /**\n     * The base implementation of `_.assignIn` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssignIn(object, source) {\n      return object && copyObject(source, keysIn(source), object);\n    }\n\n    /**\n     * The base implementation of `assignValue` and `assignMergeValue` without\n     * value checks.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function baseAssignValue(object, key, value) {\n      if (key == '__proto__' && defineProperty) {\n        defineProperty(object, key, {\n          'configurable': true,\n          'enumerable': true,\n          'value': value,\n          'writable': true\n        });\n      } else {\n        object[key] = value;\n      }\n    }\n\n    /**\n     * The base implementation of `_.at` without support for individual paths.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Array} Returns the picked elements.\n     */\n    function baseAt(object, paths) {\n      var index = -1,\n          length = paths.length,\n          result = Array(length),\n          skip = object == null;\n\n      while (++index < length) {\n        result[index] = skip ? undefined : get(object, paths[index]);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     */\n    function baseClamp(number, lower, upper) {\n      if (number === number) {\n        if (upper !== undefined) {\n          number = number <= upper ? number : upper;\n        }\n        if (lower !== undefined) {\n          number = number >= lower ? number : lower;\n        }\n      }\n      return number;\n    }\n\n    /**\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n     * traversed objects.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Deep clone\n     *  2 - Flatten inherited properties\n     *  4 - Clone symbols\n     * @param {Function} [customizer] The function to customize cloning.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The parent object of `value`.\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, bitmask, customizer, key, object, stack) {\n      var result,\n          isDeep = bitmask & CLONE_DEEP_FLAG,\n          isFlat = bitmask & CLONE_FLAT_FLAG,\n          isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n      if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n      }\n      if (result !== undefined) {\n        return result;\n      }\n      if (!isObject(value)) {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n          return copyArray(value, result);\n        }\n      } else {\n        var tag = getTag(value),\n            isFunc = tag == funcTag || tag == genTag;\n\n        if (isBuffer(value)) {\n          return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n          result = (isFlat || isFunc) ? {} : initCloneObject(value);\n          if (!isDeep) {\n            return isFlat\n              ? copySymbolsIn(value, baseAssignIn(result, value))\n              : copySymbols(value, baseAssign(result, value));\n          }\n        } else {\n          if (!cloneableTags[tag]) {\n            return object ? value : {};\n          }\n          result = initCloneByTag(value, tag, isDeep);\n        }\n      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n      stack.set(value, result);\n\n      if (isSet(value)) {\n        value.forEach(function(subValue) {\n          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n        });\n      } else if (isMap(value)) {\n        value.forEach(function(subValue, key) {\n          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n        });\n      }\n\n      var keysFunc = isFull\n        ? (isFlat ? getAllKeysIn : getAllKeys)\n        : (isFlat ? keysIn : keys);\n\n      var props = isArr ? undefined : keysFunc(value);\n      arrayEach(props || value, function(subValue, key) {\n        if (props) {\n          key = subValue;\n          subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.conforms` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseConforms(source) {\n      var props = keys(source);\n      return function(object) {\n        return baseConformsTo(object, source, props);\n      };\n    }\n\n    /**\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     */\n    function baseConformsTo(object, source, props) {\n      var length = props.length;\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (length--) {\n        var key = props[length],\n            predicate = source[key],\n            value = object[key];\n\n        if ((value === undefined && !(key in object)) || !predicate(value)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n     * to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Array} args The arguments to provide to `func`.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    function baseDelay(func, wait, args) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * The base implementation of methods like `_.difference` without support\n     * for excluding multiple arrays or iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     */\n    function baseDifference(array, values, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          isCommon = true,\n          length = array.length,\n          result = [],\n          valuesLength = values.length;\n\n      if (!length) {\n        return result;\n      }\n      if (iteratee) {\n        values = arrayMap(values, baseUnary(iteratee));\n      }\n      if (comparator) {\n        includes = arrayIncludesWith;\n        isCommon = false;\n      }\n      else if (values.length >= LARGE_ARRAY_SIZE) {\n        includes = cacheHas;\n        isCommon = false;\n        values = new SetCache(values);\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee == null ? value : iteratee(value);\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var valuesIndex = valuesLength;\n          while (valuesIndex--) {\n            if (values[valuesIndex] === computed) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n        else if (!includes(values, computed, comparator)) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEach = createBaseEach(baseForOwn);\n\n    /**\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n    /**\n     * The base implementation of `_.every` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */\n    function baseEvery(collection, predicate) {\n      var result = true;\n      baseEach(collection, function(value, index, collection) {\n        result = !!predicate(value, index, collection);\n        return result;\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n\n        if (current != null && (computed === undefined\n              ? (current === current && !isSymbol(current))\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */\n    function baseFill(array, value, start, end) {\n      var length = array.length;\n\n      start = toInteger(start);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : toInteger(end);\n      if (end < 0) {\n        end += length;\n      }\n      end = start > end ? 0 : toLength(end);\n      while (start < end) {\n        array[start++] = value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.filter` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function baseFilter(collection, predicate) {\n      var result = [];\n      baseEach(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) {\n          result.push(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` with support for restricting flattening.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {number} depth The maximum recursion depth.\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */\n    function baseFlatten(array, depth, predicate, isStrict, result) {\n      var index = -1,\n          length = array.length;\n\n      predicate || (predicate = isFlattenable);\n      result || (result = []);\n\n      while (++index < length) {\n        var value = array[index];\n        if (depth > 0 && predicate(value)) {\n          if (depth > 1) {\n            // Recursively flatten arrays (susceptible to call stack limits).\n            baseFlatten(value, depth - 1, predicate, isStrict, result);\n          } else {\n            arrayPush(result, value);\n          }\n        } else if (!isStrict) {\n          result[result.length] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `baseForOwn` which iterates over `object`\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseFor = createBaseFor();\n\n    /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseForRight = createBaseFor(true);\n\n    /**\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwn(object, iteratee) {\n      return object && baseFor(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwnRight(object, iteratee) {\n      return object && baseForRight(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from `props`.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the function names.\n     */\n    function baseFunctions(object, props) {\n      return arrayFilter(props, function(key) {\n        return isFunction(object[key]);\n      });\n    }\n\n    /**\n     * The base implementation of `_.get` without support for default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseGet(object, path) {\n      path = castPath(path, object);\n\n      var index = 0,\n          length = path.length;\n\n      while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n      }\n      return (index && index == length) ? object : undefined;\n    }\n\n    /**\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n      var result = keysFunc(object);\n      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n    }\n\n    /**\n     * The base implementation of `getTag` without fallbacks for buggy environments.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    function baseGetTag(value) {\n      if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n      }\n      return (symToStringTag && symToStringTag in Object(value))\n        ? getRawTag(value)\n        : objectToString(value);\n    }\n\n    /**\n     * The base implementation of `_.gt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     */\n    function baseGt(value, other) {\n      return value > other;\n    }\n\n    /**\n     * The base implementation of `_.has` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHas(object, key) {\n      return object != null && hasOwnProperty.call(object, key);\n    }\n\n    /**\n     * The base implementation of `_.hasIn` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHasIn(object, key) {\n      return object != null && key in Object(object);\n    }\n\n    /**\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to check.\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     */\n    function baseInRange(number, start, end) {\n      return number >= nativeMin(start, end) && number < nativeMax(start, end);\n    }\n\n    /**\n     * The base implementation of methods like `_.intersection`, without support\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of shared values.\n     */\n    function baseIntersection(arrays, iteratee, comparator) {\n      var includes = comparator ? arrayIncludesWith : arrayIncludes,\n          length = arrays[0].length,\n          othLength = arrays.length,\n          othIndex = othLength,\n          caches = Array(othLength),\n          maxLength = Infinity,\n          result = [];\n\n      while (othIndex--) {\n        var array = arrays[othIndex];\n        if (othIndex && iteratee) {\n          array = arrayMap(array, baseUnary(iteratee));\n        }\n        maxLength = nativeMin(array.length, maxLength);\n        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n          ? new SetCache(othIndex && array)\n          : undefined;\n      }\n      array = arrays[0];\n\n      var index = -1,\n          seen = caches[0];\n\n      outer:\n      while (++index < length && result.length < maxLength) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (!(seen\n              ? cacheHas(seen, computed)\n              : includes(result, computed, comparator)\n            )) {\n          othIndex = othLength;\n          while (--othIndex) {\n            var cache = caches[othIndex];\n            if (!(cache\n                  ? cacheHas(cache, computed)\n                  : includes(arrays[othIndex], computed, comparator))\n                ) {\n              continue outer;\n            }\n          }\n          if (seen) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\n     * `object` with values transformed by `iteratee` and set by `setter`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform values.\n     * @param {Object} accumulator The initial inverted object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseInverter(object, setter, iteratee, accumulator) {\n      baseForOwn(object, function(value, key, object) {\n        setter(accumulator, iteratee(value), key, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.invoke` without support for individual\n     * method arguments.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */\n    function baseInvoke(object, path, args) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      var func = object == null ? object : object[toKey(last(path))];\n      return func == null ? undefined : apply(func, object, args);\n    }\n\n    /**\n     * The base implementation of `_.isArguments`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     */\n    function baseIsArguments(value) {\n      return isObjectLike(value) && baseGetTag(value) == argsTag;\n    }\n\n    /**\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     */\n    function baseIsArrayBuffer(value) {\n      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\n    }\n\n    /**\n     * The base implementation of `_.isDate` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     */\n    function baseIsDate(value) {\n      return isObjectLike(value) && baseGetTag(value) == dateTag;\n    }\n\n    /**\n     * The base implementation of `_.isEqual` which supports partial comparisons\n     * and tracks traversed objects.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Unordered comparison\n     *  2 - Partial comparison\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(value, other, bitmask, customizer, stack) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n    }\n\n    /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n      var objIsArr = isArray(object),\n          othIsArr = isArray(other),\n          objTag = objIsArr ? arrayTag : getTag(object),\n          othTag = othIsArr ? arrayTag : getTag(other);\n\n      objTag = objTag == argsTag ? objectTag : objTag;\n      othTag = othTag == argsTag ? objectTag : othTag;\n\n      var objIsObj = objTag == objectTag,\n          othIsObj = othTag == objectTag,\n          isSameTag = objTag == othTag;\n\n      if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n          return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n      }\n      if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return (objIsArr || isTypedArray(object))\n          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n      }\n      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n        if (objIsWrapped || othIsWrapped) {\n          var objUnwrapped = objIsWrapped ? object.value() : object,\n              othUnwrapped = othIsWrapped ? other.value() : other;\n\n          stack || (stack = new Stack);\n          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      stack || (stack = new Stack);\n      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n    }\n\n    /**\n     * The base implementation of `_.isMap` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     */\n    function baseIsMap(value) {\n      return isObjectLike(value) && getTag(value) == mapTag;\n    }\n\n    /**\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Array} matchData The property names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */\n    function baseIsMatch(object, source, matchData, customizer) {\n      var index = matchData.length,\n          length = index,\n          noCustomizer = !customizer;\n\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (index--) {\n        var data = matchData[index];\n        if ((noCustomizer && data[2])\n              ? data[1] !== object[data[0]]\n              : !(data[0] in object)\n            ) {\n          return false;\n        }\n      }\n      while (++index < length) {\n        data = matchData[index];\n        var key = data[0],\n            objValue = object[key],\n            srcValue = data[1];\n\n        if (noCustomizer && data[2]) {\n          if (objValue === undefined && !(key in object)) {\n            return false;\n          }\n        } else {\n          var stack = new Stack;\n          if (customizer) {\n            var result = customizer(objValue, srcValue, key, object, source, stack);\n          }\n          if (!(result === undefined\n                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n                : result\n              )) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.isNative` without bad shim checks.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     */\n    function baseIsNative(value) {\n      if (!isObject(value) || isMasked(value)) {\n        return false;\n      }\n      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n      return pattern.test(toSource(value));\n    }\n\n    /**\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     */\n    function baseIsRegExp(value) {\n      return isObjectLike(value) && baseGetTag(value) == regexpTag;\n    }\n\n    /**\n     * The base implementation of `_.isSet` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     */\n    function baseIsSet(value) {\n      return isObjectLike(value) && getTag(value) == setTag;\n    }\n\n    /**\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     */\n    function baseIsTypedArray(value) {\n      return isObjectLike(value) &&\n        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n    }\n\n    /**\n     * The base implementation of `_.iteratee`.\n     *\n     * @private\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\n     * @returns {Function} Returns the iteratee.\n     */\n    function baseIteratee(value) {\n      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n      if (typeof value == 'function') {\n        return value;\n      }\n      if (value == null) {\n        return identity;\n      }\n      if (typeof value == 'object') {\n        return isArray(value)\n          ? baseMatchesProperty(value[0], value[1])\n          : baseMatches(value);\n      }\n      return property(value);\n    }\n\n    /**\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeys(object) {\n      if (!isPrototype(object)) {\n        return nativeKeys(object);\n      }\n      var result = [];\n      for (var key in Object(object)) {\n        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeysIn(object) {\n      if (!isObject(object)) {\n        return nativeKeysIn(object);\n      }\n      var isProto = isPrototype(object),\n          result = [];\n\n      for (var key in object) {\n        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.lt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     */\n    function baseLt(value, other) {\n      return value < other;\n    }\n\n    /**\n     * The base implementation of `_.map` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function baseMap(collection, iteratee) {\n      var index = -1,\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.matches` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatches(source) {\n      var matchData = getMatchData(source);\n      if (matchData.length == 1 && matchData[0][2]) {\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n      }\n      return function(object) {\n        return object === source || baseIsMatch(object, source, matchData);\n      };\n    }\n\n    /**\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatchesProperty(path, srcValue) {\n      if (isKey(path) && isStrictComparable(srcValue)) {\n        return matchesStrictComparable(toKey(path), srcValue);\n      }\n      return function(object) {\n        var objValue = get(object, path);\n        return (objValue === undefined && objValue === srcValue)\n          ? hasIn(object, path)\n          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n      };\n    }\n\n    /**\n     * The base implementation of `_.merge` without support for multiple sources.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMerge(object, source, srcIndex, customizer, stack) {\n      if (object === source) {\n        return;\n      }\n      baseFor(source, function(srcValue, key) {\n        stack || (stack = new Stack);\n        if (isObject(srcValue)) {\n          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n        }\n        else {\n          var newValue = customizer\n            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n            : undefined;\n\n          if (newValue === undefined) {\n            newValue = srcValue;\n          }\n          assignMergeValue(object, key, newValue);\n        }\n      }, keysIn);\n    }\n\n    /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = safeGet(object, key),\n          srcValue = safeGet(source, key),\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n        return;\n      }\n      var newValue = customizer\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      var isCommon = newValue === undefined;\n\n      if (isCommon) {\n        var isArr = isArray(srcValue),\n            isBuff = !isArr && isBuffer(srcValue),\n            isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n        newValue = srcValue;\n        if (isArr || isBuff || isTyped) {\n          if (isArray(objValue)) {\n            newValue = objValue;\n          }\n          else if (isArrayLikeObject(objValue)) {\n            newValue = copyArray(objValue);\n          }\n          else if (isBuff) {\n            isCommon = false;\n            newValue = cloneBuffer(srcValue, true);\n          }\n          else if (isTyped) {\n            isCommon = false;\n            newValue = cloneTypedArray(srcValue, true);\n          }\n          else {\n            newValue = [];\n          }\n        }\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n          newValue = objValue;\n          if (isArguments(objValue)) {\n            newValue = toPlainObject(objValue);\n          }\n          else if (!isObject(objValue) || isFunction(objValue)) {\n            newValue = initCloneObject(srcValue);\n          }\n        }\n        else {\n          isCommon = false;\n        }\n      }\n      if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack['delete'](srcValue);\n      }\n      assignMergeValue(object, key, newValue);\n    }\n\n    /**\n     * The base implementation of `_.nth` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {number} n The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     */\n    function baseNth(array, n) {\n      var length = array.length;\n      if (!length) {\n        return;\n      }\n      n += n < 0 ? length : 0;\n      return isIndex(n, length) ? array[n] : undefined;\n    }\n\n    /**\n     * The base implementation of `_.orderBy` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {string[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */\n    function baseOrderBy(collection, iteratees, orders) {\n      if (iteratees.length) {\n        iteratees = arrayMap(iteratees, function(iteratee) {\n          if (isArray(iteratee)) {\n            return function(value) {\n              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n            }\n          }\n          return iteratee;\n        });\n      } else {\n        iteratees = [identity];\n      }\n\n      var index = -1;\n      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n\n      var result = baseMap(collection, function(value, key, collection) {\n        var criteria = arrayMap(iteratees, function(iteratee) {\n          return iteratee(value);\n        });\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\n      });\n\n      return baseSortBy(result, function(object, other) {\n        return compareMultiple(object, other, orders);\n      });\n    }\n\n    /**\n     * The base implementation of `_.pick` without support for individual\n     * property identifiers.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Object} Returns the new object.\n     */\n    function basePick(object, paths) {\n      return basePickBy(object, paths, function(value, path) {\n        return hasIn(object, path);\n      });\n    }\n\n    /**\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @param {Function} predicate The function invoked per property.\n     * @returns {Object} Returns the new object.\n     */\n    function basePickBy(object, paths, predicate) {\n      var index = -1,\n          length = paths.length,\n          result = {};\n\n      while (++index < length) {\n        var path = paths[index],\n            value = baseGet(object, path);\n\n        if (predicate(value, path)) {\n          baseSet(result, castPath(path, object), value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     */\n    function basePropertyDeep(path) {\n      return function(object) {\n        return baseGet(object, path);\n      };\n    }\n\n    /**\n     * The base implementation of `_.pullAllBy` without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAll(array, values, iteratee, comparator) {\n      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n          index = -1,\n          length = values.length,\n          seen = array;\n\n      if (array === values) {\n        values = copyArray(values);\n      }\n      if (iteratee) {\n        seen = arrayMap(array, baseUnary(iteratee));\n      }\n      while (++index < length) {\n        var fromIndex = 0,\n            value = values[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n          if (seen !== array) {\n            splice.call(seen, fromIndex, 1);\n          }\n          splice.call(array, fromIndex, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.pullAt` without support for individual\n     * indexes or capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAt(array, indexes) {\n      var length = array ? indexes.length : 0,\n          lastIndex = length - 1;\n\n      while (length--) {\n        var index = indexes[length];\n        if (length == lastIndex || index !== previous) {\n          var previous = index;\n          if (isIndex(index)) {\n            splice.call(array, index, 1);\n          } else {\n            baseUnset(array, index);\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.random` without support for returning\n     * floating-point numbers.\n     *\n     * @private\n     * @param {number} lower The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the random number.\n     */\n    function baseRandom(lower, upper) {\n      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n    }\n\n    /**\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n     * coerce arguments.\n     *\n     * @private\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} step The value to increment or decrement by.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the range of numbers.\n     */\n    function baseRange(start, end, step, fromRight) {\n      var index = -1,\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n          result = Array(length);\n\n      while (length--) {\n        result[fromRight ? length : ++index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {string} string The string to repeat.\n     * @param {number} n The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     */\n    function baseRepeat(string, n) {\n      var result = '';\n      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n        return result;\n      }\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n      do {\n        if (n % 2) {\n          result += string;\n        }\n        n = nativeFloor(n / 2);\n        if (n) {\n          string += string;\n        }\n      } while (n);\n\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     */\n    function baseRest(func, start) {\n      return setToString(overRest(func, start, identity), func + '');\n    }\n\n    /**\n     * The base implementation of `_.sample`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     */\n    function baseSample(collection) {\n      return arraySample(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.sampleSize` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function baseSampleSize(collection, n) {\n      var array = values(collection);\n      return shuffleSelf(array, baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * The base implementation of `_.set`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseSet(object, path, value, customizer) {\n      if (!isObject(object)) {\n        return object;\n      }\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          lastIndex = length - 1,\n          nested = object;\n\n      while (nested != null && ++index < length) {\n        var key = toKey(path[index]),\n            newValue = value;\n\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n          return object;\n        }\n\n        if (index != lastIndex) {\n          var objValue = nested[key];\n          newValue = customizer ? customizer(objValue, key, nested) : undefined;\n          if (newValue === undefined) {\n            newValue = isObject(objValue)\n              ? objValue\n              : (isIndex(path[index + 1]) ? [] : {});\n          }\n        }\n        assignValue(nested, key, newValue);\n        nested = nested[key];\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `setData` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetData = !metaMap ? identity : function(func, data) {\n      metaMap.set(func, data);\n      return func;\n    };\n\n    /**\n     * The base implementation of `setToString` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetToString = !defineProperty ? identity : function(func, string) {\n      return defineProperty(func, 'toString', {\n        'configurable': true,\n        'enumerable': false,\n        'value': constant(string),\n        'writable': true\n      });\n    };\n\n    /**\n     * The base implementation of `_.shuffle`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function baseShuffle(collection) {\n      return shuffleSelf(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseSlice(array, start, end) {\n      var index = -1,\n          length = array.length;\n\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = end > length ? length : end;\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : ((end - start) >>> 0);\n      start >>>= 0;\n\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = array[index + start];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.some` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function baseSome(collection, predicate) {\n      var result;\n\n      baseEach(collection, function(value, index, collection) {\n        result = predicate(value, index, collection);\n        return !result;\n      });\n      return !!result;\n    }\n\n    /**\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n     * performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndex(array, value, retHighest) {\n      var low = 0,\n          high = array == null ? low : array.length;\n\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n        while (low < high) {\n          var mid = (low + high) >>> 1,\n              computed = array[mid];\n\n          if (computed !== null && !isSymbol(computed) &&\n              (retHighest ? (computed <= value) : (computed < value))) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return high;\n      }\n      return baseSortedIndexBy(array, value, identity, retHighest);\n    }\n\n    /**\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n     * which invokes `iteratee` for `value` and each element of `array` to compute\n     * their sort ranking. The iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The iteratee invoked per element.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\n      var low = 0,\n          high = array == null ? 0 : array.length;\n      if (high === 0) {\n        return 0;\n      }\n\n      value = iteratee(value);\n      var valIsNaN = value !== value,\n          valIsNull = value === null,\n          valIsSymbol = isSymbol(value),\n          valIsUndefined = value === undefined;\n\n      while (low < high) {\n        var mid = nativeFloor((low + high) / 2),\n            computed = iteratee(array[mid]),\n            othIsDefined = computed !== undefined,\n            othIsNull = computed === null,\n            othIsReflexive = computed === computed,\n            othIsSymbol = isSymbol(computed);\n\n        if (valIsNaN) {\n          var setLow = retHighest || othIsReflexive;\n        } else if (valIsUndefined) {\n          setLow = othIsReflexive && (retHighest || othIsDefined);\n        } else if (valIsNull) {\n          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n        } else if (valIsSymbol) {\n          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n        } else if (othIsNull || othIsSymbol) {\n          setLow = false;\n        } else {\n          setLow = retHighest ? (computed <= value) : (computed < value);\n        }\n        if (setLow) {\n          low = mid + 1;\n        } else {\n          high = mid;\n        }\n      }\n      return nativeMin(high, MAX_ARRAY_INDEX);\n    }\n\n    /**\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseSortedUniq(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        if (!index || !eq(computed, seen)) {\n          var seen = computed;\n          result[resIndex++] = value === 0 ? 0 : value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.toNumber` which doesn't ensure correct\n     * conversions of binary, hexadecimal, or octal string values.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     */\n    function baseToNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      return +value;\n    }\n\n    /**\n     * The base implementation of `_.toString` which doesn't convert nullish\n     * values to empty strings.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     */\n    function baseToString(value) {\n      // Exit early for strings to avoid a performance hit in some environments.\n      if (typeof value == 'string') {\n        return value;\n      }\n      if (isArray(value)) {\n        // Recursively convert values (susceptible to call stack limits).\n        return arrayMap(value, baseToString) + '';\n      }\n      if (isSymbol(value)) {\n        return symbolToString ? symbolToString.call(value) : '';\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseUniq(array, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          length = array.length,\n          isCommon = true,\n          result = [],\n          seen = result;\n\n      if (comparator) {\n        isCommon = false;\n        includes = arrayIncludesWith;\n      }\n      else if (length >= LARGE_ARRAY_SIZE) {\n        var set = iteratee ? null : createSet(array);\n        if (set) {\n          return setToArray(set);\n        }\n        isCommon = false;\n        includes = cacheHas;\n        seen = new SetCache;\n      }\n      else {\n        seen = iteratee ? [] : result;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var seenIndex = seen.length;\n          while (seenIndex--) {\n            if (seen[seenIndex] === computed) {\n              continue outer;\n            }\n          }\n          if (iteratee) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n        else if (!includes(seen, computed, comparator)) {\n          if (seen !== result) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.unset`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The property path to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     */\n    function baseUnset(object, path) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      return object == null || delete object[toKey(last(path))];\n    }\n\n    /**\n     * The base implementation of `_.update`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to update.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseUpdate(object, path, updater, customizer) {\n      return baseSet(object, path, updater(baseGet(object, path)), customizer);\n    }\n\n    /**\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n     * without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseWhile(array, predicate, isDrop, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n\n      while ((fromRight ? index-- : ++index < length) &&\n        predicate(array[index], index, array)) {}\n\n      return isDrop\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n    }\n\n    /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseWrapperValue(value, actions) {\n      var result = value;\n      if (result instanceof LazyWrapper) {\n        result = result.value();\n      }\n      return arrayReduce(actions, function(result, action) {\n        return action.func.apply(action.thisArg, arrayPush([result], action.args));\n      }, result);\n    }\n\n    /**\n     * The base implementation of methods like `_.xor`, without support for\n     * iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of values.\n     */\n    function baseXor(arrays, iteratee, comparator) {\n      var length = arrays.length;\n      if (length < 2) {\n        return length ? baseUniq(arrays[0]) : [];\n      }\n      var index = -1,\n          result = Array(length);\n\n      while (++index < length) {\n        var array = arrays[index],\n            othIndex = -1;\n\n        while (++othIndex < length) {\n          if (othIndex != index) {\n            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n          }\n        }\n      }\n      return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n    }\n\n    /**\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n     *\n     * @private\n     * @param {Array} props The property identifiers.\n     * @param {Array} values The property values.\n     * @param {Function} assignFunc The function to assign values.\n     * @returns {Object} Returns the new object.\n     */\n    function baseZipObject(props, values, assignFunc) {\n      var index = -1,\n          length = props.length,\n          valsLength = values.length,\n          result = {};\n\n      while (++index < length) {\n        var value = index < valsLength ? values[index] : undefined;\n        assignFunc(result, props[index], value);\n      }\n      return result;\n    }\n\n    /**\n     * Casts `value` to an empty array if it's not an array like object.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array|Object} Returns the cast array-like object.\n     */\n    function castArrayLikeObject(value) {\n      return isArrayLikeObject(value) ? value : [];\n    }\n\n    /**\n     * Casts `value` to `identity` if it's not a function.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Function} Returns cast function.\n     */\n    function castFunction(value) {\n      return typeof value == 'function' ? value : identity;\n    }\n\n    /**\n     * Casts `value` to a path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {Array} Returns the cast property path array.\n     */\n    function castPath(value, object) {\n      if (isArray(value)) {\n        return value;\n      }\n      return isKey(value, object) ? [value] : stringToPath(toString(value));\n    }\n\n    /**\n     * A `baseRest` alias which can be replaced with `identity` by module\n     * replacement plugins.\n     *\n     * @private\n     * @type {Function}\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    var castRest = baseRest;\n\n    /**\n     * Casts `array` to a slice if it's needed.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {number} start The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the cast slice.\n     */\n    function castSlice(array, start, end) {\n      var length = array.length;\n      end = end === undefined ? length : end;\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\n    }\n\n    /**\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n     *\n     * @private\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n     */\n    var clearTimeout = ctxClearTimeout || function(id) {\n      return root.clearTimeout(id);\n    };\n\n    /**\n     * Creates a clone of  `buffer`.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Buffer} Returns the cloned buffer.\n     */\n    function cloneBuffer(buffer, isDeep) {\n      if (isDeep) {\n        return buffer.slice();\n      }\n      var length = buffer.length,\n          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n      buffer.copy(result);\n      return result;\n    }\n\n    /**\n     * Creates a clone of `arrayBuffer`.\n     *\n     * @private\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */\n    function cloneArrayBuffer(arrayBuffer) {\n      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n      return result;\n    }\n\n    /**\n     * Creates a clone of `dataView`.\n     *\n     * @private\n     * @param {Object} dataView The data view to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned data view.\n     */\n    function cloneDataView(dataView, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n    }\n\n    /**\n     * Creates a clone of `regexp`.\n     *\n     * @private\n     * @param {Object} regexp The regexp to clone.\n     * @returns {Object} Returns the cloned regexp.\n     */\n    function cloneRegExp(regexp) {\n      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n      result.lastIndex = regexp.lastIndex;\n      return result;\n    }\n\n    /**\n     * Creates a clone of the `symbol` object.\n     *\n     * @private\n     * @param {Object} symbol The symbol object to clone.\n     * @returns {Object} Returns the cloned symbol object.\n     */\n    function cloneSymbol(symbol) {\n      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n    }\n\n    /**\n     * Creates a clone of `typedArray`.\n     *\n     * @private\n     * @param {Object} typedArray The typed array to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned typed array.\n     */\n    function cloneTypedArray(typedArray, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n    }\n\n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsDefined = value !== undefined,\n            valIsNull = value === null,\n            valIsReflexive = value === value,\n            valIsSymbol = isSymbol(value);\n\n        var othIsDefined = other !== undefined,\n            othIsNull = other === null,\n            othIsReflexive = other === other,\n            othIsSymbol = isSymbol(other);\n\n        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n            (valIsNull && othIsDefined && othIsReflexive) ||\n            (!valIsDefined && othIsReflexive) ||\n            !valIsReflexive) {\n          return 1;\n        }\n        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n            (othIsNull && valIsDefined && valIsReflexive) ||\n            (!othIsDefined && valIsReflexive) ||\n            !othIsReflexive) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n\n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n\n    /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgs(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersLength = holders.length,\n          leftIndex = -1,\n          leftLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(leftLength + rangeLength),\n          isUncurried = !isCurried;\n\n      while (++leftIndex < leftLength) {\n        result[leftIndex] = partials[leftIndex];\n      }\n      while (++argsIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n      }\n      while (rangeLength--) {\n        result[leftIndex++] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgsRight(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersIndex = -1,\n          holdersLength = holders.length,\n          rightIndex = -1,\n          rightLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(rangeLength + rightLength),\n          isUncurried = !isCurried;\n\n      while (++argsIndex < rangeLength) {\n        result[argsIndex] = args[argsIndex];\n      }\n      var offset = argsIndex;\n      while (++rightIndex < rightLength) {\n        result[offset + rightIndex] = partials[rightIndex];\n      }\n      while (++holdersIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */\n    function copyArray(source, array) {\n      var index = -1,\n          length = source.length;\n\n      array || (array = Array(length));\n      while (++index < length) {\n        array[index] = source[index];\n      }\n      return array;\n    }\n\n    /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property identifiers to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @param {Function} [customizer] The function to customize copied values.\n     * @returns {Object} Returns `object`.\n     */\n    function copyObject(source, props, object, customizer) {\n      var isNew = !object;\n      object || (object = {});\n\n      var index = -1,\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n\n        var newValue = customizer\n          ? customizer(object[key], source[key], key, object, source)\n          : undefined;\n\n        if (newValue === undefined) {\n          newValue = source[key];\n        }\n        if (isNew) {\n          baseAssignValue(object, key, newValue);\n        } else {\n          assignValue(object, key, newValue);\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Copies own symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbols(source, object) {\n      return copyObject(source, getSymbols(source), object);\n    }\n\n    /**\n     * Copies own and inherited symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbolsIn(source, object) {\n      return copyObject(source, getSymbolsIn(source), object);\n    }\n\n    /**\n     * Creates a function like `_.groupBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} [initializer] The accumulator object initializer.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter, initializer) {\n      return function(collection, iteratee) {\n        var func = isArray(collection) ? arrayAggregator : baseAggregator,\n            accumulator = initializer ? initializer() : {};\n\n        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n      };\n    }\n\n    /**\n     * Creates a function like `_.assign`.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */\n    function createAssigner(assigner) {\n      return baseRest(function(object, sources) {\n        var index = -1,\n            length = sources.length,\n            customizer = length > 1 ? sources[length - 1] : undefined,\n            guard = length > 2 ? sources[2] : undefined;\n\n        customizer = (assigner.length > 3 && typeof customizer == 'function')\n          ? (length--, customizer)\n          : undefined;\n\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n          customizer = length < 3 ? undefined : customizer;\n          length = 1;\n        }\n        object = Object(object);\n        while (++index < length) {\n          var source = sources[index];\n          if (source) {\n            assigner(object, source, index, customizer);\n          }\n        }\n        return object;\n      });\n    }\n\n    /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseEach(eachFunc, fromRight) {\n      return function(collection, iteratee) {\n        if (collection == null) {\n          return collection;\n        }\n        if (!isArrayLike(collection)) {\n          return eachFunc(collection, iteratee);\n        }\n        var length = collection.length,\n            index = fromRight ? length : -1,\n            iterable = Object(collection);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n          }\n        }\n        return collection;\n      };\n    }\n\n    /**\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseFor(fromRight) {\n      return function(object, iteratee, keysFunc) {\n        var index = -1,\n            iterable = Object(object),\n            props = keysFunc(object),\n            length = props.length;\n\n        while (length--) {\n          var key = props[fromRight ? length : ++index];\n          if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n          }\n        }\n        return object;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the optional `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createBind(func, bitmask, thisArg) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(isBind ? thisArg : this, arguments);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.lowerFirst`.\n     *\n     * @private\n     * @param {string} methodName The name of the `String` case method to use.\n     * @returns {Function} Returns the new case function.\n     */\n    function createCaseFirst(methodName) {\n      return function(string) {\n        string = toString(string);\n\n        var strSymbols = hasUnicode(string)\n          ? stringToArray(string)\n          : undefined;\n\n        var chr = strSymbols\n          ? strSymbols[0]\n          : string.charAt(0);\n\n        var trailing = strSymbols\n          ? castSlice(strSymbols, 1).join('')\n          : string.slice(1);\n\n        return chr[methodName]() + trailing;\n      };\n    }\n\n    /**\n     * Creates a function like `_.camelCase`.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */\n    function createCompounder(callback) {\n      return function(string) {\n        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n      };\n    }\n\n    /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCtor(Ctor) {\n      return function() {\n        // Use a `switch` statement to work with class constructors. See\n        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.\n        var args = arguments;\n        switch (args.length) {\n          case 0: return new Ctor;\n          case 1: return new Ctor(args[0]);\n          case 2: return new Ctor(args[0], args[1]);\n          case 3: return new Ctor(args[0], args[1], args[2]);\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n        var thisBinding = baseCreate(Ctor.prototype),\n            result = Ctor.apply(thisBinding, args);\n\n        // Mimic the constructor's `return` behavior.\n        // See https://es5.github.io/#x13.2.2 for more details.\n        return isObject(result) ? result : thisBinding;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to enable currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {number} arity The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCurry(func, bitmask, arity) {\n      var Ctor = createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length,\n            placeholder = getHolder(wrapper);\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n          ? []\n          : replaceHolders(args, placeholder);\n\n        length -= holders.length;\n        if (length < arity) {\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, undefined,\n            args, holders, undefined, undefined, arity - length);\n        }\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return apply(fn, this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} findIndexFunc The function to find the collection index.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFind(findIndexFunc) {\n      return function(collection, predicate, fromIndex) {\n        var iterable = Object(collection);\n        if (!isArrayLike(collection)) {\n          var iteratee = getIteratee(predicate, 3);\n          collection = keys(collection);\n          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n        }\n        var index = findIndexFunc(collection, predicate, fromIndex);\n        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n      };\n    }\n\n    /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */\n    function createFlow(fromRight) {\n      return flatRest(function(funcs) {\n        var length = funcs.length,\n            index = length,\n            prereq = LodashWrapper.prototype.thru;\n\n        if (fromRight) {\n          funcs.reverse();\n        }\n        while (index--) {\n          var func = funcs[index];\n          if (typeof func != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n            var wrapper = new LodashWrapper([], true);\n          }\n        }\n        index = wrapper ? index : length;\n        while (++index < length) {\n          func = funcs[index];\n\n          var funcName = getFuncName(func),\n              data = funcName == 'wrapper' ? getData(func) : undefined;\n\n          if (data && isLaziable(data[0]) &&\n                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&\n                !data[4].length && data[9] == 1\n              ) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n          } else {\n            wrapper = (func.length == 1 && isLaziable(func))\n              ? wrapper[funcName]()\n              : wrapper.thru(func);\n          }\n        }\n        return function() {\n          var args = arguments,\n              value = args[0];\n\n          if (wrapper && args.length == 1 && isArray(value)) {\n            return wrapper.plant(value).value();\n          }\n          var index = 0,\n              result = length ? funcs[index].apply(this, args) : value;\n\n          while (++index < length) {\n            result = funcs[index].call(this, result);\n          }\n          return result;\n        };\n      });\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with optional `this`\n     * binding of `thisArg`, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided\n     *  to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & WRAP_ARY_FLAG,\n          isBind = bitmask & WRAP_BIND_FLAG,\n          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\n          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\n          isFlip = bitmask & WRAP_FLIP_FLAG,\n          Ctor = isBindKey ? undefined : createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length;\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        if (isCurried) {\n          var placeholder = getHolder(wrapper),\n              holdersCount = countHolders(args, placeholder);\n        }\n        if (partials) {\n          args = composeArgs(args, partials, holders, isCurried);\n        }\n        if (partialsRight) {\n          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n        }\n        length -= holdersCount;\n        if (isCurried && length < arity) {\n          var newHolders = replaceHolders(args, placeholder);\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n            args, newHolders, argPos, ary, arity - length\n          );\n        }\n        var thisBinding = isBind ? thisArg : this,\n            fn = isBindKey ? thisBinding[func] : func;\n\n        length = args.length;\n        if (argPos) {\n          args = reorder(args, argPos);\n        } else if (isFlip && length > 1) {\n          args.reverse();\n        }\n        if (isAry && ary < length) {\n          args.length = ary;\n        }\n        if (this && this !== root && this instanceof wrapper) {\n          fn = Ctor || createCtor(fn);\n        }\n        return fn.apply(thisBinding, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.invertBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} toIteratee The function to resolve iteratees.\n     * @returns {Function} Returns the new inverter function.\n     */\n    function createInverter(setter, toIteratee) {\n      return function(object, iteratee) {\n        return baseInverter(object, setter, toIteratee(iteratee), {});\n      };\n    }\n\n    /**\n     * Creates a function that performs a mathematical operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\n     * @returns {Function} Returns the new mathematical operation function.\n     */\n    function createMathOperation(operator, defaultValue) {\n      return function(value, other) {\n        var result;\n        if (value === undefined && other === undefined) {\n          return defaultValue;\n        }\n        if (value !== undefined) {\n          result = value;\n        }\n        if (other !== undefined) {\n          if (result === undefined) {\n            return other;\n          }\n          if (typeof value == 'string' || typeof other == 'string') {\n            value = baseToString(value);\n            other = baseToString(other);\n          } else {\n            value = baseToNumber(value);\n            other = baseToNumber(other);\n          }\n          result = operator(value, other);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function like `_.over`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over iteratees.\n     * @returns {Function} Returns the new over function.\n     */\n    function createOver(arrayFunc) {\n      return flatRest(function(iteratees) {\n        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n        return baseRest(function(args) {\n          var thisArg = this;\n          return arrayFunc(iteratees, function(iteratee) {\n            return apply(iteratee, thisArg, args);\n          });\n        });\n      });\n    }\n\n    /**\n     * Creates the padding for `string` based on `length`. The `chars` string\n     * is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {number} length The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padding for `string`.\n     */\n    function createPadding(length, chars) {\n      chars = chars === undefined ? ' ' : baseToString(chars);\n\n      var charsLength = chars.length;\n      if (charsLength < 2) {\n        return charsLength ? baseRepeat(chars, length) : chars;\n      }\n      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n      return hasUnicode(chars)\n        ? castSlice(stringToArray(result), 0, length).join('')\n        : result.slice(0, length);\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the `this` binding\n     * of `thisArg` and `partials` prepended to the arguments it receives.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to\n     *  the new function.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createPartial(func, bitmask, thisArg, partials) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var argsIndex = -1,\n            argsLength = arguments.length,\n            leftIndex = -1,\n            leftLength = partials.length,\n            args = Array(leftLength + argsLength),\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n        while (++leftIndex < leftLength) {\n          args[leftIndex] = partials[leftIndex];\n        }\n        while (argsLength--) {\n          args[leftIndex++] = arguments[++argsIndex];\n        }\n        return apply(fn, isBind ? thisArg : this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.range` or `_.rangeRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new range function.\n     */\n    function createRange(fromRight) {\n      return function(start, end, step) {\n        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n          end = step = undefined;\n        }\n        // Ensure the sign of `-0` is preserved.\n        start = toFinite(start);\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toFinite(end);\n        }\n        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n        return baseRange(start, end, step, fromRight);\n      };\n    }\n\n    /**\n     * Creates a function that performs a relational operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @returns {Function} Returns the new relational operation function.\n     */\n    function createRelationalOperation(operator) {\n      return function(value, other) {\n        if (!(typeof value == 'string' && typeof other == 'string')) {\n          value = toNumber(value);\n          other = toNumber(other);\n        }\n        return operator(value, other);\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to continue currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\n     * @param {*} placeholder The placeholder value.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n      var isCurry = bitmask & WRAP_CURRY_FLAG,\n          newHolders = isCurry ? holders : undefined,\n          newHoldersRight = isCurry ? undefined : holders,\n          newPartials = isCurry ? partials : undefined,\n          newPartialsRight = isCurry ? undefined : partials;\n\n      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n      }\n      var newData = [\n        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n        newHoldersRight, argPos, ary, arity\n      ];\n\n      var result = wrapFunc.apply(undefined, newData);\n      if (isLaziable(func)) {\n        setData(result, newData);\n      }\n      result.placeholder = placeholder;\n      return setWrapToString(result, func, bitmask);\n    }\n\n    /**\n     * Creates a function like `_.round`.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */\n    function createRound(methodName) {\n      var func = Math[methodName];\n      return function(number, precision) {\n        number = toNumber(number);\n        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n        if (precision && nativeIsFinite(number)) {\n          // Shift with exponential notation to avoid floating-point issues.\n          // See [MDN](https://mdn.io/round#Examples) for more details.\n          var pair = (toString(number) + 'e').split('e'),\n              value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n          pair = (toString(value) + 'e').split('e');\n          return +(pair[0] + 'e' + (+pair[1] - precision));\n        }\n        return func(number);\n      };\n    }\n\n    /**\n     * Creates a set object of `values`.\n     *\n     * @private\n     * @param {Array} values The values to add to the set.\n     * @returns {Object} Returns the new set.\n     */\n    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n      return new Set(values);\n    };\n\n    /**\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\n     *\n     * @private\n     * @param {Function} keysFunc The function to get the keys of a given object.\n     * @returns {Function} Returns the new pairs function.\n     */\n    function createToPairs(keysFunc) {\n      return function(object) {\n        var tag = getTag(object);\n        if (tag == mapTag) {\n          return mapToArray(object);\n        }\n        if (tag == setTag) {\n          return setToPairs(object);\n        }\n        return baseToPairs(object, keysFunc(object));\n      };\n    }\n\n    /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags.\n     *    1 - `_.bind`\n     *    2 - `_.bindKey`\n     *    4 - `_.curry` or `_.curryRight` of a bound function\n     *    8 - `_.curry`\n     *   16 - `_.curryRight`\n     *   32 - `_.partial`\n     *   64 - `_.partialRight`\n     *  128 - `_.rearg`\n     *  256 - `_.ary`\n     *  512 - `_.flip`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n      if (!isBindKey && typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = partials ? partials.length : 0;\n      if (!length) {\n        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n        partials = holders = undefined;\n      }\n      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n      arity = arity === undefined ? arity : toInteger(arity);\n      length -= holders ? holders.length : 0;\n\n      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n        var partialsRight = partials,\n            holdersRight = holders;\n\n        partials = holders = undefined;\n      }\n      var data = isBindKey ? undefined : getData(func);\n\n      var newData = [\n        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n        argPos, ary, arity\n      ];\n\n      if (data) {\n        mergeData(newData, data);\n      }\n      func = newData[0];\n      bitmask = newData[1];\n      thisArg = newData[2];\n      partials = newData[3];\n      holders = newData[4];\n      arity = newData[9] = newData[9] === undefined\n        ? (isBindKey ? 0 : func.length)\n        : nativeMax(newData[9] - length, 0);\n\n      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n      }\n      if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n        var result = createBind(func, bitmask, thisArg);\n      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n        result = createCurry(func, bitmask, arity);\n      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n        result = createPartial(func, bitmask, thisArg, partials);\n      } else {\n        result = createHybrid.apply(undefined, newData);\n      }\n      var setter = data ? baseSetData : setData;\n      return setWrapToString(setter(result, newData), func, bitmask);\n    }\n\n    /**\n     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties\n     * of source objects to the destination object for all destination properties\n     * that resolve to `undefined`.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to assign.\n     * @param {Object} object The parent object of `objValue`.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsAssignIn(objValue, srcValue, key, object) {\n      if (objValue === undefined ||\n          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        return srcValue;\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n     * objects into destination objects that are passed thru.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to merge.\n     * @param {Object} object The parent object of `objValue`.\n     * @param {Object} source The parent object of `srcValue`.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n      if (isObject(objValue) && isObject(srcValue)) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, objValue);\n        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n        stack['delete'](srcValue);\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n     * objects.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {string} key The key of the property to inspect.\n     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n     */\n    function customOmitClone(value) {\n      return isPlainObject(value) ? undefined : value;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */\n    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          arrLength = array.length,\n          othLength = other.length;\n\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n      }\n      // Check that cyclic values are equal.\n      var arrStacked = stack.get(array);\n      var othStacked = stack.get(other);\n      if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n      }\n      var index = -1,\n          result = true,\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n      stack.set(array, other);\n      stack.set(other, array);\n\n      // Ignore non-index properties.\n      while (++index < arrLength) {\n        var arrValue = array[index],\n            othValue = other[index];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, arrValue, index, other, array, stack)\n            : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n          if (compared) {\n            continue;\n          }\n          result = false;\n          break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n          if (!arraySome(other, function(othValue, othIndex) {\n                if (!cacheHas(seen, othIndex) &&\n                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                  return seen.push(othIndex);\n                }\n              })) {\n            result = false;\n            break;\n          }\n        } else if (!(\n              arrValue === othValue ||\n                equalFunc(arrValue, othValue, bitmask, customizer, stack)\n            )) {\n          result = false;\n          break;\n        }\n      }\n      stack['delete'](array);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n      switch (tag) {\n        case dataViewTag:\n          if ((object.byteLength != other.byteLength) ||\n              (object.byteOffset != other.byteOffset)) {\n            return false;\n          }\n          object = object.buffer;\n          other = other.buffer;\n\n        case arrayBufferTag:\n          if ((object.byteLength != other.byteLength) ||\n              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n            return false;\n          }\n          return true;\n\n        case boolTag:\n        case dateTag:\n        case numberTag:\n          // Coerce booleans to `1` or `0` and dates to milliseconds.\n          // Invalid dates are coerced to `NaN`.\n          return eq(+object, +other);\n\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n\n        case regexpTag:\n        case stringTag:\n          // Coerce regexes to strings and treat strings, primitives and objects,\n          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n          // for more details.\n          return object == (other + '');\n\n        case mapTag:\n          var convert = mapToArray;\n\n        case setTag:\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n          convert || (convert = setToArray);\n\n          if (object.size != other.size && !isPartial) {\n            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n          bitmask |= COMPARE_UNORDERED_FLAG;\n\n          // Recursively compare objects (susceptible to call stack limits).\n          stack.set(object, other);\n          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n          stack['delete'](object);\n          return result;\n\n        case symbolTag:\n          if (symbolValueOf) {\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\n          }\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          objProps = getAllKeys(object),\n          objLength = objProps.length,\n          othProps = getAllKeys(other),\n          othLength = othProps.length;\n\n      if (objLength != othLength && !isPartial) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n          return false;\n        }\n      }\n      // Check that cyclic values are equal.\n      var objStacked = stack.get(object);\n      var othStacked = stack.get(other);\n      if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n      }\n      var result = true;\n      stack.set(object, other);\n      stack.set(other, object);\n\n      var skipCtor = isPartial;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key],\n            othValue = other[key];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, objValue, key, other, object, stack)\n            : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined\n              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n              : compared\n            )) {\n          result = false;\n          break;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n      }\n      if (result && !skipCtor) {\n        var objCtor = object.constructor,\n            othCtor = other.constructor;\n\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor &&\n            ('constructor' in object && 'constructor' in other) &&\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n          result = false;\n        }\n      }\n      stack['delete'](object);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseRest` which flattens the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    function flatRest(func) {\n      return setToString(overRest(func, undefined, flatten), func + '');\n    }\n\n    /**\n     * Creates an array of own enumerable property names and symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeys(object) {\n      return baseGetAllKeys(object, keys, getSymbols);\n    }\n\n    /**\n     * Creates an array of own and inherited enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeysIn(object) {\n      return baseGetAllKeys(object, keysIn, getSymbolsIn);\n    }\n\n    /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */\n    function getFuncName(func) {\n      var result = (func.name + ''),\n          array = realNames[result],\n          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n\n      while (length--) {\n        var data = array[length],\n            otherFunc = data.func;\n        if (otherFunc == null || otherFunc == func) {\n          return data.name;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the argument placeholder value for `func`.\n     *\n     * @private\n     * @param {Function} func The function to inspect.\n     * @returns {*} Returns the placeholder value.\n     */\n    function getHolder(func) {\n      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\n      return object.placeholder;\n    }\n\n    /**\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\n     * If arguments are provided, the chosen function is invoked with them and\n     * its result is returned.\n     *\n     * @private\n     * @param {*} [value] The value to convert to an iteratee.\n     * @param {number} [arity] The arity of the created iteratee.\n     * @returns {Function} Returns the chosen function or its result.\n     */\n    function getIteratee() {\n      var result = lodash.iteratee || iteratee;\n      result = result === iteratee ? baseIteratee : result;\n      return arguments.length ? result(arguments[0], arguments[1]) : result;\n    }\n\n    /**\n     * Gets the data for `map`.\n     *\n     * @private\n     * @param {Object} map The map to query.\n     * @param {string} key The reference key.\n     * @returns {*} Returns the map data.\n     */\n    function getMapData(map, key) {\n      var data = map.__data__;\n      return isKeyable(key)\n        ? data[typeof key == 'string' ? 'string' : 'hash']\n        : data.map;\n    }\n\n    /**\n     * Gets the property names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */\n    function getMatchData(object) {\n      var result = keys(object),\n          length = result.length;\n\n      while (length--) {\n        var key = result[length],\n            value = object[key];\n\n        result[length] = [key, value, isStrictComparable(value)];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */\n    function getNative(object, key) {\n      var value = getValue(object, key);\n      return baseIsNative(value) ? value : undefined;\n    }\n\n    /**\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the raw `toStringTag`.\n     */\n    function getRawTag(value) {\n      var isOwn = hasOwnProperty.call(value, symToStringTag),\n          tag = value[symToStringTag];\n\n      try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n      } catch (e) {}\n\n      var result = nativeObjectToString.call(value);\n      if (unmasked) {\n        if (isOwn) {\n          value[symToStringTag] = tag;\n        } else {\n          delete value[symToStringTag];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of the own enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n      if (object == null) {\n        return [];\n      }\n      object = Object(object);\n      return arrayFilter(nativeGetSymbols(object), function(symbol) {\n        return propertyIsEnumerable.call(object, symbol);\n      });\n    };\n\n    /**\n     * Creates an array of the own and inherited enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n      var result = [];\n      while (object) {\n        arrayPush(result, getSymbols(object));\n        object = getPrototype(object);\n      }\n      return result;\n    };\n\n    /**\n     * Gets the `toStringTag` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    var getTag = baseGetTag;\n\n    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n        (Map && getTag(new Map) != mapTag) ||\n        (Promise && getTag(Promise.resolve()) != promiseTag) ||\n        (Set && getTag(new Set) != setTag) ||\n        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n      getTag = function(value) {\n        var result = baseGetTag(value),\n            Ctor = result == objectTag ? value.constructor : undefined,\n            ctorString = Ctor ? toSource(Ctor) : '';\n\n        if (ctorString) {\n          switch (ctorString) {\n            case dataViewCtorString: return dataViewTag;\n            case mapCtorString: return mapTag;\n            case promiseCtorString: return promiseTag;\n            case setCtorString: return setTag;\n            case weakMapCtorString: return weakMapTag;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */\n    function getView(start, end, transforms) {\n      var index = -1,\n          length = transforms.length;\n\n      while (++index < length) {\n        var data = transforms[index],\n            size = data.size;\n\n        switch (data.type) {\n          case 'drop':      start += size; break;\n          case 'dropRight': end -= size; break;\n          case 'take':      end = nativeMin(end, start + size); break;\n          case 'takeRight': start = nativeMax(start, end - size); break;\n        }\n      }\n      return { 'start': start, 'end': end };\n    }\n\n    /**\n     * Extracts wrapper details from the `source` body comment.\n     *\n     * @private\n     * @param {string} source The source to inspect.\n     * @returns {Array} Returns the wrapper details.\n     */\n    function getWrapDetails(source) {\n      var match = source.match(reWrapDetails);\n      return match ? match[1].split(reSplitDetails) : [];\n    }\n\n    /**\n     * Checks if `path` exists on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @param {Function} hasFunc The function to check properties.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     */\n    function hasPath(object, path, hasFunc) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          result = false;\n\n      while (++index < length) {\n        var key = toKey(path[index]);\n        if (!(result = object != null && hasFunc(object, key))) {\n          break;\n        }\n        object = object[key];\n      }\n      if (result || ++index != length) {\n        return result;\n      }\n      length = object == null ? 0 : object.length;\n      return !!length && isLength(length) && isIndex(key, length) &&\n        (isArray(object) || isArguments(object));\n    }\n\n    /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */\n    function initCloneArray(array) {\n      var length = array.length,\n          result = new array.constructor(length);\n\n      // Add properties assigned by `RegExp#exec`.\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n      }\n      return result;\n    }\n\n    /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneObject(object) {\n      return (typeof object.constructor == 'function' && !isPrototype(object))\n        ? baseCreate(getPrototype(object))\n        : {};\n    }\n\n    /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneByTag(object, tag, isDeep) {\n      var Ctor = object.constructor;\n      switch (tag) {\n        case arrayBufferTag:\n          return cloneArrayBuffer(object);\n\n        case boolTag:\n        case dateTag:\n          return new Ctor(+object);\n\n        case dataViewTag:\n          return cloneDataView(object, isDeep);\n\n        case float32Tag: case float64Tag:\n        case int8Tag: case int16Tag: case int32Tag:\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n          return cloneTypedArray(object, isDeep);\n\n        case mapTag:\n          return new Ctor;\n\n        case numberTag:\n        case stringTag:\n          return new Ctor(object);\n\n        case regexpTag:\n          return cloneRegExp(object);\n\n        case setTag:\n          return new Ctor;\n\n        case symbolTag:\n          return cloneSymbol(object);\n      }\n    }\n\n    /**\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\n     *\n     * @private\n     * @param {string} source The source to modify.\n     * @returns {Array} details The details to insert.\n     * @returns {string} Returns the modified source.\n     */\n    function insertWrapDetails(source, details) {\n      var length = details.length;\n      if (!length) {\n        return source;\n      }\n      var lastIndex = length - 1;\n      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n      details = details.join(length > 2 ? ', ' : ' ');\n      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n    }\n\n    /**\n     * Checks if `value` is a flattenable `arguments` object or array.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n     */\n    function isFlattenable(value) {\n      return isArray(value) || isArguments(value) ||\n        !!(spreadableSymbol && value && value[spreadableSymbol]);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      var type = typeof value;\n      length = length == null ? MAX_SAFE_INTEGER : length;\n\n      return !!length &&\n        (type == 'number' ||\n          (type != 'symbol' && reIsUint.test(value))) &&\n            (value > -1 && value % 1 == 0 && value < length);\n    }\n\n    /**\n     * Checks if the given arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n     *  else `false`.\n     */\n    function isIterateeCall(value, index, object) {\n      if (!isObject(object)) {\n        return false;\n      }\n      var type = typeof index;\n      if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)\n          ) {\n        return eq(object[index], value);\n      }\n      return false;\n    }\n\n    /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */\n    function isKey(value, object) {\n      if (isArray(value)) {\n        return false;\n      }\n      var type = typeof value;\n      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n          value == null || isSymbol(value)) {\n        return true;\n      }\n      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n        (object != null && value in Object(object));\n    }\n\n    /**\n     * Checks if `value` is suitable for use as unique object key.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n     */\n    function isKeyable(value) {\n      var type = typeof value;\n      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n        ? (value !== '__proto__')\n        : (value === null);\n    }\n\n    /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n     *  else `false`.\n     */\n    function isLaziable(func) {\n      var funcName = getFuncName(func),\n          other = lodash[funcName];\n\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n        return false;\n      }\n      if (func === other) {\n        return true;\n      }\n      var data = getData(other);\n      return !!data && func === data[0];\n    }\n\n    /**\n     * Checks if `func` has its source masked.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n     */\n    function isMasked(func) {\n      return !!maskSrcKey && (maskSrcKey in func);\n    }\n\n    /**\n     * Checks if `func` is capable of being masked.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n     */\n    var isMaskable = coreJsData ? isFunction : stubFalse;\n\n    /**\n     * Checks if `value` is likely a prototype object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n     */\n    function isPrototype(value) {\n      var Ctor = value && value.constructor,\n          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n      return value === proto;\n    }\n\n    /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */\n    function isStrictComparable(value) {\n      return value === value && !isObject(value);\n    }\n\n    /**\n     * A specialized version of `matchesProperty` for source values suitable\n     * for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function matchesStrictComparable(key, srcValue) {\n      return function(object) {\n        if (object == null) {\n          return false;\n        }\n        return object[key] === srcValue &&\n          (srcValue !== undefined || (key in Object(object)));\n      };\n    }\n\n    /**\n     * A specialized version of `_.memoize` which clears the memoized function's\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n     *\n     * @private\n     * @param {Function} func The function to have its output memoized.\n     * @returns {Function} Returns the new memoized function.\n     */\n    function memoizeCapped(func) {\n      var result = memoize(func, function(key) {\n        if (cache.size === MAX_MEMOIZE_SIZE) {\n          cache.clear();\n        }\n        return key;\n      });\n\n      var cache = result.cache;\n      return result;\n    }\n\n    /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers used to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and\n     * `_.rearg` modify function arguments, making the order in which they are\n     * executed important, preventing the merging of metadata. However, we make\n     * an exception for a safe combined case where curried functions have `_.ary`\n     * and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */\n    function mergeData(data, source) {\n      var bitmask = data[1],\n          srcBitmask = source[1],\n          newBitmask = bitmask | srcBitmask,\n          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n      var isCombo =\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n      // Exit early if metadata can't be merged.\n      if (!(isCommon || isCombo)) {\n        return data;\n      }\n      // Use source `thisArg` if available.\n      if (srcBitmask & WRAP_BIND_FLAG) {\n        data[2] = source[2];\n        // Set when currying a bound function.\n        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n      }\n      // Compose partial arguments.\n      var value = source[3];\n      if (value) {\n        var partials = data[3];\n        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n      }\n      // Compose partial right arguments.\n      value = source[5];\n      if (value) {\n        partials = data[5];\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n      }\n      // Use source `argPos` if available.\n      value = source[7];\n      if (value) {\n        data[7] = value;\n      }\n      // Use source `ary` if it's smaller.\n      if (srcBitmask & WRAP_ARY_FLAG) {\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n      }\n      // Use source `arity` if one is not provided.\n      if (data[9] == null) {\n        data[9] = source[9];\n      }\n      // Use source `func` and merge bitmasks.\n      data[0] = source[0];\n      data[1] = newBitmask;\n\n      return data;\n    }\n\n    /**\n     * This function is like\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * except that it includes inherited enumerable properties.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function nativeKeysIn(object) {\n      var result = [];\n      if (object != null) {\n        for (var key in Object(object)) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a string using `Object.prototype.toString`.\n     *\n     * @private\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     */\n    function objectToString(value) {\n      return nativeObjectToString.call(value);\n    }\n\n    /**\n     * A specialized version of `baseRest` which transforms the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @param {Function} transform The rest array transform.\n     * @returns {Function} Returns the new function.\n     */\n    function overRest(func, start, transform) {\n      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n      return function() {\n        var args = arguments,\n            index = -1,\n            length = nativeMax(args.length - start, 0),\n            array = Array(length);\n\n        while (++index < length) {\n          array[index] = args[start + index];\n        }\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while (++index < start) {\n          otherArgs[index] = args[index];\n        }\n        otherArgs[start] = transform(array);\n        return apply(func, this, otherArgs);\n      };\n    }\n\n    /**\n     * Gets the parent value at `path` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path to get the parent value of.\n     * @returns {*} Returns the parent value.\n     */\n    function parent(object, path) {\n      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n    }\n\n    /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */\n    function reorder(array, indexes) {\n      var arrLength = array.length,\n          length = nativeMin(indexes.length, arrLength),\n          oldArray = copyArray(array);\n\n      while (length--) {\n        var index = indexes[length];\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n      }\n      return array;\n    }\n\n    /**\n     * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the property to get.\n     * @returns {*} Returns the property value.\n     */\n    function safeGet(object, key) {\n      if (key === 'constructor' && typeof object[key] === 'function') {\n        return;\n      }\n\n      if (key == '__proto__') {\n        return;\n      }\n\n      return object[key];\n    }\n\n    /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity\n     * function to avoid garbage collection pauses in V8. See\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var setData = shortOut(baseSetData);\n\n    /**\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    var setTimeout = ctxSetTimeout || function(func, wait) {\n      return root.setTimeout(func, wait);\n    };\n\n    /**\n     * Sets the `toString` method of `func` to return `string`.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var setToString = shortOut(baseSetToString);\n\n    /**\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n     * with wrapper details in a comment at the top of the source body.\n     *\n     * @private\n     * @param {Function} wrapper The function to modify.\n     * @param {Function} reference The reference function.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Function} Returns `wrapper`.\n     */\n    function setWrapToString(wrapper, reference, bitmask) {\n      var source = (reference + '');\n      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n    }\n\n    /**\n     * Creates a function that'll short out and invoke `identity` instead\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n     * milliseconds.\n     *\n     * @private\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new shortable function.\n     */\n    function shortOut(func) {\n      var count = 0,\n          lastCalled = 0;\n\n      return function() {\n        var stamp = nativeNow(),\n            remaining = HOT_SPAN - (stamp - lastCalled);\n\n        lastCalled = stamp;\n        if (remaining > 0) {\n          if (++count >= HOT_COUNT) {\n            return arguments[0];\n          }\n        } else {\n          count = 0;\n        }\n        return func.apply(undefined, arguments);\n      };\n    }\n\n    /**\n     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @param {number} [size=array.length] The size of `array`.\n     * @returns {Array} Returns `array`.\n     */\n    function shuffleSelf(array, size) {\n      var index = -1,\n          length = array.length,\n          lastIndex = length - 1;\n\n      size = size === undefined ? length : size;\n      while (++index < size) {\n        var rand = baseRandom(index, lastIndex),\n            value = array[rand];\n\n        array[rand] = array[index];\n        array[index] = value;\n      }\n      array.length = size;\n      return array;\n    }\n\n    /**\n     * Converts `string` to a property path array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the property path array.\n     */\n    var stringToPath = memoizeCapped(function(string) {\n      var result = [];\n      if (string.charCodeAt(0) === 46 /* . */) {\n        result.push('');\n      }\n      string.replace(rePropName, function(match, number, quote, subString) {\n        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n      });\n      return result;\n    });\n\n    /**\n     * Converts `value` to a string key if it's not a string or symbol.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {string|symbol} Returns the key.\n     */\n    function toKey(value) {\n      if (typeof value == 'string' || isSymbol(value)) {\n        return value;\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * Converts `func` to its source code.\n     *\n     * @private\n     * @param {Function} func The function to convert.\n     * @returns {string} Returns the source code.\n     */\n    function toSource(func) {\n      if (func != null) {\n        try {\n          return funcToString.call(func);\n        } catch (e) {}\n        try {\n          return (func + '');\n        } catch (e) {}\n      }\n      return '';\n    }\n\n    /**\n     * Updates wrapper `details` based on `bitmask` flags.\n     *\n     * @private\n     * @returns {Array} details The details to modify.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Array} Returns `details`.\n     */\n    function updateWrapDetails(details, bitmask) {\n      arrayEach(wrapFlags, function(pair) {\n        var value = '_.' + pair[0];\n        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n          details.push(value);\n        }\n      });\n      return details.sort();\n    }\n\n    /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */\n    function wrapperClone(wrapper) {\n      if (wrapper instanceof LazyWrapper) {\n        return wrapper.clone();\n      }\n      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n      result.__actions__ = copyArray(wrapper.__actions__);\n      result.__index__  = wrapper.__index__;\n      result.__values__ = wrapper.__values__;\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `array` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the new array of chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */\n    function chunk(array, size, guard) {\n      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n        size = 1;\n      } else {\n        size = nativeMax(toInteger(size), 0);\n      }\n      var length = array == null ? 0 : array.length;\n      if (!length || size < 1) {\n        return [];\n      }\n      var index = 0,\n          resIndex = 0,\n          result = Array(nativeCeil(length / size));\n\n      while (index < length) {\n        result[resIndex++] = baseSlice(array, index, (index += size));\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array == null ? 0 : array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[resIndex++] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a new array concatenating `array` with any additional arrays\n     * and/or values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to concatenate.\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var other = _.concat(array, 2, [3], [[4]]);\n     *\n     * console.log(other);\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */\n    function concat() {\n      var length = arguments.length;\n      if (!length) {\n        return [];\n      }\n      var args = Array(length - 1),\n          array = arguments[0],\n          index = length;\n\n      while (index--) {\n        args[index - 1] = arguments[index];\n      }\n      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\n    }\n\n    /**\n     * Creates an array of `array` values not included in the other given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.without, _.xor\n     * @example\n     *\n     * _.difference([2, 1], [2, 3]);\n     * // => [1]\n     */\n    var difference = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `iteratee` which\n     * is invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var differenceBy = baseRest(function(array, values) {\n      var iteratee = last(values);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `comparator`\n     * which is invoked to compare elements of `array` to `values`. The order and\n     * references of result values are determined by the first array. The comparator\n     * is invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     *\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }]\n     */\n    var differenceWith = baseRest(function(array, values) {\n      var comparator = last(values);\n      if (isArrayLikeObject(comparator)) {\n        comparator = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function drop(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function dropRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.dropRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropRightWhile(users, ['active', false]);\n     * // => objects for ['barney']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropRightWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.dropWhile(users, function(o) { return !o.active; });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropWhile(users, ['active', false]);\n     * // => objects for ['pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true)\n        : [];\n    }\n\n    /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\n     * // => [4, '*', '*', 10]\n     */\n    function fill(array, value, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n        start = 0;\n        end = length;\n      }\n      return baseFill(array, value, start, end);\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n     * // => 0\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findIndex(users, ['active', false]);\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findIndex(users, 'active');\n     * // => 2\n     */\n    function findIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index);\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n     * // => 2\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastIndex(users, ['active', false]);\n     * // => 2\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */\n    function findLastIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length - 1;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = fromIndex < 0\n          ? nativeMax(length + index, 0)\n          : nativeMin(index, length - 1);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n    }\n\n    /**\n     * Flattens `array` a single level deep.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, [3, [4]], 5]\n     */\n    function flatten(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, 1) : [];\n    }\n\n    /**\n     * Recursively flattens `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, 3, 4, 5]\n     */\n    function flattenDeep(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, INFINITY) : [];\n    }\n\n    /**\n     * Recursively flatten `array` up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * var array = [1, [2, [3, [4]], 5]];\n     *\n     * _.flattenDepth(array, 1);\n     * // => [1, 2, [3, [4]], 5]\n     *\n     * _.flattenDepth(array, 2);\n     * // => [1, 2, 3, [4], 5]\n     */\n    function flattenDepth(array, depth) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(array, depth);\n    }\n\n    /**\n     * The inverse of `_.toPairs`; this method returns an object composed\n     * from key-value `pairs`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} pairs The key-value pairs.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.fromPairs([['a', 1], ['b', 2]]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function fromPairs(pairs) {\n      var index = -1,\n          length = pairs == null ? 0 : pairs.length,\n          result = {};\n\n      while (++index < length) {\n        var pair = pairs[index];\n        result[pair[0]] = pair[1];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias first\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.head([1, 2, 3]);\n     * // => 1\n     *\n     * _.head([]);\n     * // => undefined\n     */\n    function head(array) {\n      return (array && array.length) ? array[0] : undefined;\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\n     * offset from the end of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // Search from the `fromIndex`.\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     */\n    function indexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseIndexOf(array, value, index);\n    }\n\n    /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */\n    function initial(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 0, -1) : [];\n    }\n\n    /**\n     * Creates an array of unique values that are included in all given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersection([2, 1], [2, 3]);\n     * // => [2]\n     */\n    var intersection = baseRest(function(arrays) {\n      var mapped = arrayMap(arrays, castArrayLikeObject);\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped)\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `iteratee`\n     * which is invoked for each element of each `arrays` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [2.1]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }]\n     */\n    var intersectionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      if (iteratee === last(mapped)) {\n        iteratee = undefined;\n      } else {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `comparator`\n     * which is invoked to compare elements of `arrays`. The order and references\n     * of result values are determined by the first array. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.intersectionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }]\n     */\n    var intersectionWith = baseRest(function(arrays) {\n      var comparator = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      if (comparator) {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Converts all elements in `array` into a string separated by `separator`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to convert.\n     * @param {string} [separator=','] The element separator.\n     * @returns {string} Returns the joined string.\n     * @example\n     *\n     * _.join(['a', 'b', 'c'], '~');\n     * // => 'a~b~c'\n     */\n    function join(array, separator) {\n      return array == null ? '' : nativeJoin.call(array, separator);\n    }\n\n    /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */\n    function last(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? array[length - 1] : undefined;\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // Search from the `fromIndex`.\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n      }\n      return value === value\n        ? strictLastIndexOf(array, value, index)\n        : baseFindIndex(array, baseIsNaN, index, true);\n    }\n\n    /**\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n     * element from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.11.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=0] The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     *\n     * _.nth(array, 1);\n     * // => 'b'\n     *\n     * _.nth(array, -2);\n     * // => 'c';\n     */\n    function nth(array, n) {\n      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n    }\n\n    /**\n     * Removes all given values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n     * to remove elements from an array by predicate.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pull(array, 'a', 'c');\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    var pull = baseRest(pullAll);\n\n    /**\n     * This method is like `_.pull` except that it accepts an array of values to remove.\n     *\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pullAll(array, ['a', 'c']);\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    function pullAll(array, values) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values)\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n     * invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n     *\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n     * console.log(array);\n     * // => [{ 'x': 2 }]\n     */\n    function pullAllBy(array, values, iteratee) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, getIteratee(iteratee, 2))\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `comparator` which\n     * is invoked to compare elements of `array` to `values`. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n     *\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n     * console.log(array);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n     */\n    function pullAllWith(array, values, comparator) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, undefined, comparator)\n        : array;\n    }\n\n    /**\n     * Removes elements from `array` corresponding to `indexes` and returns an\n     * array of removed elements.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     * var pulled = _.pullAt(array, [1, 3]);\n     *\n     * console.log(array);\n     * // => ['a', 'c']\n     *\n     * console.log(pulled);\n     * // => ['b', 'd']\n     */\n    var pullAt = flatRest(function(array, indexes) {\n      var length = array == null ? 0 : array.length,\n          result = baseAt(array, indexes);\n\n      basePullAt(array, arrayMap(indexes, function(index) {\n        return isIndex(index, length) ? +index : index;\n      }).sort(compareAscending));\n\n      return result;\n    });\n\n    /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is invoked\n     * with three arguments: (value, index, array).\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n     * to pull elements from an array by value.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */\n    function remove(array, predicate) {\n      var result = [];\n      if (!(array && array.length)) {\n        return result;\n      }\n      var index = -1,\n          indexes = [],\n          length = array.length;\n\n      predicate = getIteratee(predicate, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result.push(value);\n          indexes.push(index);\n        }\n      }\n      basePullAt(array, indexes);\n      return result;\n    }\n\n    /**\n     * Reverses `array` so that the first element becomes the last, the second\n     * element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates `array` and is based on\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.reverse(array);\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function reverse(array) {\n      return array == null ? array : nativeReverse.call(array);\n    }\n\n    /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n     * returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function slice(array, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n        start = 0;\n        end = length;\n      }\n      else {\n        start = start == null ? 0 : toInteger(start);\n        end = end === undefined ? length : toInteger(end);\n      }\n      return baseSlice(array, start, end);\n    }\n\n    /**\n     * Uses a binary search to determine the lowest index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     */\n    function sortedIndex(array, value) {\n      return baseSortedIndex(array, value);\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 0\n     */\n    function sortedIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 1\n     */\n    function sortedIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value);\n        if (index < length && eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n     * // => 4\n     */\n    function sortedLastIndex(array, value) {\n      return baseSortedIndex(array, value, true);\n    }\n\n    /**\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 1\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 1\n     */\n    function sortedLastIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n    }\n\n    /**\n     * This method is like `_.lastIndexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 3\n     */\n    function sortedLastIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value, true) - 1;\n        if (eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.uniq` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniq([1, 1, 2]);\n     * // => [1, 2]\n     */\n    function sortedUniq(array) {\n      return (array && array.length)\n        ? baseSortedUniq(array)\n        : [];\n    }\n\n    /**\n     * This method is like `_.uniqBy` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n     * // => [1.1, 2.3]\n     */\n    function sortedUniqBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSortedUniq(array, getIteratee(iteratee, 2))\n        : [];\n    }\n\n    /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.tail([1, 2, 3]);\n     * // => [2, 3]\n     */\n    function tail(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 1, length) : [];\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */\n    function take(array, n, guard) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */\n    function takeRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.takeRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeRightWhile(users, ['active', false]);\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeRightWhile(users, 'active');\n     * // => []\n     */\n    function takeRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), false, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.takeWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeWhile(users, ['active', false]);\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeWhile(users, 'active');\n     * // => []\n     */\n    function takeWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3))\n        : [];\n    }\n\n    /**\n     * Creates an array of unique values, in order, from all given arrays using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([2], [1, 2]);\n     * // => [2, 1]\n     */\n    var union = baseRest(function(arrays) {\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which uniqueness is computed. Result values are chosen from the first\n     * array in which the value occurs. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    var unionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `comparator` which\n     * is invoked to compare elements of `arrays`. Result values are chosen from\n     * the first array in which the value occurs. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.unionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var unionWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n    });\n\n    /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurrence of each element\n     * is kept. The order of result values is determined by the order they occur\n     * in the array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     */\n    function uniq(array) {\n      return (array && array.length) ? baseUniq(array) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * uniqueness is computed. The order of result values is determined by the\n     * order they occur in the array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniqBy(array, iteratee) {\n      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `comparator` which\n     * is invoked to compare elements of `array`. The order of result values is\n     * determined by the order they occur in the array.The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.uniqWith(objects, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n     */\n    function uniqWith(array, comparator) {\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.2.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['a', 'b'], [1, 2], [true, false]]\n     */\n    function unzip(array) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var length = 0;\n      array = arrayFilter(array, function(group) {\n        if (isArrayLikeObject(group)) {\n          length = nativeMax(group.length, length);\n          return true;\n        }\n      });\n      return baseTimes(length, function(index) {\n        return arrayMap(array, baseProperty(index));\n      });\n    }\n\n    /**\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n     * how regrouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  regrouped values.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */\n    function unzipWith(array, iteratee) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var result = unzip(array);\n      if (iteratee == null) {\n        return result;\n      }\n      return arrayMap(result, function(group) {\n        return apply(iteratee, undefined, group);\n      });\n    }\n\n    /**\n     * Creates an array excluding all given values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.pull`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.xor\n     * @example\n     *\n     * _.without([2, 1, 2, 3], 1, 2);\n     * // => [3]\n     */\n    var without = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, values)\n        : [];\n    });\n\n    /**\n     * Creates an array of unique values that is the\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the given arrays. The order of result values is determined by the order\n     * they occur in the arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.without\n     * @example\n     *\n     * _.xor([2, 1], [2, 3]);\n     * // => [1, 3]\n     */\n    var xor = baseRest(function(arrays) {\n      return baseXor(arrayFilter(arrays, isArrayLikeObject));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which by which they're compared. The order of result values is determined\n     * by the order they occur in the arrays. The iteratee is invoked with one\n     * argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2, 3.4]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var xorBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `comparator` which is\n     * invoked to compare elements of `arrays`. The order of result values is\n     * determined by the order they occur in the arrays. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.xorWith(objects, others, _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var xorWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n    });\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the\n     * first elements of the given arrays, the second of which contains the\n     * second elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     */\n    var zip = baseRest(unzip);\n\n    /**\n     * This method is like `_.fromPairs` except that it accepts two arrays,\n     * one of property identifiers and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.4.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject(['a', 'b'], [1, 2]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function zipObject(props, values) {\n      return baseZipObject(props || [], values || [], assignValue);\n    }\n\n    /**\n     * This method is like `_.zipObject` except that it supports property paths.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n     */\n    function zipObjectDeep(props, values) {\n      return baseZipObject(props || [], values || [], baseSet);\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\n     * how grouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  grouped values.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n     *   return a + b + c;\n     * });\n     * // => [111, 222]\n     */\n    var zipWith = baseRest(function(arrays) {\n      var length = arrays.length,\n          iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n      return unzipWith(arrays, iteratee);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n     * chain sequences enabled. The result of such sequences must be unwrapped\n     * with `_#value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Seq\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _\n     *   .chain(users)\n     *   .sortBy('age')\n     *   .map(function(o) {\n     *     return o.user + ' is ' + o.age;\n     *   })\n     *   .head()\n     *   .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      var result = lodash(value);\n      result.__chain__ = true;\n      return result;\n    }\n\n    /**\n     * This method invokes `interceptor` and returns `value`. The interceptor\n     * is invoked with one argument; (value). The purpose of this method is to\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    // Mutate input array.\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\n     * results in a method chain sequence.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */\n    function thru(value, interceptor) {\n      return interceptor(value);\n    }\n\n    /**\n     * This method is the wrapper version of `_.at`.\n     *\n     * @name at\n     * @memberOf _\n     * @since 1.0.0\n     * @category Seq\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\n     * // => [3, 4]\n     */\n    var wrapperAt = flatRest(function(paths) {\n      var length = paths.length,\n          start = length ? paths[0] : 0,\n          value = this.__wrapped__,\n          interceptor = function(object) { return baseAt(object, paths); };\n\n      if (length > 1 || this.__actions__.length ||\n          !(value instanceof LazyWrapper) || !isIndex(start)) {\n        return this.thru(interceptor);\n      }\n      value = value.slice(start, +start + (length ? 1 : 0));\n      value.__actions__.push({\n        'func': thru,\n        'args': [interceptor],\n        'thisArg': undefined\n      });\n      return new LodashWrapper(value, this.__chain__).thru(function(array) {\n        if (length && !array.length) {\n          array.push(undefined);\n        }\n        return array;\n      });\n    });\n\n    /**\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n     *\n     * @name chain\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // A sequence without explicit chaining.\n     * _(users).head();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // A sequence with explicit chaining.\n     * _(users)\n     *   .chain()\n     *   .head()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */\n    function wrapperChain() {\n      return chain(this);\n    }\n\n    /**\n     * Executes the chain sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */\n    function wrapperCommit() {\n      return new LodashWrapper(this.value(), this.__chain__);\n    }\n\n    /**\n     * Gets the next value on a wrapped object following the\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n     *\n     * @name next\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the next iterator value.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 1 }\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 2 }\n     *\n     * wrapped.next();\n     * // => { 'done': true, 'value': undefined }\n     */\n    function wrapperNext() {\n      if (this.__values__ === undefined) {\n        this.__values__ = toArray(this.value());\n      }\n      var done = this.__index__ >= this.__values__.length,\n          value = done ? undefined : this.__values__[this.__index__++];\n\n      return { 'done': done, 'value': value };\n    }\n\n    /**\n     * Enables the wrapper to be iterable.\n     *\n     * @name Symbol.iterator\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped[Symbol.iterator]() === wrapped;\n     * // => true\n     *\n     * Array.from(wrapped);\n     * // => [1, 2]\n     */\n    function wrapperToIterator() {\n      return this;\n    }\n\n    /**\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @param {*} value The value to plant.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2]).map(square);\n     * var other = wrapped.plant([3, 4]);\n     *\n     * other.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */\n    function wrapperPlant(value) {\n      var result,\n          parent = this;\n\n      while (parent instanceof baseLodash) {\n        var clone = wrapperClone(parent);\n        clone.__index__ = 0;\n        clone.__values__ = undefined;\n        if (result) {\n          previous.__wrapped__ = clone;\n        } else {\n          result = clone;\n        }\n        var previous = clone;\n        parent = parent.__wrapped__;\n      }\n      previous.__wrapped__ = value;\n      return result;\n    }\n\n    /**\n     * This method is the wrapper version of `_.reverse`.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function wrapperReverse() {\n      var value = this.__wrapped__;\n      if (value instanceof LazyWrapper) {\n        var wrapped = value;\n        if (this.__actions__.length) {\n          wrapped = new LazyWrapper(this);\n        }\n        wrapped = wrapped.reverse();\n        wrapped.__actions__.push({\n          'func': thru,\n          'args': [reverse],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(wrapped, this.__chain__);\n      }\n      return this.thru(reverse);\n    }\n\n    /**\n     * Executes the chain sequence to resolve the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @since 0.1.0\n     * @alias toJSON, valueOf\n     * @category Seq\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */\n    function wrapperValue() {\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the number of times the key was returned by `iteratee`. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': 1, '6': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        ++result[key];\n      } else {\n        baseAssignValue(result, key, 1);\n      }\n    });\n\n    /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * **Note:** This method returns `true` for\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n     * elements of empty collections.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.every(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.every(users, 'active');\n     * // => false\n     */\n    function every(collection, predicate, guard) {\n      var func = isArray(collection) ? arrayEvery : baseEvery;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * **Note:** Unlike `_.remove`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.reject\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, { 'age': 36, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.filter(users, 'active');\n     * // => objects for ['barney']\n     *\n     * // Combining several predicates using `_.overEvery` or `_.overSome`.\n     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n     * // => objects for ['fred', 'barney']\n     */\n    function filter(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.find(users, function(o) { return o.age < 40; });\n     * // => object for 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.find(users, { 'age': 1, 'active': true });\n     * // => object for 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.find(users, ['active', false]);\n     * // => object for 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */\n    var findLast = createFind(findLastIndex);\n\n    /**\n     * Creates a flattened array of values by running each element in `collection`\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [n, n];\n     * }\n     *\n     * _.flatMap([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMap(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), 1);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDeep([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMapDeep(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), INFINITY);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDepth([1, 2], duplicate, 2);\n     * // => [[1, 1], [2, 2]]\n     */\n    function flatMapDepth(collection, iteratee, depth) {\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(map(collection, iteratee), depth);\n    }\n\n    /**\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n     * or `_.forOwn` for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias each\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEachRight\n     * @example\n     *\n     * _.forEach([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `1` then `2`.\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forEach(collection, iteratee) {\n      var func = isArray(collection) ? arrayEach : baseEach;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEach\n     * @example\n     *\n     * _.forEachRight([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `2` then `1`.\n     */\n    function forEachRight(collection, iteratee) {\n      var func = isArray(collection) ? arrayEachRight : baseEachRight;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The order of grouped values\n     * is determined by the order they occur in `collection`. The corresponding\n     * value of each key is an array of elements responsible for generating the\n     * key. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        baseAssignValue(result, key, [value]);\n      }\n    });\n\n    /**\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\n     * checked for a substring of `value`, otherwise\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n     * the offset from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\n     * // => true\n     *\n     * _.includes('abcd', 'bc');\n     * // => true\n     */\n    function includes(collection, value, fromIndex, guard) {\n      collection = isArrayLike(collection) ? collection : values(collection);\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n      var length = collection.length;\n      if (fromIndex < 0) {\n        fromIndex = nativeMax(length + fromIndex, 0);\n      }\n      return isString(collection)\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n    }\n\n    /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `path` is a function, it's invoked\n     * for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke each method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invokeMap([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    var invokeMap = baseRest(function(collection, path, args) {\n      var index = -1,\n          isFunc = typeof path == 'function',\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value) {\n        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n      });\n      return result;\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the last element responsible for generating the key. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var array = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.keyBy(array, function(o) {\n     *   return String.fromCharCode(o.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.keyBy(array, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     */\n    var keyBy = createAggregator(function(result, value, key) {\n      baseAssignValue(result, key, value);\n    });\n\n    /**\n     * Creates an array of values by running each element in `collection` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * _.map([4, 8], square);\n     * // => [16, 64]\n     *\n     * _.map({ 'a': 4, 'b': 8 }, square);\n     * // => [16, 64] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, iteratee) {\n      var func = isArray(collection) ? arrayMap : baseMap;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.sortBy` except that it allows specifying the sort\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n     * descending or \"asc\" for ascending sort order of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @param {string[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // Sort by `user` in ascending order and by `age` in descending order.\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */\n    function orderBy(collection, iteratees, orders, guard) {\n      if (collection == null) {\n        return [];\n      }\n      if (!isArray(iteratees)) {\n        iteratees = iteratees == null ? [] : [iteratees];\n      }\n      orders = guard ? undefined : orders;\n      if (!isArray(orders)) {\n        orders = orders == null ? [] : [orders];\n      }\n      return baseOrderBy(collection, iteratees, orders);\n    }\n\n    /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, the second of which\n     * contains elements `predicate` returns falsey for. The predicate is\n     * invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * _.partition(users, function(o) { return o.active; });\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.partition(users, { 'age': 1, 'active': false });\n     * // => objects for [['pebbles'], ['barney', 'fred']]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.partition(users, ['active', false]);\n     * // => objects for [['barney', 'pebbles'], ['fred']]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.partition(users, 'active');\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     */\n    var partition = createAggregator(function(result, value, key) {\n      result[key ? 0 : 1].push(value);\n    }, function() { return [[], []]; });\n\n    /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` thru `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not given, the first element of `collection` is used as the initial\n     * value. The iteratee is invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n     * and `sortBy`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduceRight\n     * @example\n     *\n     * _.reduce([1, 2], function(sum, n) {\n     *   return sum + n;\n     * }, 0);\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     *   return result;\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n     */\n    function reduce(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduce : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduce\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduceRight : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n    }\n\n    /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.filter\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * _.reject(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.reject(users, { 'age': 40, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.reject(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.reject(users, 'active');\n     * // => objects for ['barney']\n     */\n    function reject(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, negate(getIteratee(predicate, 3)));\n    }\n\n    /**\n     * Gets a random element from `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     */\n    function sample(collection) {\n      var func = isArray(collection) ? arraySample : baseSample;\n      return func(collection);\n    }\n\n    /**\n     * Gets `n` random elements at unique keys from `collection` up to the\n     * size of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} [n=1] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the random elements.\n     * @example\n     *\n     * _.sampleSize([1, 2, 3], 2);\n     * // => [3, 1]\n     *\n     * _.sampleSize([1, 2, 3], 4);\n     * // => [2, 3, 1]\n     */\n    function sampleSize(collection, n, guard) {\n      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n      return func(collection, n);\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */\n    function shuffle(collection) {\n      var func = isArray(collection) ? arrayShuffle : baseShuffle;\n      return func(collection);\n    }\n\n    /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable string keyed properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the collection size.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      if (collection == null) {\n        return 0;\n      }\n      if (isArrayLike(collection)) {\n        return isString(collection) ? stringSize(collection) : collection.length;\n      }\n      var tag = getTag(collection);\n      if (tag == mapTag || tag == setTag) {\n        return collection.size;\n      }\n      return baseKeys(collection).length;\n    }\n\n    /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.some(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.some(users, 'active');\n     * // => true\n     */\n    function some(collection, predicate, guard) {\n      var func = isArray(collection) ? arraySome : baseSome;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection thru each iteratee. This method\n     * performs a stable sort, that is, it preserves the original sort order of\n     * equal elements. The iteratees are invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 30 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.sortBy(users, [function(o) { return o.user; }]);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n     *\n     * _.sortBy(users, ['user', 'age']);\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n     */\n    var sortBy = baseRest(function(collection, iteratees) {\n      if (collection == null) {\n        return [];\n      }\n      var length = iteratees.length;\n      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n        iteratees = [];\n      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n        iteratees = [iteratees[0]];\n      }\n      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Gets the timestamp of the number of milliseconds that have elapsed since\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Date\n     * @returns {number} Returns the timestamp.\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => Logs the number of milliseconds it took for the deferred invocation.\n     */\n    var now = ctxNow || function() {\n      return root.Date.now();\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it's called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => Logs 'done saving!' after the two async saves have completed.\n     */\n    function after(n, func) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func`, with up to `n` arguments,\n     * ignoring any additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */\n    function ary(func, n, guard) {\n      n = guard ? undefined : n;\n      n = (func && n == null) ? func.length : n;\n      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);\n    }\n\n    /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it's called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery(element).on('click', _.before(5, addContactToList));\n     * // => Allows adding up to 4 contacts to the list.\n     */\n    function before(n, func) {\n      var result;\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n > 0) {\n          result = func.apply(this, arguments);\n        }\n        if (n <= 1) {\n          func = undefined;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and `partials` prepended to the arguments it receives.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * function greet(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * }\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */\n    var bind = baseRest(function(func, thisArg, partials) {\n      var bitmask = WRAP_BIND_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bind));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(func, bitmask, thisArg, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes the method at `object[key]` with `partials`\n     * prepended to the arguments it receives.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist. See\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Function\n     * @param {Object} object The object to invoke the method on.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */\n    var bindKey = baseRest(function(object, key, partials) {\n      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bindKey));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(key, bitmask, object, partials, holders);\n    });\n\n    /**\n     * Creates a function that accepts arguments of `func` and either invokes\n     * `func` returning its result, if at least `arity` number of arguments have\n     * been provided, or returns a function that accepts the remaining `func`\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\n     * is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */\n    function curry(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curry.placeholder;\n      return result;\n    }\n\n    /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */\n    function curryRight(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curryRight.placeholder;\n      return result;\n    }\n\n    /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\n     * Provide `options` to indicate whether `func` should be invoked on the\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n     * with the last arguments provided to the debounced function. Subsequent\n     * calls to the debounced function return the result of the last `func`\n     * invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the debounced function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=false]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {number} [options.maxWait]\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // Avoid costly calculations while the window size is in flux.\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', debounced);\n     *\n     * // Cancel the trailing debounced invocation.\n     * jQuery(window).on('popstate', debounced.cancel);\n     */\n    function debounce(func, wait, options) {\n      var lastArgs,\n          lastThis,\n          maxWait,\n          result,\n          timerId,\n          lastCallTime,\n          lastInvokeTime = 0,\n          leading = false,\n          maxing = false,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = toNumber(wait) || 0;\n      if (isObject(options)) {\n        leading = !!options.leading;\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n\n      function invokeFunc(time) {\n        var args = lastArgs,\n            thisArg = lastThis;\n\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n      }\n\n      function leadingEdge(time) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime = time;\n        // Start the timer for the trailing edge.\n        timerId = setTimeout(timerExpired, wait);\n        // Invoke the leading edge.\n        return leading ? invokeFunc(time) : result;\n      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n        return maxing\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n          : timeWaiting;\n      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n        // Restart the timer.\n        timerId = setTimeout(timerExpired, remainingWait(time));\n      }\n\n      function trailingEdge(time) {\n        timerId = undefined;\n\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs) {\n          return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n      }\n\n      function cancel() {\n        if (timerId !== undefined) {\n          clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n      }\n\n      function flush() {\n        return timerId === undefined ? result : trailingEdge(now());\n      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n        lastThis = this;\n        lastCallTime = time;\n\n        if (isInvoking) {\n          if (timerId === undefined) {\n            return leadingEdge(lastCallTime);\n          }\n          if (maxing) {\n            // Handle invocations in a tight loop.\n            clearTimeout(timerId);\n            timerId = setTimeout(timerExpired, wait);\n            return invokeFunc(lastCallTime);\n          }\n        }\n        if (timerId === undefined) {\n          timerId = setTimeout(timerExpired, wait);\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      debounced.flush = flush;\n      return debounced;\n    }\n\n    /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // => Logs 'deferred' after one millisecond.\n     */\n    var defer = baseRest(function(func, args) {\n      return baseDelay(func, 1, args);\n    });\n\n    /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => Logs 'later' after one second.\n     */\n    var delay = baseRest(function(func, wait, args) {\n      return baseDelay(func, toNumber(wait) || 0, args);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments reversed.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to flip arguments for.\n     * @returns {Function} Returns the new flipped function.\n     * @example\n     *\n     * var flipped = _.flip(function() {\n     *   return _.toArray(arguments);\n     * });\n     *\n     * flipped('a', 'b', 'c', 'd');\n     * // => ['d', 'c', 'b', 'a']\n     */\n    function flip(func) {\n      return createWrap(func, WRAP_FLIP_FLAG);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided, it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is used as the map cache key. The `func`\n     * is invoked with the `this` binding of the memoized function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoized function.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     * var other = { 'c': 3, 'd': 4 };\n     *\n     * var values = _.memoize(_.values);\n     * values(object);\n     * // => [1, 2]\n     *\n     * values(other);\n     * // => [3, 4]\n     *\n     * object.a = 2;\n     * values(object);\n     * // => [1, 2]\n     *\n     * // Modify the result cache.\n     * values.cache.set(object, ['a', 'b']);\n     * values(object);\n     * // => ['a', 'b']\n     *\n     * // Replace `_.memoize.Cache`.\n     * _.memoize.Cache = WeakMap;\n     */\n    function memoize(func, resolver) {\n      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var memoized = function() {\n        var args = arguments,\n            key = resolver ? resolver.apply(this, args) : args[0],\n            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n        return result;\n      };\n      memoized.cache = new (memoize.Cache || MapCache);\n      return memoized;\n    }\n\n    // Expose `MapCache`.\n    memoize.Cache = MapCache;\n\n    /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new negated function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */\n    function negate(predicate) {\n      if (typeof predicate != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function() {\n        var args = arguments;\n        switch (args.length) {\n          case 0: return !predicate.call(this);\n          case 1: return !predicate.call(this, args[0]);\n          case 2: return !predicate.call(this, args[0], args[1]);\n          case 3: return !predicate.call(this, args[0], args[1], args[2]);\n        }\n        return !predicate.apply(this, args);\n      };\n    }\n\n    /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first invocation. The `func` is\n     * invoked with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // => `createApplication` is invoked once\n     */\n    function once(func) {\n      return before(2, func);\n    }\n\n    /**\n     * Creates a function that invokes `func` with its arguments transformed.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\n     *  The argument transforms.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var func = _.overArgs(function(x, y) {\n     *   return [x, y];\n     * }, [square, doubled]);\n     *\n     * func(9, 3);\n     * // => [81, 6]\n     *\n     * func(10, 5);\n     * // => [100, 10]\n     */\n    var overArgs = castRest(function(func, transforms) {\n      transforms = (transforms.length == 1 && isArray(transforms[0]))\n        ? arrayMap(transforms[0], baseUnary(getIteratee()))\n        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n\n      var funcsLength = transforms.length;\n      return baseRest(function(args) {\n        var index = -1,\n            length = nativeMin(args.length, funcsLength);\n\n        while (++index < length) {\n          args[index] = transforms[index].call(this, args[index]);\n        }\n        return apply(func, this, args);\n      });\n    });\n\n    /**\n     * Creates a function that invokes `func` with `partials` prepended to the\n     * arguments it receives. This method is like `_.bind` except it does **not**\n     * alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.2.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // Partially applied with placeholders.\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */\n    var partial = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partial));\n      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to the arguments it receives.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // Partially applied with placeholders.\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */\n    var partialRight = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partialRight));\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified `indexes` where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, [2, 0, 1]);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     */\n    var rearg = flatRest(function(func, indexes) {\n      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as\n     * an array.\n     *\n     * **Note:** This method is based on the\n     * [rest parameter](https://mdn.io/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.rest(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */\n    function rest(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? start : toInteger(start);\n      return baseRest(func, start);\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * create function and an array of arguments much like\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n     *\n     * **Note:** This method is based on the\n     * [spread operator](https://mdn.io/spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @param {number} [start=0] The start position of the spread.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */\n    function spread(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start == null ? 0 : nativeMax(toInteger(start), 0);\n      return baseRest(function(args) {\n        var array = args[start],\n            otherArgs = castSlice(args, 0, start);\n\n        if (array) {\n          arrayPush(otherArgs, array);\n        }\n        return apply(func, this, otherArgs);\n      });\n    }\n\n    /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed `func` invocations and a `flush` method to\n     * immediately invoke them. Provide `options` to indicate whether `func`\n     * should be invoked on the leading and/or trailing edge of the `wait`\n     * timeout. The `func` is invoked with the last arguments provided to the\n     * throttled function. Subsequent calls to the throttled function return the\n     * result of the last `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the throttled function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=true]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // Avoid excessively updating the position while scrolling.\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n     * jQuery(element).on('click', throttled);\n     *\n     * // Cancel the trailing throttled invocation.\n     * jQuery(window).on('popstate', throttled.cancel);\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (isObject(options)) {\n        leading = 'leading' in options ? !!options.leading : leading;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, {\n        'leading': leading,\n        'maxWait': wait,\n        'trailing': trailing\n      });\n    }\n\n    /**\n     * Creates a function that accepts up to one argument, ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.unary(parseInt));\n     * // => [6, 8, 10]\n     */\n    function unary(func) {\n      return ary(func, 1);\n    }\n\n    /**\n     * Creates a function that provides `value` to `wrapper` as its first\n     * argument. Any additional arguments provided to the function are appended\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n     * binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} [wrapper=identity] The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      return partial(castFunction(wrapper), value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Casts `value` as an array if it's not one.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Lang\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast array.\n     * @example\n     *\n     * _.castArray(1);\n     * // => [1]\n     *\n     * _.castArray({ 'a': 1 });\n     * // => [{ 'a': 1 }]\n     *\n     * _.castArray('abc');\n     * // => ['abc']\n     *\n     * _.castArray(null);\n     * // => [null]\n     *\n     * _.castArray(undefined);\n     * // => [undefined]\n     *\n     * _.castArray();\n     * // => []\n     *\n     * var array = [1, 2, 3];\n     * console.log(_.castArray(array) === array);\n     * // => true\n     */\n    function castArray() {\n      if (!arguments.length) {\n        return [];\n      }\n      var value = arguments[0];\n      return isArray(value) ? value : [value];\n    }\n\n    /**\n     * Creates a shallow clone of `value`.\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n     * arrays. The own enumerable properties of `arguments` objects are cloned\n     * as plain objects. An empty object is returned for uncloneable values such\n     * as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeep\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var shallow = _.clone(objects);\n     * console.log(shallow[0] === objects[0]);\n     * // => true\n     */\n    function clone(value) {\n      return baseClone(value, CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.clone` except that it accepts `customizer` which\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n     * cloning is handled by the method instead. The `customizer` is invoked with\n     * up to four arguments; (value [, index|key, object, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeepWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * }\n     *\n     * var el = _.cloneWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 0\n     */\n    function cloneWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * This method is like `_.clone` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.clone\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var deep = _.cloneDeep(objects);\n     * console.log(deep[0] === objects[0]);\n     * // => false\n     */\n    function cloneDeep(value) {\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.cloneWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * }\n     *\n     * var el = _.cloneDeepWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 20\n     */\n    function cloneDeepWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * Checks if `object` conforms to `source` by invoking the predicate\n     * properties of `source` with the corresponding property values of `object`.\n     *\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\n     * partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n     * // => true\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n     * // => false\n     */\n    function conformsTo(object, source) {\n      return source == null || baseConformsTo(object, source, keys(source));\n    }\n\n    /**\n     * Performs a\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * comparison between two values to determine if they are equivalent.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.eq(object, object);\n     * // => true\n     *\n     * _.eq(object, other);\n     * // => false\n     *\n     * _.eq('a', 'a');\n     * // => true\n     *\n     * _.eq('a', Object('a'));\n     * // => false\n     *\n     * _.eq(NaN, NaN);\n     * // => true\n     */\n    function eq(value, other) {\n      return value === other || (value !== value && other !== other);\n    }\n\n    /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     * @see _.lt\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */\n    var gt = createRelationalOperation(baseGt);\n\n    /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n     *  `other`, else `false`.\n     * @see _.lte\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */\n    var gte = createRelationalOperation(function(value, other) {\n      return value >= other;\n    });\n\n    /**\n     * Checks if `value` is likely an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n        !propertyIsEnumerable.call(value, 'callee');\n    };\n\n    /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(document.body.children);\n     * // => false\n     *\n     * _.isArray('abc');\n     * // => false\n     *\n     * _.isArray(_.noop);\n     * // => false\n     */\n    var isArray = Array.isArray;\n\n    /**\n     * Checks if `value` is classified as an `ArrayBuffer` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     * @example\n     *\n     * _.isArrayBuffer(new ArrayBuffer(2));\n     * // => true\n     *\n     * _.isArrayBuffer(new Array(2));\n     * // => false\n     */\n    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n\n    /**\n     * Checks if `value` is array-like. A value is considered array-like if it's\n     * not a function and has a `value.length` that's an integer greater than or\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     * @example\n     *\n     * _.isArrayLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLike(document.body.children);\n     * // => true\n     *\n     * _.isArrayLike('abc');\n     * // => true\n     *\n     * _.isArrayLike(_.noop);\n     * // => false\n     */\n    function isArrayLike(value) {\n      return value != null && isLength(value.length) && !isFunction(value);\n    }\n\n    /**\n     * This method is like `_.isArrayLike` except that it also checks if `value`\n     * is an object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArrayLikeObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLikeObject(document.body.children);\n     * // => true\n     *\n     * _.isArrayLikeObject('abc');\n     * // => false\n     *\n     * _.isArrayLikeObject(_.noop);\n     * // => false\n     */\n    function isArrayLikeObject(value) {\n      return isObjectLike(value) && isArrayLike(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        (isObjectLike(value) && baseGetTag(value) == boolTag);\n    }\n\n    /**\n     * Checks if `value` is a buffer.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n     * @example\n     *\n     * _.isBuffer(new Buffer(2));\n     * // => true\n     *\n     * _.isBuffer(new Uint8Array(2));\n     * // => false\n     */\n    var isBuffer = nativeIsBuffer || stubFalse;\n\n    /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */\n    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\n    /**\n     * Checks if `value` is likely a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */\n    function isElement(value) {\n      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n    }\n\n    /**\n     * Checks if `value` is an empty object, collection, map, or set.\n     *\n     * Objects are considered empty if they have no own enumerable string keyed\n     * properties.\n     *\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */\n    function isEmpty(value) {\n      if (value == null) {\n        return true;\n      }\n      if (isArrayLike(value) &&\n          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n            isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n        return !value.length;\n      }\n      var tag = getTag(value);\n      if (tag == mapTag || tag == setTag) {\n        return !value.size;\n      }\n      if (isPrototype(value)) {\n        return !baseKeys(value).length;\n      }\n      for (var key in value) {\n        if (hasOwnProperty.call(value, key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent.\n     *\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n     * by their own, not inherited, enumerable properties. Functions and DOM\n     * nodes are compared by strict equality, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * object === other;\n     * // => false\n     */\n    function isEqual(value, other) {\n      return baseIsEqual(value, other);\n    }\n\n    /**\n     * This method is like `_.isEqual` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with up to\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, othValue) {\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqualWith(array, other, customizer);\n     * // => true\n     */\n    function isEqualWith(value, other, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      var result = customizer ? customizer(value, other) : undefined;\n      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n    }\n\n    /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */\n    function isError(value) {\n      if (!isObjectLike(value)) {\n        return false;\n      }\n      var tag = baseGetTag(value);\n      return tag == errorTag || tag == domExcTag ||\n        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\n    }\n\n    /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(3);\n     * // => true\n     *\n     * _.isFinite(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     *\n     * _.isFinite('3');\n     * // => false\n     */\n    function isFinite(value) {\n      return typeof value == 'number' && nativeIsFinite(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */\n    function isFunction(value) {\n      if (!isObject(value)) {\n        return false;\n      }\n      // The use of `Object#toString` avoids issues with the `typeof` operator\n      // in Safari 9 which returns 'object' for typed arrays and other constructors.\n      var tag = baseGetTag(value);\n      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n    }\n\n    /**\n     * Checks if `value` is an integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n     * @example\n     *\n     * _.isInteger(3);\n     * // => true\n     *\n     * _.isInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isInteger(Infinity);\n     * // => false\n     *\n     * _.isInteger('3');\n     * // => false\n     */\n    function isInteger(value) {\n      return typeof value == 'number' && value == toInteger(value);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     * @example\n     *\n     * _.isLength(3);\n     * // => true\n     *\n     * _.isLength(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isLength(Infinity);\n     * // => false\n     *\n     * _.isLength('3');\n     * // => false\n     */\n    function isLength(value) {\n      return typeof value == 'number' &&\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is the\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(_.noop);\n     * // => true\n     *\n     * _.isObject(null);\n     * // => false\n     */\n    function isObject(value) {\n      var type = typeof value;\n      return value != null && (type == 'object' || type == 'function');\n    }\n\n    /**\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\n     * and has a `typeof` result of \"object\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n     * @example\n     *\n     * _.isObjectLike({});\n     * // => true\n     *\n     * _.isObjectLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isObjectLike(_.noop);\n     * // => false\n     *\n     * _.isObjectLike(null);\n     * // => false\n     */\n    function isObjectLike(value) {\n      return value != null && typeof value == 'object';\n    }\n\n    /**\n     * Checks if `value` is classified as a `Map` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     * @example\n     *\n     * _.isMap(new Map);\n     * // => true\n     *\n     * _.isMap(new WeakMap);\n     * // => false\n     */\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\n    /**\n     * Performs a partial deep comparison between `object` and `source` to\n     * determine if `object` contains equivalent property values.\n     *\n     * **Note:** This method is equivalent to `_.matches` when `source` is\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.isMatch(object, { 'b': 2 });\n     * // => true\n     *\n     * _.isMatch(object, { 'b': 1 });\n     * // => false\n     */\n    function isMatch(object, source) {\n      return object === source || baseIsMatch(object, source, getMatchData(source));\n    }\n\n    /**\n     * This method is like `_.isMatch` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with five\n     * arguments: (objValue, srcValue, index|key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatchWith(object, source, customizer);\n     * // => true\n     */\n    function isMatchWith(object, source, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseIsMatch(object, source, getMatchData(source), customizer);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is based on\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n     * `undefined` and other non-number values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // An `NaN` primitive is the only value that is not equal to itself.\n      // Perform the `toStringTag` check first to avoid errors with some\n      // ActiveX objects in IE.\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is a pristine native function.\n     *\n     * **Note:** This method can't reliably detect native functions in the presence\n     * of the core-js package because core-js circumvents this kind of detection.\n     * Despite multiple requests, the core-js maintainer has made it clear: any\n     * attempt to fix the detection will be obstructed. As a result, we're left\n     * with little choice but to throw an error. Unfortunately, this also affects\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n     * which rely on core-js.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */\n    function isNative(value) {\n      if (isMaskable(value)) {\n        throw new Error(CORE_ERROR_TEXT);\n      }\n      return baseIsNative(value);\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is `null` or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n     * @example\n     *\n     * _.isNil(null);\n     * // => true\n     *\n     * _.isNil(void 0);\n     * // => true\n     *\n     * _.isNil(NaN);\n     * // => false\n     */\n    function isNil(value) {\n      return value == null;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n     * classified as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(3);\n     * // => true\n     *\n     * _.isNumber(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isNumber(Infinity);\n     * // => true\n     *\n     * _.isNumber('3');\n     * // => false\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        (isObjectLike(value) && baseGetTag(value) == numberTag);\n    }\n\n    /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.8.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */\n    function isPlainObject(value) {\n      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n        return false;\n      }\n      var proto = getPrototype(value);\n      if (proto === null) {\n        return true;\n      }\n      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n      return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n        funcToString.call(Ctor) == objectCtorString;\n    }\n\n    /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */\n    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\n    /**\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n     * double precision number which isn't the result of a rounded unsafe integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n     * @example\n     *\n     * _.isSafeInteger(3);\n     * // => true\n     *\n     * _.isSafeInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isSafeInteger(Infinity);\n     * // => false\n     *\n     * _.isSafeInteger('3');\n     * // => false\n     */\n    function isSafeInteger(value) {\n      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Set` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     * @example\n     *\n     * _.isSet(new Set);\n     * // => true\n     *\n     * _.isSet(new WeakSet);\n     * // => false\n     */\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\n    /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Symbol` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n     * @example\n     *\n     * _.isSymbol(Symbol.iterator);\n     * // => true\n     *\n     * _.isSymbol('abc');\n     * // => false\n     */\n    function isSymbol(value) {\n      return typeof value == 'symbol' ||\n        (isObjectLike(value) && baseGetTag(value) == symbolTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */\n    function isUndefined(value) {\n      return value === undefined;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakMap` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n     * @example\n     *\n     * _.isWeakMap(new WeakMap);\n     * // => true\n     *\n     * _.isWeakMap(new Map);\n     * // => false\n     */\n    function isWeakMap(value) {\n      return isObjectLike(value) && getTag(value) == weakMapTag;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakSet` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n     * @example\n     *\n     * _.isWeakSet(new WeakSet);\n     * // => true\n     *\n     * _.isWeakSet(new Set);\n     * // => false\n     */\n    function isWeakSet(value) {\n      return isObjectLike(value) && baseGetTag(value) == weakSetTag;\n    }\n\n    /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     * @see _.gt\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */\n    var lt = createRelationalOperation(baseLt);\n\n    /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\n     *  `other`, else `false`.\n     * @see _.gte\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */\n    var lte = createRelationalOperation(function(value, other) {\n      return value <= other;\n    });\n\n    /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * _.toArray({ 'a': 1, 'b': 2 });\n     * // => [1, 2]\n     *\n     * _.toArray('abc');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toArray(1);\n     * // => []\n     *\n     * _.toArray(null);\n     * // => []\n     */\n    function toArray(value) {\n      if (!value) {\n        return [];\n      }\n      if (isArrayLike(value)) {\n        return isString(value) ? stringToArray(value) : copyArray(value);\n      }\n      if (symIterator && value[symIterator]) {\n        return iteratorToArray(value[symIterator]());\n      }\n      var tag = getTag(value),\n          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n      return func(value);\n    }\n\n    /**\n     * Converts `value` to a finite number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.12.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted number.\n     * @example\n     *\n     * _.toFinite(3.2);\n     * // => 3.2\n     *\n     * _.toFinite(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toFinite(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toFinite('3.2');\n     * // => 3.2\n     */\n    function toFinite(value) {\n      if (!value) {\n        return value === 0 ? value : 0;\n      }\n      value = toNumber(value);\n      if (value === INFINITY || value === -INFINITY) {\n        var sign = (value < 0 ? -1 : 1);\n        return sign * MAX_INTEGER;\n      }\n      return value === value ? value : 0;\n    }\n\n    /**\n     * Converts `value` to an integer.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toInteger(3.2);\n     * // => 3\n     *\n     * _.toInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toInteger(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toInteger('3.2');\n     * // => 3\n     */\n    function toInteger(value) {\n      var result = toFinite(value),\n          remainder = result % 1;\n\n      return result === result ? (remainder ? result - remainder : result) : 0;\n    }\n\n    /**\n     * Converts `value` to an integer suitable for use as the length of an\n     * array-like object.\n     *\n     * **Note:** This method is based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toLength(3.2);\n     * // => 3\n     *\n     * _.toLength(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toLength(Infinity);\n     * // => 4294967295\n     *\n     * _.toLength('3.2');\n     * // => 3\n     */\n    function toLength(value) {\n      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n    }\n\n    /**\n     * Converts `value` to a number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     * @example\n     *\n     * _.toNumber(3.2);\n     * // => 3.2\n     *\n     * _.toNumber(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toNumber(Infinity);\n     * // => Infinity\n     *\n     * _.toNumber('3.2');\n     * // => 3.2\n     */\n    function toNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      if (isObject(value)) {\n        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n        value = isObject(other) ? (other + '') : other;\n      }\n      if (typeof value != 'string') {\n        return value === 0 ? value : +value;\n      }\n      value = value.replace(reTrim, '');\n      var isBinary = reIsBinary.test(value);\n      return (isBinary || reIsOctal.test(value))\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n        : (reIsBadHex.test(value) ? NAN : +value);\n    }\n\n    /**\n     * Converts `value` to a plain object flattening inherited enumerable string\n     * keyed properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */\n    function toPlainObject(value) {\n      return copyObject(value, keysIn(value));\n    }\n\n    /**\n     * Converts `value` to a safe integer. A safe integer can be compared and\n     * represented correctly.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toSafeInteger(3.2);\n     * // => 3\n     *\n     * _.toSafeInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toSafeInteger(Infinity);\n     * // => 9007199254740991\n     *\n     * _.toSafeInteger('3.2');\n     * // => 3\n     */\n    function toSafeInteger(value) {\n      return value\n        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)\n        : (value === 0 ? value : 0);\n    }\n\n    /**\n     * Converts `value` to a string. An empty string is returned for `null`\n     * and `undefined` values. The sign of `-0` is preserved.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.toString(null);\n     * // => ''\n     *\n     * _.toString(-0);\n     * // => '-0'\n     *\n     * _.toString([1, 2, 3]);\n     * // => '1,2,3'\n     */\n    function toString(value) {\n      return value == null ? '' : baseToString(value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable string keyed properties of source objects to the\n     * destination object. Source objects are applied from left to right.\n     * Subsequent sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object` and is loosely based on\n     * [`Object.assign`](https://mdn.io/Object/assign).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assignIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var assign = createAssigner(function(object, source) {\n      if (isPrototype(source) || isArrayLike(source)) {\n        copyObject(source, keys(source), object);\n        return;\n      }\n      for (var key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          assignValue(object, key, source[key]);\n        }\n      }\n    });\n\n    /**\n     * This method is like `_.assign` except that it iterates over own and\n     * inherited source properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assign\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n     */\n    var assignIn = createAssigner(function(object, source) {\n      copyObject(source, keysIn(source), object);\n    });\n\n    /**\n     * This method is like `_.assignIn` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extendWith\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignInWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keysIn(source), object, customizer);\n    });\n\n    /**\n     * This method is like `_.assign` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignInWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keys(source), object, customizer);\n    });\n\n    /**\n     * Creates an array of values corresponding to `paths` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Array} Returns the picked values.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n     * `properties` object is given, its own enumerable string keyed properties\n     * are assigned to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties == null ? result : baseAssign(result, properties);\n    }\n\n    /**\n     * Assigns own and inherited enumerable string keyed properties of source\n     * objects to the destination object for all destination properties that\n     * resolve to `undefined`. Source objects are applied from left to right.\n     * Once a property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaultsDeep\n     * @example\n     *\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var defaults = baseRest(function(object, sources) {\n      object = Object(object);\n\n      var index = -1;\n      var length = sources.length;\n      var guard = length > 2 ? sources[2] : undefined;\n\n      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n        length = 1;\n      }\n\n      while (++index < length) {\n        var source = sources[index];\n        var props = keysIn(source);\n        var propsIndex = -1;\n        var propsLength = props.length;\n\n        while (++propsIndex < propsLength) {\n          var key = props[propsIndex];\n          var value = object[key];\n\n          if (value === undefined ||\n              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n            object[key] = source[key];\n          }\n        }\n      }\n\n      return object;\n    });\n\n    /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaults\n     * @example\n     *\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n     * // => { 'a': { 'b': 2, 'c': 3 } }\n     */\n    var defaultsDeep = baseRest(function(args) {\n      args.push(undefined, customDefaultsMerge);\n      return apply(mergeWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(o) { return o.age < 40; });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */\n    function findKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(o) { return o.age < 40; });\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n    }\n\n    /**\n     * Iterates over own and inherited enumerable string keyed properties of an\n     * object and invokes `iteratee` for each property. The iteratee is invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forInRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n     */\n    function forIn(object, iteratee) {\n      return object == null\n        ? object\n        : baseFor(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n     */\n    function forInRight(object, iteratee) {\n      return object == null\n        ? object\n        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * Iterates over own enumerable string keyed properties of an object and\n     * invokes `iteratee` for each property. The iteratee is invoked with three\n     * arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwnRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forOwn(object, iteratee) {\n      return object && baseForOwn(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n     */\n    function forOwnRight(object, iteratee) {\n      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an array of function property names from own enumerable properties\n     * of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functionsIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functions(new Foo);\n     * // => ['a', 'b']\n     */\n    function functions(object) {\n      return object == null ? [] : baseFunctions(object, keys(object));\n    }\n\n    /**\n     * Creates an array of function property names from own and inherited\n     * enumerable properties of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functions\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functionsIn(new Foo);\n     * // => ['a', 'b', 'c']\n     */\n    function functionsIn(object) {\n      return object == null ? [] : baseFunctions(object, keysIn(object));\n    }\n\n    /**\n     * Gets the value at `path` of `object`. If the resolved value is\n     * `undefined`, the `defaultValue` is returned in its place.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n      var result = object == null ? undefined : baseGet(object, path);\n      return result === undefined ? defaultValue : result;\n    }\n\n    /**\n     * Checks if `path` is a direct property of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': 2 } };\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b');\n     * // => true\n     *\n     * _.has(object, ['a', 'b']);\n     * // => true\n     *\n     * _.has(other, 'a');\n     * // => false\n     */\n    function has(object, path) {\n      return object != null && hasPath(object, path, baseHas);\n    }\n\n    /**\n     * Checks if `path` is a direct or inherited property of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.hasIn(object, 'a');\n     * // => true\n     *\n     * _.hasIn(object, 'a.b');\n     * // => true\n     *\n     * _.hasIn(object, ['a', 'b']);\n     * // => true\n     *\n     * _.hasIn(object, 'b');\n     * // => false\n     */\n    function hasIn(object, path) {\n      return object != null && hasPath(object, path, baseHasIn);\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite\n     * property assignments of previous values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     */\n    var invert = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      result[value] = key;\n    }, constant(identity));\n\n    /**\n     * This method is like `_.invert` except that the inverted object is generated\n     * from the results of running each element of `object` thru `iteratee`. The\n     * corresponding inverted value of each inverted key is an array of keys\n     * responsible for generating the inverted value. The iteratee is invoked\n     * with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invertBy(object);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     *\n     * _.invertBy(object, function(value) {\n     *   return 'group' + value;\n     * });\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n     */\n    var invertBy = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      if (hasOwnProperty.call(result, value)) {\n        result[value].push(key);\n      } else {\n        result[value] = [key];\n      }\n    }, getIteratee);\n\n    /**\n     * Invokes the method at `path` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n     *\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n     * // => [2, 3]\n     */\n    var invoke = baseRest(baseInvoke);\n\n    /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */\n    function keys(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */\n    function keysIn(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n    }\n\n    /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n     * with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapValues\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */\n    function mapKeys(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, iteratee(value, key, object), value);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated\n     * by running each own enumerable string keyed property of `object` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapKeys\n     * @example\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * _.mapValues(users, function(o) { return o.age; });\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */\n    function mapValues(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, key, iteratee(value, key, object));\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.assign` except that it recursively merges own and\n     * inherited enumerable string keyed properties of source objects into the\n     * destination object. Source properties that resolve to `undefined` are\n     * skipped if a destination value exists. Array and plain object properties\n     * are merged recursively. Other objects and value types are overridden by\n     * assignment. Source objects are applied from left to right. Subsequent\n     * sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n     * };\n     *\n     * var other = {\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n     * };\n     *\n     * _.merge(object, other);\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n     */\n    var merge = createAssigner(function(object, source, srcIndex) {\n      baseMerge(object, source, srcIndex);\n    });\n\n    /**\n     * This method is like `_.merge` except that it accepts `customizer` which\n     * is invoked to produce the merged values of the destination and source\n     * properties. If `customizer` returns `undefined`, merging is handled by the\n     * method instead. The `customizer` is invoked with six arguments:\n     * (objValue, srcValue, key, object, source, stack).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (_.isArray(objValue)) {\n     *     return objValue.concat(srcValue);\n     *   }\n     * }\n     *\n     * var object = { 'a': [1], 'b': [2] };\n     * var other = { 'a': [3], 'b': [4] };\n     *\n     * _.mergeWith(object, other, customizer);\n     * // => { 'a': [1, 3], 'b': [2, 4] }\n     */\n    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n      baseMerge(object, source, srcIndex, customizer);\n    });\n\n    /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable property paths of `object` that are not omitted.\n     *\n     * **Note:** This method is considerably slower than `_.pick`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to omit.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omit(object, ['a', 'c']);\n     * // => { 'b': '2' }\n     */\n    var omit = flatRest(function(object, paths) {\n      var result = {};\n      if (object == null) {\n        return result;\n      }\n      var isDeep = false;\n      paths = arrayMap(paths, function(path) {\n        path = castPath(path, object);\n        isDeep || (isDeep = path.length > 1);\n        return path;\n      });\n      copyObject(object, getAllKeysIn(object), result);\n      if (isDeep) {\n        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n      }\n      var length = paths.length;\n      while (length--) {\n        baseUnset(result, paths[length]);\n      }\n      return result;\n    });\n\n    /**\n     * The opposite of `_.pickBy`; this method creates an object composed of\n     * the own and inherited enumerable string keyed properties of `object` that\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\n     * arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omitBy(object, _.isNumber);\n     * // => { 'b': '2' }\n     */\n    function omitBy(object, predicate) {\n      return pickBy(object, negate(getIteratee(predicate)));\n    }\n\n    /**\n     * Creates an object composed of the picked `object` properties.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pick(object, ['a', 'c']);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var pick = flatRest(function(object, paths) {\n      return object == null ? {} : basePick(object, paths);\n    });\n\n    /**\n     * Creates an object composed of the `object` properties `predicate` returns\n     * truthy for. The predicate is invoked with two arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pickBy(object, _.isNumber);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    function pickBy(object, predicate) {\n      if (object == null) {\n        return {};\n      }\n      var props = arrayMap(getAllKeysIn(object), function(prop) {\n        return [prop];\n      });\n      predicate = getIteratee(predicate);\n      return basePickBy(object, props, function(value, path) {\n        return predicate(value, path[0]);\n      });\n    }\n\n    /**\n     * This method is like `_.get` except that if the resolved value is a\n     * function it's invoked with the `this` binding of its parent object and\n     * its result is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a[0].b.c3', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\n     * // => 'default'\n     */\n    function result(object, path, defaultValue) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length;\n\n      // Ensure the loop is entered when path is empty.\n      if (!length) {\n        length = 1;\n        object = undefined;\n      }\n      while (++index < length) {\n        var value = object == null ? undefined : object[toKey(path[index])];\n        if (value === undefined) {\n          index = length;\n          value = defaultValue;\n        }\n        object = isFunction(value) ? value.call(object) : value;\n      }\n      return object;\n    }\n\n    /**\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n     * it's created. Arrays are created for missing index properties while objects\n     * are created for all other missing properties. Use `_.setWith` to customize\n     * `path` creation.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */\n    function set(object, path, value) {\n      return object == null ? object : baseSet(object, path, value);\n    }\n\n    /**\n     * This method is like `_.set` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.setWith(object, '[0][1]', 'a', Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function setWith(object, path, value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseSet(object, path, value, customizer);\n    }\n\n    /**\n     * Creates an array of own enumerable string keyed-value pairs for `object`\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n     * entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entries\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairs(new Foo);\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n     */\n    var toPairs = createToPairs(keys);\n\n    /**\n     * Creates an array of own and inherited enumerable string keyed-value pairs\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n     * or set, its entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entriesIn\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairsIn(new Foo);\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n     */\n    var toPairsIn = createToPairs(keysIn);\n\n    /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable string keyed properties thru `iteratee`, with each invocation\n     * potentially mutating the `accumulator` object. If `accumulator` is not\n     * provided, a new object with the same `[[Prototype]]` will be used. The\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * }, []);\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */\n    function transform(object, iteratee, accumulator) {\n      var isArr = isArray(object),\n          isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n      iteratee = getIteratee(iteratee, 4);\n      if (accumulator == null) {\n        var Ctor = object && object.constructor;\n        if (isArrLike) {\n          accumulator = isArr ? new Ctor : [];\n        }\n        else if (isObject(object)) {\n          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n        }\n        else {\n          accumulator = {};\n        }\n      }\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Removes the property at `path` of `object`.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n     * _.unset(object, 'a[0].b.c');\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     *\n     * _.unset(object, ['a', '0', 'b', 'c']);\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     */\n    function unset(object, path) {\n      return object == null ? true : baseUnset(object, path);\n    }\n\n    /**\n     * This method is like `_.set` except that accepts `updater` to produce the\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n     * is invoked with one argument: (value).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n     * console.log(object.a[0].b.c);\n     * // => 9\n     *\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n     * console.log(object.x[0].y.z);\n     * // => 0\n     */\n    function update(object, path, updater) {\n      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n    }\n\n    /**\n     * This method is like `_.update` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function updateWith(object, path, updater, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n    }\n\n    /**\n     * Creates an array of the own enumerable string keyed property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */\n    function values(object) {\n      return object == null ? [] : baseValues(object, keys(object));\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable string keyed property\n     * values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */\n    function valuesIn(object) {\n      return object == null ? [] : baseValues(object, keysIn(object));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Number\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     * @example\n     *\n     * _.clamp(-10, -5, 5);\n     * // => -5\n     *\n     * _.clamp(10, -5, 5);\n     * // => 5\n     */\n    function clamp(number, lower, upper) {\n      if (upper === undefined) {\n        upper = lower;\n        lower = undefined;\n      }\n      if (upper !== undefined) {\n        upper = toNumber(upper);\n        upper = upper === upper ? upper : 0;\n      }\n      if (lower !== undefined) {\n        lower = toNumber(lower);\n        lower = lower === lower ? lower : 0;\n      }\n      return baseClamp(toNumber(number), lower, upper);\n    }\n\n    /**\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n     * If `start` is greater than `end` the params are swapped to support\n     * negative ranges.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.3.0\n     * @category Number\n     * @param {number} number The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     * @see _.range, _.rangeRight\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     *\n     * _.inRange(-3, -2, -6);\n     * // => true\n     */\n    function inRange(number, start, end) {\n      start = toFinite(start);\n      if (end === undefined) {\n        end = start;\n        start = 0;\n      } else {\n        end = toFinite(end);\n      }\n      number = toNumber(number);\n      return baseInRange(number, start, end);\n    }\n\n    /**\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\n     * If only one argument is provided a number between `0` and the given number\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n     * floats, a floating-point number is returned instead of an integer.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Number\n     * @param {number} [lower=0] The lower bound.\n     * @param {number} [upper=1] The upper bound.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(lower, upper, floating) {\n      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n        upper = floating = undefined;\n      }\n      if (floating === undefined) {\n        if (typeof upper == 'boolean') {\n          floating = upper;\n          upper = undefined;\n        }\n        else if (typeof lower == 'boolean') {\n          floating = lower;\n          lower = undefined;\n        }\n      }\n      if (lower === undefined && upper === undefined) {\n        lower = 0;\n        upper = 1;\n      }\n      else {\n        lower = toFinite(lower);\n        if (upper === undefined) {\n          upper = lower;\n          lower = 0;\n        } else {\n          upper = toFinite(upper);\n        }\n      }\n      if (lower > upper) {\n        var temp = lower;\n        lower = upper;\n        upper = temp;\n      }\n      if (floating || lower % 1 || upper % 1) {\n        var rand = nativeRandom();\n        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n      }\n      return baseRandom(lower, upper);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar--');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__FOO_BAR__');\n     * // => 'fooBar'\n     */\n    var camelCase = createCompounder(function(result, word, index) {\n      word = word.toLowerCase();\n      return result + (index ? capitalize(word) : word);\n    });\n\n    /**\n     * Converts the first character of `string` to upper case and the remaining\n     * to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('FRED');\n     * // => 'Fred'\n     */\n    function capitalize(string) {\n      return upperFirst(toString(string).toLowerCase());\n    }\n\n    /**\n     * Deburrs `string` by converting\n     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n     * letters to basic Latin letters and removing\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('déjà vu');\n     * // => 'deja vu'\n     */\n    function deburr(string) {\n      string = toString(string);\n      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n    }\n\n    /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search up to.\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */\n    function endsWith(string, target, position) {\n      string = toString(string);\n      target = baseToString(target);\n\n      var length = string.length;\n      position = position === undefined\n        ? length\n        : baseClamp(toInteger(position), 0, length);\n\n      var end = position;\n      position -= target.length;\n      return position >= 0 && string.slice(position, end) == target;\n    }\n\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n     * corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional\n     * characters use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value. See\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * When working with HTML you should always\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n     * XSS vectors.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */\n    function escape(string) {\n      string = toString(string);\n      return (string && reHasUnescapedHtml.test(string))\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n     */\n    function escapeRegExp(string) {\n      string = toString(string);\n      return (string && reHasRegExpChar.test(string))\n        ? string.replace(reRegExpChar, '\\\\$&')\n        : string;\n    }\n\n    /**\n     * Converts `string` to\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__FOO_BAR__');\n     * // => 'foo-bar'\n     */\n    var kebabCase = createCompounder(function(result, word, index) {\n      return result + (index ? '-' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts `string`, as space separated words, to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.lowerCase('--Foo-Bar--');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('fooBar');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('__FOO_BAR__');\n     * // => 'foo bar'\n     */\n    var lowerCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts the first character of `string` to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.lowerFirst('Fred');\n     * // => 'fred'\n     *\n     * _.lowerFirst('FRED');\n     * // => 'fRED'\n     */\n    var lowerFirst = createCaseFirst('toLowerCase');\n\n    /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */\n    function pad(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      if (!length || strLength >= length) {\n        return string;\n      }\n      var mid = (length - strLength) / 2;\n      return (\n        createPadding(nativeFloor(mid), chars) +\n        string +\n        createPadding(nativeCeil(mid), chars)\n      );\n    }\n\n    /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padEnd('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padEnd('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padEnd('abc', 3);\n     * // => 'abc'\n     */\n    function padEnd(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (string + createPadding(length - strLength, chars))\n        : string;\n    }\n\n    /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padStart('abc', 6);\n     * // => '   abc'\n     *\n     * _.padStart('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padStart('abc', 3);\n     * // => 'abc'\n     */\n    function padStart(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (createPadding(length - strLength, chars) + string)\n        : string;\n    }\n\n    /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n     * hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix=10] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */\n    function parseInt(string, radix, guard) {\n      if (guard || radix == null) {\n        radix = 0;\n      } else if (radix) {\n        radix = +radix;\n      }\n      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n    }\n\n    /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=1] The number of times to repeat the string.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */\n    function repeat(string, n, guard) {\n      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      return baseRepeat(toString(string), n);\n    }\n\n    /**\n     * Replaces matches for `pattern` in `string` with `replacement`.\n     *\n     * **Note:** This method is based on\n     * [`String#replace`](https://mdn.io/String/replace).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to modify.\n     * @param {RegExp|string} pattern The pattern to replace.\n     * @param {Function|string} replacement The match replacement.\n     * @returns {string} Returns the modified string.\n     * @example\n     *\n     * _.replace('Hi Fred', 'Fred', 'Barney');\n     * // => 'Hi Barney'\n     */\n    function replace() {\n      var args = arguments,\n          string = toString(args[0]);\n\n      return args.length < 3 ? string : string.replace(args[1], args[2]);\n    }\n\n    /**\n     * Converts `string` to\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--FOO-BAR--');\n     * // => 'foo_bar'\n     */\n    var snakeCase = createCompounder(function(result, word, index) {\n      return result + (index ? '_' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Splits `string` by `separator`.\n     *\n     * **Note:** This method is based on\n     * [`String#split`](https://mdn.io/String/split).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to split.\n     * @param {RegExp|string} separator The separator pattern to split by.\n     * @param {number} [limit] The length to truncate results to.\n     * @returns {Array} Returns the string segments.\n     * @example\n     *\n     * _.split('a-b-c', '-', 2);\n     * // => ['a', 'b']\n     */\n    function split(string, separator, limit) {\n      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n        separator = limit = undefined;\n      }\n      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n      if (!limit) {\n        return [];\n      }\n      string = toString(string);\n      if (string && (\n            typeof separator == 'string' ||\n            (separator != null && !isRegExp(separator))\n          )) {\n        separator = baseToString(separator);\n        if (!separator && hasUnicode(string)) {\n          return castSlice(stringToArray(string), 0, limit);\n        }\n      }\n      return string.split(separator, limit);\n    }\n\n    /**\n     * Converts `string` to\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.1.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar--');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__FOO_BAR__');\n     * // => 'FOO BAR'\n     */\n    var startCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + upperFirst(word);\n    });\n\n    /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */\n    function startsWith(string, target, position) {\n      string = toString(string);\n      position = position == null\n        ? 0\n        : baseClamp(toInteger(position), 0, string.length);\n\n      target = baseToString(target);\n      return string.slice(position, position + target.length) == target;\n    }\n\n    /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is given, it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options={}] The options object.\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\n     *  The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n     *  The \"evaluate\" delimiter.\n     * @param {Object} [options.imports=_.templateSettings.imports]\n     *  An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n     *  The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n     *  The sourceURL of the compiled template.\n     * @param {string} [options.variable='obj']\n     *  The data object variable name.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // Use the \"interpolate\" delimiter to create a compiled template.\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // Use the HTML \"escape\" delimiter to escape data property values.\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the internal `print` function in \"evaluate\" delimiters.\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n     * // Disable support by replacing the \"interpolate\" delimiter.\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // Use backslashes to treat delimiters as plain text.\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // Use the `imports` option to import `jQuery` as `jq`.\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n     *\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // Use custom template delimiters.\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // Use the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and stack traces.\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(string, options, guard) {\n      // Based on John Resig's `tmpl` implementation\n      // (http://ejohn.org/blog/javascript-micro-templating/)\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n      var settings = lodash.templateSettings;\n\n      if (guard && isIterateeCall(string, options, guard)) {\n        options = undefined;\n      }\n      string = toString(string);\n      options = assignInWith({}, options, settings, customDefaultsAssignIn);\n\n      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\n          importsKeys = keys(imports),\n          importsValues = baseValues(imports, importsKeys);\n\n      var isEscaping,\n          isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // Compile the regexp to match each delimiter.\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      // Use a sourceURL for easier debugging.\n      // The sourceURL gets injected into the source that's eval-ed, so be careful\n      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in\n      // and escape the comment, thus injecting code that gets evaled.\n      var sourceURL = '//# sourceURL=' +\n        (hasOwnProperty.call(options, 'sourceURL')\n          ? (options.sourceURL + '').replace(/\\s/g, ' ')\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\n        ) + '\\n';\n\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // Escape characters that can't be included in string literals.\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // Replace delimiters with snippets.\n        if (escapeValue) {\n          isEscaping = true;\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // The JS engine embedded in Adobe products needs `match` returned in\n        // order to produce the correct `offset` value.\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // If `variable` is not specified wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain.\n      var variable = hasOwnProperty.call(options, 'variable') && options.variable;\n      if (!variable) {\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\n      }\n      // Cleanup code by stripping empty strings.\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // Frame code as the function body.\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\n        (variable\n          ? ''\n          : 'obj || (obj = {});\\n'\n        ) +\n        \"var __t, __p = ''\" +\n        (isEscaping\n           ? ', __e = _.escape'\n           : ''\n        ) +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      var result = attempt(function() {\n        return Function(importsKeys, sourceURL + 'return ' + source)\n          .apply(undefined, importsValues);\n      });\n\n      // Provide the compiled function's source by its `toString` method or\n      // the `source` property as a convenience for inlining compiled templates.\n      result.source = source;\n      if (isError(result)) {\n        throw result;\n      }\n      return result;\n    }\n\n    /**\n     * Converts `string`, as a whole, to lower case just like\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.toLower('--Foo-Bar--');\n     * // => '--foo-bar--'\n     *\n     * _.toLower('fooBar');\n     * // => 'foobar'\n     *\n     * _.toLower('__FOO_BAR__');\n     * // => '__foo_bar__'\n     */\n    function toLower(value) {\n      return toString(value).toLowerCase();\n    }\n\n    /**\n     * Converts `string`, as a whole, to upper case just like\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.toUpper('--foo-bar--');\n     * // => '--FOO-BAR--'\n     *\n     * _.toUpper('fooBar');\n     * // => 'FOOBAR'\n     *\n     * _.toUpper('__foo_bar__');\n     * // => '__FOO_BAR__'\n     */\n    function toUpper(value) {\n      return toString(value).toUpperCase();\n    }\n\n    /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */\n    function trim(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrim, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          chrSymbols = stringToArray(chars),\n          start = charsStartIndex(strSymbols, chrSymbols),\n          end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n      return castSlice(strSymbols, start, end).join('');\n    }\n\n    /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimEnd('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimEnd('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */\n    function trimEnd(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimEnd, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n      return castSlice(strSymbols, 0, end).join('');\n    }\n\n    /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimStart('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimStart('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */\n    function trimStart(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimStart, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          start = charsStartIndex(strSymbols, stringToArray(chars));\n\n      return castSlice(strSymbols, start).join('');\n    }\n\n    /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object} [options={}] The options object.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.truncate('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */\n    function truncate(string, options) {\n      var length = DEFAULT_TRUNC_LENGTH,\n          omission = DEFAULT_TRUNC_OMISSION;\n\n      if (isObject(options)) {\n        var separator = 'separator' in options ? options.separator : separator;\n        length = 'length' in options ? toInteger(options.length) : length;\n        omission = 'omission' in options ? baseToString(options.omission) : omission;\n      }\n      string = toString(string);\n\n      var strLength = string.length;\n      if (hasUnicode(string)) {\n        var strSymbols = stringToArray(string);\n        strLength = strSymbols.length;\n      }\n      if (length >= strLength) {\n        return string;\n      }\n      var end = length - stringSize(omission);\n      if (end < 1) {\n        return omission;\n      }\n      var result = strSymbols\n        ? castSlice(strSymbols, 0, end).join('')\n        : string.slice(0, end);\n\n      if (separator === undefined) {\n        return result + omission;\n      }\n      if (strSymbols) {\n        end += (result.length - end);\n      }\n      if (isRegExp(separator)) {\n        if (string.slice(end).search(separator)) {\n          var match,\n              substring = result;\n\n          if (!separator.global) {\n            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n          }\n          separator.lastIndex = 0;\n          while ((match = separator.exec(substring))) {\n            var newEnd = match.index;\n          }\n          result = result.slice(0, newEnd === undefined ? end : newEnd);\n        }\n      } else if (string.indexOf(baseToString(separator), end) != end) {\n        var index = result.lastIndexOf(separator);\n        if (index > -1) {\n          result = result.slice(0, index);\n        }\n      }\n      return result + omission;\n    }\n\n    /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n     * their corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.6.0\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */\n    function unescape(string) {\n      string = toString(string);\n      return (string && reHasEscapedHtml.test(string))\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Converts `string`, as space separated words, to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.upperCase('--foo-bar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('fooBar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('__foo_bar__');\n     * // => 'FOO BAR'\n     */\n    var upperCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toUpperCase();\n    });\n\n    /**\n     * Converts the first character of `string` to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.upperFirst('fred');\n     * // => 'Fred'\n     *\n     * _.upperFirst('FRED');\n     * // => 'FRED'\n     */\n    var upperFirst = createCaseFirst('toUpperCase');\n\n    /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */\n    function words(string, pattern, guard) {\n      string = toString(string);\n      pattern = guard ? undefined : pattern;\n\n      if (pattern === undefined) {\n        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n      }\n      return string.match(pattern) || [];\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Function} func The function to attempt.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // Avoid throwing errors for invalid selectors.\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */\n    var attempt = baseRest(function(func, args) {\n      try {\n        return apply(func, undefined, args);\n      } catch (e) {\n        return isError(e) ? e : new Error(e);\n      }\n    });\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method.\n     *\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} methodNames The object method names to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'click': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view, ['click']);\n     * jQuery(element).on('click', view.click);\n     * // => Logs 'clicked docs' when clicked.\n     */\n    var bindAll = flatRest(function(object, methodNames) {\n      arrayEach(methodNames, function(key) {\n        key = toKey(key);\n        baseAssignValue(object, key, bind(object[key], object));\n      });\n      return object;\n    });\n\n    /**\n     * Creates a function that iterates over `pairs` and invokes the corresponding\n     * function of the first predicate to return truthy. The predicate-function\n     * pairs are invoked with the `this` binding and arguments of the created\n     * function.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Array} pairs The predicate-function pairs.\n     * @returns {Function} Returns the new composite function.\n     * @example\n     *\n     * var func = _.cond([\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n     *   [_.stubTrue,                      _.constant('no match')]\n     * ]);\n     *\n     * func({ 'a': 1, 'b': 2 });\n     * // => 'matches A'\n     *\n     * func({ 'a': 0, 'b': 1 });\n     * // => 'matches B'\n     *\n     * func({ 'a': '1', 'b': '2' });\n     * // => 'no match'\n     */\n    function cond(pairs) {\n      var length = pairs == null ? 0 : pairs.length,\n          toIteratee = getIteratee();\n\n      pairs = !length ? [] : arrayMap(pairs, function(pair) {\n        if (typeof pair[1] != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return [toIteratee(pair[0]), pair[1]];\n      });\n\n      return baseRest(function(args) {\n        var index = -1;\n        while (++index < length) {\n          var pair = pairs[index];\n          if (apply(pair[0], this, args)) {\n            return apply(pair[1], this, args);\n          }\n        }\n      });\n    }\n\n    /**\n     * Creates a function that invokes the predicate properties of `source` with\n     * the corresponding property values of a given object, returning `true` if\n     * all predicates return truthy, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.conformsTo` with\n     * `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 2, 'b': 1 },\n     *   { 'a': 1, 'b': 2 }\n     * ];\n     *\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n     * // => [{ 'a': 1, 'b': 2 }]\n     */\n    function conforms(source) {\n      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new constant function.\n     * @example\n     *\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\n     *\n     * console.log(objects);\n     * // => [{ 'a': 1 }, { 'a': 1 }]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Checks `value` to determine whether a default value should be returned in\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n     * or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Util\n     * @param {*} value The value to check.\n     * @param {*} defaultValue The default value.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * _.defaultTo(1, 10);\n     * // => 1\n     *\n     * _.defaultTo(undefined, 10);\n     * // => 10\n     */\n    function defaultTo(value, defaultValue) {\n      return (value == null || value !== value) ? defaultValue : value;\n    }\n\n    /**\n     * Creates a function that returns the result of invoking the given functions\n     * with the `this` binding of the created function, where each successive\n     * invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flowRight\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow([_.add, square]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flow = createFlow();\n\n    /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the given functions from right to left.\n     *\n     * @static\n     * @since 3.0.0\n     * @memberOf _\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flow\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight([square, _.add]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flowRight = createFlow(true);\n\n    /**\n     * This method returns the first argument it receives.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     *\n     * console.log(_.identity(object) === object);\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Creates a function that invokes `func` with the arguments of the created\n     * function. If `func` is a property name, the created function returns the\n     * property value for a given element. If `func` is an array or object, the\n     * created function returns `true` for elements that contain the equivalent\n     * source properties, otherwise it returns `false`.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Util\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, _.iteratee(['user', 'fred']));\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, _.iteratee('user'));\n     * // => ['barney', 'fred']\n     *\n     * // Create custom iteratee shorthands.\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n     *     return func.test(string);\n     *   };\n     * });\n     *\n     * _.filter(['abc', 'def'], /ef/);\n     * // => ['def']\n     */\n    function iteratee(func) {\n      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between a given\n     * object and `source`, returning `true` if the given object has equivalent\n     * property values, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * **Note:** Multiple values can be checked by combining several matchers\n     * using `_.overSome`\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n     *\n     * // Checking for several possible values\n     * _.filter(users, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matches(source) {\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between the\n     * value at `path` of a given object to `srcValue`, returning `true` if the\n     * object value is equivalent, else `false`.\n     *\n     * **Note:** Partial comparisons will match empty array and empty object\n     * `srcValue` values against any array or object value, respectively. See\n     * `_.isEqual` for a list of supported value comparisons.\n     *\n     * **Note:** Multiple values can be checked by combining several matchers\n     * using `_.overSome`\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.find(objects, _.matchesProperty('a', 4));\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\n     *\n     * // Checking for several possible values\n     * _.filter(users, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matchesProperty(path, srcValue) {\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that invokes the method at `path` of a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': _.constant(2) } },\n     *   { 'a': { 'b': _.constant(1) } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(objects, _.method(['a', 'b']));\n     * // => [2, 1]\n     */\n    var method = baseRest(function(path, args) {\n      return function(object) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path of `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */\n    var methodOf = baseRest(function(object, args) {\n      return function(path) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * Adds all own enumerable string keyed function properties of a source\n     * object to the destination object. If `object` is a function, then methods\n     * are added to its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */\n    function mixin(object, source, options) {\n      var props = keys(source),\n          methodNames = baseFunctions(source, props);\n\n      if (options == null &&\n          !(isObject(source) && (methodNames.length || !props.length))) {\n        options = source;\n        source = object;\n        object = this;\n        methodNames = baseFunctions(source, keys(source));\n      }\n      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n          isFunc = isFunction(object);\n\n      arrayEach(methodNames, function(methodName) {\n        var func = source[methodName];\n        object[methodName] = func;\n        if (isFunc) {\n          object.prototype[methodName] = function() {\n            var chainAll = this.__chain__;\n            if (chain || chainAll) {\n              var result = object(this.__wrapped__),\n                  actions = result.__actions__ = copyArray(this.__actions__);\n\n              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n              result.__chain__ = chainAll;\n              return result;\n            }\n            return func.apply(object, arrayPush([this.value()], arguments));\n          };\n        }\n      });\n\n      return object;\n    }\n\n    /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      if (root._ === this) {\n        root._ = oldDash;\n      }\n      return this;\n    }\n\n    /**\n     * This method returns `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Util\n     * @example\n     *\n     * _.times(2, _.noop);\n     * // => [undefined, undefined]\n     */\n    function noop() {\n      // No operation performed.\n    }\n\n    /**\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\n     * the nth argument from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [n=0] The index of the argument to return.\n     * @returns {Function} Returns the new pass-thru function.\n     * @example\n     *\n     * var func = _.nthArg(1);\n     * func('a', 'b', 'c', 'd');\n     * // => 'b'\n     *\n     * var func = _.nthArg(-2);\n     * func('a', 'b', 'c', 'd');\n     * // => 'c'\n     */\n    function nthArg(n) {\n      n = toInteger(n);\n      return baseRest(function(args) {\n        return baseNth(args, n);\n      });\n    }\n\n    /**\n     * Creates a function that invokes `iteratees` with the arguments it receives\n     * and returns their results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.over([Math.max, Math.min]);\n     *\n     * func(1, 2, 3, 4);\n     * // => [4, 1]\n     */\n    var over = createOver(arrayMap);\n\n    /**\n     * Creates a function that checks if **all** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * Following shorthands are possible for providing predicates.\n     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.\n     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overEvery([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => false\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overEvery = createOver(arrayEvery);\n\n    /**\n     * Creates a function that checks if **any** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * Following shorthands are possible for providing predicates.\n     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.\n     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overSome([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => true\n     *\n     * func(NaN);\n     * // => false\n     *\n     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])\n     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])\n     */\n    var overSome = createOver(arraySome);\n\n    /**\n     * Creates a function that returns the value at `path` of a given object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': 2 } },\n     *   { 'a': { 'b': 1 } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n     * // => [1, 2]\n     */\n    function property(path) {\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n    }\n\n    /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the value at a given path of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */\n    function propertyOf(object) {\n      return function(path) {\n        return object == null ? undefined : baseGet(object, path);\n      };\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\n     * it's set to `start` with `start` then set to `0`.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.rangeRight\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(-4);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    var range = createRange();\n\n    /**\n     * This method is like `_.range` except that it populates values in\n     * descending order.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.range\n     * @example\n     *\n     * _.rangeRight(4);\n     * // => [3, 2, 1, 0]\n     *\n     * _.rangeRight(-4);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 5);\n     * // => [4, 3, 2, 1]\n     *\n     * _.rangeRight(0, 20, 5);\n     * // => [15, 10, 5, 0]\n     *\n     * _.rangeRight(0, -4, -1);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.rangeRight(0);\n     * // => []\n     */\n    var rangeRight = createRange(true);\n\n    /**\n     * This method returns a new empty array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Array} Returns the new empty array.\n     * @example\n     *\n     * var arrays = _.times(2, _.stubArray);\n     *\n     * console.log(arrays);\n     * // => [[], []]\n     *\n     * console.log(arrays[0] === arrays[1]);\n     * // => false\n     */\n    function stubArray() {\n      return [];\n    }\n\n    /**\n     * This method returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `false`.\n     * @example\n     *\n     * _.times(2, _.stubFalse);\n     * // => [false, false]\n     */\n    function stubFalse() {\n      return false;\n    }\n\n    /**\n     * This method returns a new empty object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Object} Returns the new empty object.\n     * @example\n     *\n     * var objects = _.times(2, _.stubObject);\n     *\n     * console.log(objects);\n     * // => [{}, {}]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => false\n     */\n    function stubObject() {\n      return {};\n    }\n\n    /**\n     * This method returns an empty string.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {string} Returns the empty string.\n     * @example\n     *\n     * _.times(2, _.stubString);\n     * // => ['', '']\n     */\n    function stubString() {\n      return '';\n    }\n\n    /**\n     * This method returns `true`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `true`.\n     * @example\n     *\n     * _.times(2, _.stubTrue);\n     * // => [true, true]\n     */\n    function stubTrue() {\n      return true;\n    }\n\n    /**\n     * Invokes the iteratee `n` times, returning an array of the results of\n     * each invocation. The iteratee is invoked with one argument; (index).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.times(3, String);\n     * // => ['0', '1', '2']\n     *\n     *  _.times(4, _.constant(0));\n     * // => [0, 0, 0, 0]\n     */\n    function times(n, iteratee) {\n      n = toInteger(n);\n      if (n < 1 || n > MAX_SAFE_INTEGER) {\n        return [];\n      }\n      var index = MAX_ARRAY_LENGTH,\n          length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n      iteratee = getIteratee(iteratee);\n      n -= MAX_ARRAY_LENGTH;\n\n      var result = baseTimes(length, iteratee);\n      while (++index < n) {\n        iteratee(index);\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a property path array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the new property path array.\n     * @example\n     *\n     * _.toPath('a.b.c');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toPath('a[0].b.c');\n     * // => ['a', '0', 'b', 'c']\n     */\n    function toPath(value) {\n      if (isArray(value)) {\n        return arrayMap(value, toKey);\n      }\n      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {string} [prefix=''] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return toString(prefix) + id;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {number} augend The first number in an addition.\n     * @param {number} addend The second number in an addition.\n     * @returns {number} Returns the total.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */\n    var add = createMathOperation(function(augend, addend) {\n      return augend + addend;\n    }, 0);\n\n    /**\n     * Computes `number` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */\n    var ceil = createRound('ceil');\n\n    /**\n     * Divide two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} dividend The first number in a division.\n     * @param {number} divisor The second number in a division.\n     * @returns {number} Returns the quotient.\n     * @example\n     *\n     * _.divide(6, 4);\n     * // => 1.5\n     */\n    var divide = createMathOperation(function(dividend, divisor) {\n      return dividend / divisor;\n    }, 1);\n\n    /**\n     * Computes `number` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */\n    var floor = createRound('floor');\n\n    /**\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => undefined\n     */\n    function max(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseGt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.max` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.maxBy(objects, function(o) { return o.n; });\n     * // => { 'n': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.maxBy(objects, 'n');\n     * // => { 'n': 2 }\n     */\n    function maxBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\n        : undefined;\n    }\n\n    /**\n     * Computes the mean of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * _.mean([4, 2, 8, 6]);\n     * // => 5\n     */\n    function mean(array) {\n      return baseMean(array, identity);\n    }\n\n    /**\n     * This method is like `_.mean` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be averaged.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.meanBy(objects, function(o) { return o.n; });\n     * // => 5\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.meanBy(objects, 'n');\n     * // => 5\n     */\n    function meanBy(array, iteratee) {\n      return baseMean(array, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => undefined\n     */\n    function min(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseLt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.min` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.minBy(objects, function(o) { return o.n; });\n     * // => { 'n': 1 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.minBy(objects, 'n');\n     * // => { 'n': 1 }\n     */\n    function minBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\n        : undefined;\n    }\n\n    /**\n     * Multiply two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} multiplier The first number in a multiplication.\n     * @param {number} multiplicand The second number in a multiplication.\n     * @returns {number} Returns the product.\n     * @example\n     *\n     * _.multiply(6, 4);\n     * // => 24\n     */\n    var multiply = createMathOperation(function(multiplier, multiplicand) {\n      return multiplier * multiplicand;\n    }, 1);\n\n    /**\n     * Computes `number` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */\n    var round = createRound('round');\n\n    /**\n     * Subtract two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {number} minuend The first number in a subtraction.\n     * @param {number} subtrahend The second number in a subtraction.\n     * @returns {number} Returns the difference.\n     * @example\n     *\n     * _.subtract(6, 4);\n     * // => 2\n     */\n    var subtract = createMathOperation(function(minuend, subtrahend) {\n      return minuend - subtrahend;\n    }, 0);\n\n    /**\n     * Computes the sum of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 2, 8, 6]);\n     * // => 20\n     */\n    function sum(array) {\n      return (array && array.length)\n        ? baseSum(array, identity)\n        : 0;\n    }\n\n    /**\n     * This method is like `_.sum` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be summed.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.sumBy(objects, function(o) { return o.n; });\n     * // => 20\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sumBy(objects, 'n');\n     * // => 20\n     */\n    function sumBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSum(array, getIteratee(iteratee, 2))\n        : 0;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return wrapped values in chain sequences.\n    lodash.after = after;\n    lodash.ary = ary;\n    lodash.assign = assign;\n    lodash.assignIn = assignIn;\n    lodash.assignInWith = assignInWith;\n    lodash.assignWith = assignWith;\n    lodash.at = at;\n    lodash.before = before;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.castArray = castArray;\n    lodash.chain = chain;\n    lodash.chunk = chunk;\n    lodash.compact = compact;\n    lodash.concat = concat;\n    lodash.cond = cond;\n    lodash.conforms = conforms;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.curry = curry;\n    lodash.curryRight = curryRight;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defaultsDeep = defaultsDeep;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.differenceBy = differenceBy;\n    lodash.differenceWith = differenceWith;\n    lodash.drop = drop;\n    lodash.dropRight = dropRight;\n    lodash.dropRightWhile = dropRightWhile;\n    lodash.dropWhile = dropWhile;\n    lodash.fill = fill;\n    lodash.filter = filter;\n    lodash.flatMap = flatMap;\n    lodash.flatMapDeep = flatMapDeep;\n    lodash.flatMapDepth = flatMapDepth;\n    lodash.flatten = flatten;\n    lodash.flattenDeep = flattenDeep;\n    lodash.flattenDepth = flattenDepth;\n    lodash.flip = flip;\n    lodash.flow = flow;\n    lodash.flowRight = flowRight;\n    lodash.fromPairs = fromPairs;\n    lodash.functions = functions;\n    lodash.functionsIn = functionsIn;\n    lodash.groupBy = groupBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.intersectionBy = intersectionBy;\n    lodash.intersectionWith = intersectionWith;\n    lodash.invert = invert;\n    lodash.invertBy = invertBy;\n    lodash.invokeMap = invokeMap;\n    lodash.iteratee = iteratee;\n    lodash.keyBy = keyBy;\n    lodash.keys = keys;\n    lodash.keysIn = keysIn;\n    lodash.map = map;\n    lodash.mapKeys = mapKeys;\n    lodash.mapValues = mapValues;\n    lodash.matches = matches;\n    lodash.matchesProperty = matchesProperty;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.mergeWith = mergeWith;\n    lodash.method = method;\n    lodash.methodOf = methodOf;\n    lodash.mixin = mixin;\n    lodash.negate = negate;\n    lodash.nthArg = nthArg;\n    lodash.omit = omit;\n    lodash.omitBy = omitBy;\n    lodash.once = once;\n    lodash.orderBy = orderBy;\n    lodash.over = over;\n    lodash.overArgs = overArgs;\n    lodash.overEvery = overEvery;\n    lodash.overSome = overSome;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.partition = partition;\n    lodash.pick = pick;\n    lodash.pickBy = pickBy;\n    lodash.property = property;\n    lodash.propertyOf = propertyOf;\n    lodash.pull = pull;\n    lodash.pullAll = pullAll;\n    lodash.pullAllBy = pullAllBy;\n    lodash.pullAllWith = pullAllWith;\n    lodash.pullAt = pullAt;\n    lodash.range = range;\n    lodash.rangeRight = rangeRight;\n    lodash.rearg = rearg;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.reverse = reverse;\n    lodash.sampleSize = sampleSize;\n    lodash.set = set;\n    lodash.setWith = setWith;\n    lodash.shuffle = shuffle;\n    lodash.slice = slice;\n    lodash.sortBy = sortBy;\n    lodash.sortedUniq = sortedUniq;\n    lodash.sortedUniqBy = sortedUniqBy;\n    lodash.split = split;\n    lodash.spread = spread;\n    lodash.tail = tail;\n    lodash.take = take;\n    lodash.takeRight = takeRight;\n    lodash.takeRightWhile = takeRightWhile;\n    lodash.takeWhile = takeWhile;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.thru = thru;\n    lodash.toArray = toArray;\n    lodash.toPairs = toPairs;\n    lodash.toPairsIn = toPairsIn;\n    lodash.toPath = toPath;\n    lodash.toPlainObject = toPlainObject;\n    lodash.transform = transform;\n    lodash.unary = unary;\n    lodash.union = union;\n    lodash.unionBy = unionBy;\n    lodash.unionWith = unionWith;\n    lodash.uniq = uniq;\n    lodash.uniqBy = uniqBy;\n    lodash.uniqWith = uniqWith;\n    lodash.unset = unset;\n    lodash.unzip = unzip;\n    lodash.unzipWith = unzipWith;\n    lodash.update = update;\n    lodash.updateWith = updateWith;\n    lodash.values = values;\n    lodash.valuesIn = valuesIn;\n    lodash.without = without;\n    lodash.words = words;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.xorBy = xorBy;\n    lodash.xorWith = xorWith;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n    lodash.zipObjectDeep = zipObjectDeep;\n    lodash.zipWith = zipWith;\n\n    // Add aliases.\n    lodash.entries = toPairs;\n    lodash.entriesIn = toPairsIn;\n    lodash.extend = assignIn;\n    lodash.extendWith = assignInWith;\n\n    // Add methods to `lodash.prototype`.\n    mixin(lodash, lodash);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return unwrapped values in chain sequences.\n    lodash.add = add;\n    lodash.attempt = attempt;\n    lodash.camelCase = camelCase;\n    lodash.capitalize = capitalize;\n    lodash.ceil = ceil;\n    lodash.clamp = clamp;\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.cloneDeepWith = cloneDeepWith;\n    lodash.cloneWith = cloneWith;\n    lodash.conformsTo = conformsTo;\n    lodash.deburr = deburr;\n    lodash.defaultTo = defaultTo;\n    lodash.divide = divide;\n    lodash.endsWith = endsWith;\n    lodash.eq = eq;\n    lodash.escape = escape;\n    lodash.escapeRegExp = escapeRegExp;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.floor = floor;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.get = get;\n    lodash.gt = gt;\n    lodash.gte = gte;\n    lodash.has = has;\n    lodash.hasIn = hasIn;\n    lodash.head = head;\n    lodash.identity = identity;\n    lodash.includes = includes;\n    lodash.indexOf = indexOf;\n    lodash.inRange = inRange;\n    lodash.invoke = invoke;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isArrayBuffer = isArrayBuffer;\n    lodash.isArrayLike = isArrayLike;\n    lodash.isArrayLikeObject = isArrayLikeObject;\n    lodash.isBoolean = isBoolean;\n    lodash.isBuffer = isBuffer;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isEqualWith = isEqualWith;\n    lodash.isError = isError;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isInteger = isInteger;\n    lodash.isLength = isLength;\n    lodash.isMap = isMap;\n    lodash.isMatch = isMatch;\n    lodash.isMatchWith = isMatchWith;\n    lodash.isNaN = isNaN;\n    lodash.isNative = isNative;\n    lodash.isNil = isNil;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isObjectLike = isObjectLike;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isSafeInteger = isSafeInteger;\n    lodash.isSet = isSet;\n    lodash.isString = isString;\n    lodash.isSymbol = isSymbol;\n    lodash.isTypedArray = isTypedArray;\n    lodash.isUndefined = isUndefined;\n    lodash.isWeakMap = isWeakMap;\n    lodash.isWeakSet = isWeakSet;\n    lodash.join = join;\n    lodash.kebabCase = kebabCase;\n    lodash.last = last;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.lowerCase = lowerCase;\n    lodash.lowerFirst = lowerFirst;\n    lodash.lt = lt;\n    lodash.lte = lte;\n    lodash.max = max;\n    lodash.maxBy = maxBy;\n    lodash.mean = mean;\n    lodash.meanBy = meanBy;\n    lodash.min = min;\n    lodash.minBy = minBy;\n    lodash.stubArray = stubArray;\n    lodash.stubFalse = stubFalse;\n    lodash.stubObject = stubObject;\n    lodash.stubString = stubString;\n    lodash.stubTrue = stubTrue;\n    lodash.multiply = multiply;\n    lodash.nth = nth;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.pad = pad;\n    lodash.padEnd = padEnd;\n    lodash.padStart = padStart;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.repeat = repeat;\n    lodash.replace = replace;\n    lodash.result = result;\n    lodash.round = round;\n    lodash.runInContext = runInContext;\n    lodash.sample = sample;\n    lodash.size = size;\n    lodash.snakeCase = snakeCase;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.sortedIndexBy = sortedIndexBy;\n    lodash.sortedIndexOf = sortedIndexOf;\n    lodash.sortedLastIndex = sortedLastIndex;\n    lodash.sortedLastIndexBy = sortedLastIndexBy;\n    lodash.sortedLastIndexOf = sortedLastIndexOf;\n    lodash.startCase = startCase;\n    lodash.startsWith = startsWith;\n    lodash.subtract = subtract;\n    lodash.sum = sum;\n    lodash.sumBy = sumBy;\n    lodash.template = template;\n    lodash.times = times;\n    lodash.toFinite = toFinite;\n    lodash.toInteger = toInteger;\n    lodash.toLength = toLength;\n    lodash.toLower = toLower;\n    lodash.toNumber = toNumber;\n    lodash.toSafeInteger = toSafeInteger;\n    lodash.toString = toString;\n    lodash.toUpper = toUpper;\n    lodash.trim = trim;\n    lodash.trimEnd = trimEnd;\n    lodash.trimStart = trimStart;\n    lodash.truncate = truncate;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n    lodash.upperCase = upperCase;\n    lodash.upperFirst = upperFirst;\n\n    // Add aliases.\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.first = head;\n\n    mixin(lodash, (function() {\n      var source = {};\n      baseForOwn(lodash, function(func, methodName) {\n        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }()), { 'chain': false });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type {string}\n     */\n    lodash.VERSION = VERSION;\n\n    // Assign default placeholders.\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n      lodash[methodName].placeholder = lodash;\n    });\n\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n    arrayEach(['drop', 'take'], function(methodName, index) {\n      LazyWrapper.prototype[methodName] = function(n) {\n        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n\n        var result = (this.__filtered__ && !index)\n          ? new LazyWrapper(this)\n          : this.clone();\n\n        if (result.__filtered__) {\n          result.__takeCount__ = nativeMin(n, result.__takeCount__);\n        } else {\n          result.__views__.push({\n            'size': nativeMin(n, MAX_ARRAY_LENGTH),\n            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n          });\n        }\n        return result;\n      };\n\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n        return this.reverse()[methodName](n).reverse();\n      };\n    });\n\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n      var type = index + 1,\n          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n\n      LazyWrapper.prototype[methodName] = function(iteratee) {\n        var result = this.clone();\n        result.__iteratees__.push({\n          'iteratee': getIteratee(iteratee, 3),\n          'type': type\n        });\n        result.__filtered__ = result.__filtered__ || isFilter;\n        return result;\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.\n    arrayEach(['head', 'last'], function(methodName, index) {\n      var takeName = 'take' + (index ? 'Right' : '');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this[takeName](1).value()[0];\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n    arrayEach(['initial', 'tail'], function(methodName, index) {\n      var dropName = 'drop' + (index ? '' : 'Right');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n      };\n    });\n\n    LazyWrapper.prototype.compact = function() {\n      return this.filter(identity);\n    };\n\n    LazyWrapper.prototype.find = function(predicate) {\n      return this.filter(predicate).head();\n    };\n\n    LazyWrapper.prototype.findLast = function(predicate) {\n      return this.reverse().find(predicate);\n    };\n\n    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n      if (typeof path == 'function') {\n        return new LazyWrapper(this);\n      }\n      return this.map(function(value) {\n        return baseInvoke(value, path, args);\n      });\n    });\n\n    LazyWrapper.prototype.reject = function(predicate) {\n      return this.filter(negate(getIteratee(predicate)));\n    };\n\n    LazyWrapper.prototype.slice = function(start, end) {\n      start = toInteger(start);\n\n      var result = this;\n      if (result.__filtered__ && (start > 0 || end < 0)) {\n        return new LazyWrapper(result);\n      }\n      if (start < 0) {\n        result = result.takeRight(-start);\n      } else if (start) {\n        result = result.drop(start);\n      }\n      if (end !== undefined) {\n        end = toInteger(end);\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n      }\n      return result;\n    };\n\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {\n      return this.reverse().takeWhile(predicate).reverse();\n    };\n\n    LazyWrapper.prototype.toArray = function() {\n      return this.take(MAX_ARRAY_LENGTH);\n    };\n\n    // Add `LazyWrapper` methods to `lodash.prototype`.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n          isTaker = /^(?:head|last)$/.test(methodName),\n          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n          retUnwrapped = isTaker || /^find/.test(methodName);\n\n      if (!lodashFunc) {\n        return;\n      }\n      lodash.prototype[methodName] = function() {\n        var value = this.__wrapped__,\n            args = isTaker ? [1] : arguments,\n            isLazy = value instanceof LazyWrapper,\n            iteratee = args[0],\n            useLazy = isLazy || isArray(value);\n\n        var interceptor = function(value) {\n          var result = lodashFunc.apply(lodash, arrayPush([value], args));\n          return (isTaker && chainAll) ? result[0] : result;\n        };\n\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n          isLazy = useLazy = false;\n        }\n        var chainAll = this.__chain__,\n            isHybrid = !!this.__actions__.length,\n            isUnwrapped = retUnwrapped && !chainAll,\n            onlyLazy = isLazy && !isHybrid;\n\n        if (!retUnwrapped && useLazy) {\n          value = onlyLazy ? value : new LazyWrapper(this);\n          var result = func.apply(value, args);\n          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n          return new LodashWrapper(result, chainAll);\n        }\n        if (isUnwrapped && onlyLazy) {\n          return func.apply(this, args);\n        }\n        result = this.thru(interceptor);\n        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n      };\n    });\n\n    // Add `Array` methods to `lodash.prototype`.\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n      var func = arrayProto[methodName],\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n\n      lodash.prototype[methodName] = function() {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n          var value = this.value();\n          return func.apply(isArray(value) ? value : [], args);\n        }\n        return this[chainName](function(value) {\n          return func.apply(isArray(value) ? value : [], args);\n        });\n      };\n    });\n\n    // Map minified method names to their real names.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var lodashFunc = lodash[methodName];\n      if (lodashFunc) {\n        var key = lodashFunc.name + '';\n        if (!hasOwnProperty.call(realNames, key)) {\n          realNames[key] = [];\n        }\n        realNames[key].push({ 'name': methodName, 'func': lodashFunc });\n      }\n    });\n\n    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{\n      'name': 'wrapper',\n      'func': undefined\n    }];\n\n    // Add methods to `LazyWrapper`.\n    LazyWrapper.prototype.clone = lazyClone;\n    LazyWrapper.prototype.reverse = lazyReverse;\n    LazyWrapper.prototype.value = lazyValue;\n\n    // Add chain sequence methods to the `lodash` wrapper.\n    lodash.prototype.at = wrapperAt;\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.commit = wrapperCommit;\n    lodash.prototype.next = wrapperNext;\n    lodash.prototype.plant = wrapperPlant;\n    lodash.prototype.reverse = wrapperReverse;\n    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n\n    // Add lazy aliases.\n    lodash.prototype.first = lodash.prototype.head;\n\n    if (symIterator) {\n      lodash.prototype[symIterator] = wrapperToIterator;\n    }\n    return lodash;\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export lodash.\n  var _ = runInContext();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\n  if (true) {\n    // Expose Lodash on the global object to prevent errors when Lodash is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    // Use `_.noConflict` to remove Lodash from the global object.\n    root._ = _;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return _;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n  // Check for `exports` after `define` in case a build optimizer adds it.\n  else {}\n}.call(this));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))\n\n//# sourceURL=webpack:///./node_modules/astar-typescript-cost/node_modules/lodash/lodash.js?");

/***/ }),

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/path-browserify/index.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/twig/twig.js":
/*!***********************************!*\
  !*** ./node_modules/twig/twig.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(global, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 5);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = function sprintf() {\n  //  discuss at: http://locutus.io/php/sprintf/\n  // original by: Ash Searle (http://hexmen.com/blog/)\n  // improved by: Michael White (http://getsprink.com)\n  // improved by: Jack\n  // improved by: Kevin van Zonneveld (http://kvz.io)\n  // improved by: Kevin van Zonneveld (http://kvz.io)\n  // improved by: Kevin van Zonneveld (http://kvz.io)\n  // improved by: Dj\n  // improved by: Allidylls\n  //    input by: Paulo Freitas\n  //    input by: Brett Zamir (http://brett-zamir.me)\n  // improved by: Rafał Kukawski (http://kukawski.pl)\n  //   example 1: sprintf(\"%01.2f\", 123.1)\n  //   returns 1: '123.10'\n  //   example 2: sprintf(\"[%10s]\", 'monkey')\n  //   returns 2: '[    monkey]'\n  //   example 3: sprintf(\"[%'#10s]\", 'monkey')\n  //   returns 3: '[####monkey]'\n  //   example 4: sprintf(\"%d\", 123456789012345)\n  //   returns 4: '123456789012345'\n  //   example 5: sprintf('%-03s', 'E')\n  //   returns 5: 'E00'\n  //   example 6: sprintf('%+010d', 9)\n  //   returns 6: '+000000009'\n  //   example 7: sprintf('%+0\\'@10d', 9)\n  //   returns 7: '@@@@@@@@+9'\n  //   example 8: sprintf('%.f', 3.14)\n  //   returns 8: '3.140000'\n  //   example 9: sprintf('%% %2$d', 1, 2)\n  //   returns 9: '% 2'\n\n  var regex = /%%|%(?:(\\d+)\\$)?((?:[-+#0 ]|'[\\s\\S])*)(\\d+)?(?:\\.(\\d*))?([\\s\\S])/g;\n  var args = arguments;\n  var i = 0;\n  var format = args[i++];\n\n  var _pad = function _pad(str, len, chr, leftJustify) {\n    if (!chr) {\n      chr = ' ';\n    }\n    var padding = str.length >= len ? '' : new Array(1 + len - str.length >>> 0).join(chr);\n    return leftJustify ? str + padding : padding + str;\n  };\n\n  var justify = function justify(value, prefix, leftJustify, minWidth, padChar) {\n    var diff = minWidth - value.length;\n    if (diff > 0) {\n      // when padding with zeros\n      // on the left side\n      // keep sign (+ or -) in front\n      if (!leftJustify && padChar === '0') {\n        value = [value.slice(0, prefix.length), _pad('', diff, '0', true), value.slice(prefix.length)].join('');\n      } else {\n        value = _pad(value, minWidth, padChar, leftJustify);\n      }\n    }\n    return value;\n  };\n\n  var _formatBaseX = function _formatBaseX(value, base, leftJustify, minWidth, precision, padChar) {\n    // Note: casts negative numbers to positive ones\n    var number = value >>> 0;\n    value = _pad(number.toString(base), precision || 0, '0', false);\n    return justify(value, '', leftJustify, minWidth, padChar);\n  };\n\n  // _formatString()\n  var _formatString = function _formatString(value, leftJustify, minWidth, precision, customPadChar) {\n    if (precision !== null && precision !== undefined) {\n      value = value.slice(0, precision);\n    }\n    return justify(value, '', leftJustify, minWidth, customPadChar);\n  };\n\n  // doFormat()\n  var doFormat = function doFormat(substring, argIndex, modifiers, minWidth, precision, specifier) {\n    var number, prefix, method, textTransform, value;\n\n    if (substring === '%%') {\n      return '%';\n    }\n\n    // parse modifiers\n    var padChar = ' '; // pad with spaces by default\n    var leftJustify = false;\n    var positiveNumberPrefix = '';\n    var j, l;\n\n    for (j = 0, l = modifiers.length; j < l; j++) {\n      switch (modifiers.charAt(j)) {\n        case ' ':\n        case '0':\n          padChar = modifiers.charAt(j);\n          break;\n        case '+':\n          positiveNumberPrefix = '+';\n          break;\n        case '-':\n          leftJustify = true;\n          break;\n        case \"'\":\n          if (j + 1 < l) {\n            padChar = modifiers.charAt(j + 1);\n            j++;\n          }\n          break;\n      }\n    }\n\n    if (!minWidth) {\n      minWidth = 0;\n    } else {\n      minWidth = +minWidth;\n    }\n\n    if (!isFinite(minWidth)) {\n      throw new Error('Width must be finite');\n    }\n\n    if (!precision) {\n      precision = specifier === 'd' ? 0 : 'fFeE'.indexOf(specifier) > -1 ? 6 : undefined;\n    } else {\n      precision = +precision;\n    }\n\n    if (argIndex && +argIndex === 0) {\n      throw new Error('Argument number must be greater than zero');\n    }\n\n    if (argIndex && +argIndex >= args.length) {\n      throw new Error('Too few arguments');\n    }\n\n    value = argIndex ? args[+argIndex] : args[i++];\n\n    switch (specifier) {\n      case '%':\n        return '%';\n      case 's':\n        return _formatString(value + '', leftJustify, minWidth, precision, padChar);\n      case 'c':\n        return _formatString(String.fromCharCode(+value), leftJustify, minWidth, precision, padChar);\n      case 'b':\n        return _formatBaseX(value, 2, leftJustify, minWidth, precision, padChar);\n      case 'o':\n        return _formatBaseX(value, 8, leftJustify, minWidth, precision, padChar);\n      case 'x':\n        return _formatBaseX(value, 16, leftJustify, minWidth, precision, padChar);\n      case 'X':\n        return _formatBaseX(value, 16, leftJustify, minWidth, precision, padChar).toUpperCase();\n      case 'u':\n        return _formatBaseX(value, 10, leftJustify, minWidth, precision, padChar);\n      case 'i':\n      case 'd':\n        number = +value || 0;\n        // Plain Math.round doesn't just truncate\n        number = Math.round(number - number % 1);\n        prefix = number < 0 ? '-' : positiveNumberPrefix;\n        value = prefix + _pad(String(Math.abs(number)), precision, '0', false);\n\n        if (leftJustify && padChar === '0') {\n          // can't right-pad 0s on integers\n          padChar = ' ';\n        }\n        return justify(value, prefix, leftJustify, minWidth, padChar);\n      case 'e':\n      case 'E':\n      case 'f': // @todo: Should handle locales (as per setlocale)\n      case 'F':\n      case 'g':\n      case 'G':\n        number = +value;\n        prefix = number < 0 ? '-' : positiveNumberPrefix;\n        method = ['toExponential', 'toFixed', 'toPrecision']['efg'.indexOf(specifier.toLowerCase())];\n        textTransform = ['toString', 'toUpperCase']['eEfFgG'.indexOf(specifier) % 2];\n        value = prefix + Math.abs(number)[method](precision);\n        return justify(value, prefix, leftJustify, minWidth, padChar)[textTransform]();\n      default:\n        // unknown specifier, consume that char and return empty\n        return '';\n    }\n  };\n\n  try {\n    return format.replace(regex, doFormat);\n  } catch (err) {\n    return false;\n  }\n};\n//# sourceMappingURL=sprintf.js.map\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\");\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * Twig.js\n *\n * @copyright 2011-2020 John Roepke and the Twig.js Contributors\n * @license   Available under the BSD 2-Clause License\n * @link      https://github.com/twigjs/twig.js\n */\nmodule.exports = __webpack_require__(6)();\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// ## twig.factory.js\n//\n// This file handles creating the Twig library\nmodule.exports = function factory() {\n  var Twig = {\n    VERSION: '1.14.0'\n  };\n\n  __webpack_require__(7)(Twig);\n\n  __webpack_require__(8)(Twig);\n\n  __webpack_require__(9)(Twig);\n\n  __webpack_require__(15)(Twig);\n\n  __webpack_require__(16)(Twig);\n\n  __webpack_require__(17)(Twig);\n\n  __webpack_require__(27)(Twig);\n\n  __webpack_require__(28)(Twig);\n\n  __webpack_require__(30)(Twig);\n\n  __webpack_require__(31)(Twig);\n\n  __webpack_require__(32)(Twig);\n\n  __webpack_require__(33)(Twig);\n\n  __webpack_require__(34)(Twig);\n\n  __webpack_require__(35)(Twig);\n\n  __webpack_require__(36)(Twig);\n\n  Twig.exports.factory = factory;\n  return Twig.exports;\n};\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __webpack_require__(0);\n\nvar _defineProperty2 = _interopRequireDefault(__webpack_require__(2));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// ## twig.core.js\n//\n// This file handles template level tokenizing, compiling and parsing.\nmodule.exports = function (Twig) {\n  'use strict';\n\n  Twig.trace = false;\n  Twig.debug = false; // Default caching to true for the improved performance it offers\n\n  Twig.cache = true;\n\n  Twig.noop = function () {};\n\n  Twig.merge = function (target, source, onlyChanged) {\n    Object.keys(source).forEach(function (key) {\n      if (onlyChanged && !(key in target)) {\n        return;\n      }\n\n      target[key] = source[key];\n    });\n    return target;\n  };\n  /**\n   * Exception thrown by twig.js.\n   */\n\n\n  Twig.Error = function (message, file) {\n    this.message = message;\n    this.name = 'TwigException';\n    this.type = 'TwigException';\n    this.file = file;\n  };\n  /**\n   * Get the string representation of a Twig error.\n   */\n\n\n  Twig.Error.prototype.toString = function () {\n    var output = this.name + ': ' + this.message;\n    return output;\n  };\n  /**\n   * Wrapper for logging to the console.\n   */\n\n\n  Twig.log = {\n    trace: function trace() {\n      if (Twig.trace && console) {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        console.log(Array.prototype.slice.call(args));\n      }\n    },\n    debug: function debug() {\n      if (Twig.debug && console) {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        console.log(Array.prototype.slice.call(args));\n      }\n    }\n  };\n\n  if (typeof console === 'undefined') {\n    Twig.log.error = function () {};\n  } else if (typeof console.error !== 'undefined') {\n    Twig.log.error = function () {\n      var _console;\n\n      (_console = console).error.apply(_console, arguments);\n    };\n  } else if (typeof console.log !== 'undefined') {\n    Twig.log.error = function () {\n      var _console2;\n\n      (_console2 = console).log.apply(_console2, arguments);\n    };\n  }\n  /**\n   * Container for methods related to handling high level template tokens\n   *      (for example: {{ expression }}, {% logic %}, {# comment #}, raw data)\n   */\n\n\n  Twig.token = {};\n  /**\n   * Token types.\n   */\n\n  Twig.token.type = {\n    output: 'output',\n    logic: 'logic',\n    comment: 'comment',\n    raw: 'raw',\n    outputWhitespacePre: 'output_whitespace_pre',\n    outputWhitespacePost: 'output_whitespace_post',\n    outputWhitespaceBoth: 'output_whitespace_both',\n    logicWhitespacePre: 'logic_whitespace_pre',\n    logicWhitespacePost: 'logic_whitespace_post',\n    logicWhitespaceBoth: 'logic_whitespace_both'\n  };\n  /**\n   * Token syntax definitions.\n   */\n\n  Twig.token.definitions = [{\n    type: Twig.token.type.raw,\n    open: '{% raw %}',\n    close: '{% endraw %}'\n  }, {\n    type: Twig.token.type.raw,\n    open: '{% verbatim %}',\n    close: '{% endverbatim %}'\n  }, // *Whitespace type tokens*\n  //\n  // These typically take the form `{{- expression -}}` or `{{- expression }}` or `{{ expression -}}`.\n  {\n    type: Twig.token.type.outputWhitespacePre,\n    open: '{{-',\n    close: '}}'\n  }, {\n    type: Twig.token.type.outputWhitespacePost,\n    open: '{{',\n    close: '-}}'\n  }, {\n    type: Twig.token.type.outputWhitespaceBoth,\n    open: '{{-',\n    close: '-}}'\n  }, {\n    type: Twig.token.type.logicWhitespacePre,\n    open: '{%-',\n    close: '%}'\n  }, {\n    type: Twig.token.type.logicWhitespacePost,\n    open: '{%',\n    close: '-%}'\n  }, {\n    type: Twig.token.type.logicWhitespaceBoth,\n    open: '{%-',\n    close: '-%}'\n  }, // *Output type tokens*\n  //\n  // These typically take the form `{{ expression }}`.\n  {\n    type: Twig.token.type.output,\n    open: '{{',\n    close: '}}'\n  }, // *Logic type tokens*\n  //\n  // These typically take a form like `{% if expression %}` or `{% endif %}`\n  {\n    type: Twig.token.type.logic,\n    open: '{%',\n    close: '%}'\n  }, // *Comment type tokens*\n  //\n  // These take the form `{# anything #}`\n  {\n    type: Twig.token.type.comment,\n    open: '{#',\n    close: '#}'\n  }];\n  /**\n   * What characters start \"strings\" in token definitions. We need this to ignore token close\n   * strings inside an expression.\n   */\n\n  Twig.token.strings = ['\"', '\\''];\n\n  Twig.token.findStart = function (template) {\n    var output = {\n      position: null,\n      def: null\n    };\n    var closePosition = null;\n    var len = Twig.token.definitions.length;\n    var i;\n    var tokenTemplate;\n    var firstKeyPosition;\n    var closeKeyPosition;\n\n    for (i = 0; i < len; i++) {\n      tokenTemplate = Twig.token.definitions[i];\n      firstKeyPosition = template.indexOf(tokenTemplate.open);\n      closeKeyPosition = template.indexOf(tokenTemplate.close);\n      Twig.log.trace('Twig.token.findStart: ', 'Searching for ', tokenTemplate.open, ' found at ', firstKeyPosition); // Special handling for mismatched tokens\n\n      if (firstKeyPosition >= 0) {\n        // This token matches the template\n        if (tokenTemplate.open.length !== tokenTemplate.close.length) {\n          // This token has mismatched closing and opening tags\n          if (closeKeyPosition < 0) {\n            // This token's closing tag does not match the template\n            continue;\n          }\n        }\n      } // Does this token occur before any other types?\n\n\n      if (firstKeyPosition >= 0 && (output.position === null || firstKeyPosition < output.position)) {\n        output.position = firstKeyPosition;\n        output.def = tokenTemplate;\n        closePosition = closeKeyPosition;\n      } else if (firstKeyPosition >= 0 && output.position !== null && firstKeyPosition === output.position) {\n        /* This token exactly matches another token,\n        greedily match to check if this token has a greater specificity */\n        if (tokenTemplate.open.length > output.def.open.length) {\n          // This token's opening tag is more specific than the previous match\n          output.position = firstKeyPosition;\n          output.def = tokenTemplate;\n          closePosition = closeKeyPosition;\n        } else if (tokenTemplate.open.length === output.def.open.length) {\n          if (tokenTemplate.close.length > output.def.close.length) {\n            // This token's opening tag is as specific as the previous match,\n            // but the closing tag has greater specificity\n            if (closeKeyPosition >= 0 && closeKeyPosition < closePosition) {\n              // This token's closing tag exists in the template,\n              // and it occurs sooner than the previous match\n              output.position = firstKeyPosition;\n              output.def = tokenTemplate;\n              closePosition = closeKeyPosition;\n            }\n          } else if (closeKeyPosition >= 0 && closeKeyPosition < closePosition) {\n            // This token's closing tag is not more specific than the previous match,\n            // but it occurs sooner than the previous match\n            output.position = firstKeyPosition;\n            output.def = tokenTemplate;\n            closePosition = closeKeyPosition;\n          }\n        }\n      }\n    }\n\n    return output;\n  };\n\n  Twig.token.findEnd = function (template, tokenDef, start) {\n    var end = null;\n    var found = false;\n    var offset = 0; // String position variables\n\n    var strPos = null;\n    var strFound = null;\n    var pos = null;\n    var endOffset = null;\n    var thisStrPos = null;\n    var endStrPos = null; // For loop variables\n\n    var i;\n    var l;\n\n    while (!found) {\n      strPos = null;\n      strFound = null;\n      pos = template.indexOf(tokenDef.close, offset);\n\n      if (pos >= 0) {\n        end = pos;\n        found = true;\n      } else {\n        // Throw an exception\n        throw new Twig.Error('Unable to find closing bracket \\'' + tokenDef.close + '\\' opened near template position ' + start);\n      } // Ignore quotes within comments; just look for the next comment close sequence,\n      // regardless of what comes before it. https://github.com/justjohn/twig.js/issues/95\n\n\n      if (tokenDef.type === Twig.token.type.comment) {\n        break;\n      } // Ignore quotes within raw tag\n      // Fixes #283\n\n\n      if (tokenDef.type === Twig.token.type.raw) {\n        break;\n      }\n\n      l = Twig.token.strings.length;\n\n      for (i = 0; i < l; i += 1) {\n        thisStrPos = template.indexOf(Twig.token.strings[i], offset);\n\n        if (thisStrPos > 0 && thisStrPos < pos && (strPos === null || thisStrPos < strPos)) {\n          strPos = thisStrPos;\n          strFound = Twig.token.strings[i];\n        }\n      } // We found a string before the end of the token, now find the string's end and set the search offset to it\n\n\n      if (strPos !== null) {\n        endOffset = strPos + 1;\n        end = null;\n        found = false;\n\n        for (;;) {\n          endStrPos = template.indexOf(strFound, endOffset);\n\n          if (endStrPos < 0) {\n            throw Twig.Error('Unclosed string in template');\n          } // Ignore escaped quotes\n\n\n          if (template.slice(endStrPos - 1, endStrPos) === '\\\\') {\n            endOffset = endStrPos + 1;\n          } else {\n            offset = endStrPos + 1;\n            break;\n          }\n        }\n      }\n    }\n\n    return end;\n  };\n  /**\n   * Convert a template into high-level tokens.\n   */\n\n\n  Twig.tokenize = function (template) {\n    var tokens = []; // An offset for reporting errors locations in the template.\n\n    var errorOffset = 0; // The start and type of the first token found in the template.\n\n    var foundToken = null; // The end position of the matched token.\n\n    var end = null;\n\n    while (template.length > 0) {\n      // Find the first occurance of any token type in the template\n      foundToken = Twig.token.findStart(template);\n      Twig.log.trace('Twig.tokenize: ', 'Found token: ', foundToken);\n\n      if (foundToken.position === null) {\n        // No more tokens -> add the rest of the template as a raw-type token\n        tokens.push({\n          type: Twig.token.type.raw,\n          value: template\n        });\n        template = '';\n      } else {\n        // Add a raw type token for anything before the start of the token\n        if (foundToken.position > 0) {\n          tokens.push({\n            type: Twig.token.type.raw,\n            value: template.slice(0, Math.max(0, foundToken.position))\n          });\n        }\n\n        template = template.slice(foundToken.position + foundToken.def.open.length);\n        errorOffset += foundToken.position + foundToken.def.open.length; // Find the end of the token\n\n        end = Twig.token.findEnd(template, foundToken.def, errorOffset);\n        Twig.log.trace('Twig.tokenize: ', 'Token ends at ', end);\n        tokens.push({\n          type: foundToken.def.type,\n          value: template.slice(0, Math.max(0, end)).trim()\n        });\n\n        if (template.slice(end + foundToken.def.close.length, end + foundToken.def.close.length + 1) === '\\n') {\n          switch (foundToken.def.type) {\n            case 'logic_whitespace_pre':\n            case 'logic_whitespace_post':\n            case 'logic_whitespace_both':\n            case 'logic':\n              // Newlines directly after logic tokens are ignored\n              end += 1;\n              break;\n\n            default:\n              break;\n          }\n        }\n\n        template = template.slice(end + foundToken.def.close.length); // Increment the position in the template\n\n        errorOffset += end + foundToken.def.close.length;\n      }\n    }\n\n    return tokens;\n  };\n\n  Twig.compile = function (tokens) {\n    var self = this;\n\n    try {\n      // Output and intermediate stacks\n      var output = [];\n      var stack = []; // The tokens between open and close tags\n\n      var intermediateOutput = [];\n      var token = null;\n      var logicToken = null;\n      var unclosedToken = null; // Temporary previous token.\n\n      var prevToken = null; // Temporary previous output.\n\n      var prevOutput = null; // Temporary previous intermediate output.\n\n      var prevIntermediateOutput = null; // The previous token's template\n\n      var prevTemplate = null; // Token lookahead\n\n      var nextToken = null; // The output token\n\n      var tokOutput = null; // Logic Token values\n\n      var type = null;\n      var open = null;\n      var next = null;\n\n      var compileOutput = function compileOutput(token) {\n        Twig.expression.compile.call(self, token);\n\n        if (stack.length > 0) {\n          intermediateOutput.push(token);\n        } else {\n          output.push(token);\n        }\n      };\n\n      var compileLogic = function compileLogic(token) {\n        // Compile the logic token\n        logicToken = Twig.logic.compile.call(self, token);\n        type = logicToken.type;\n        open = Twig.logic.handler[type].open;\n        next = Twig.logic.handler[type].next;\n        Twig.log.trace('Twig.compile: ', 'Compiled logic token to ', logicToken, ' next is: ', next, ' open is : ', open); // Not a standalone token, check logic stack to see if this is expected\n\n        if (open !== undefined && !open) {\n          prevToken = stack.pop();\n          prevTemplate = Twig.logic.handler[prevToken.type];\n\n          if (!prevTemplate.next.includes(type)) {\n            throw new Error(type + ' not expected after a ' + prevToken.type);\n          }\n\n          prevToken.output = prevToken.output || [];\n          prevToken.output = prevToken.output.concat(intermediateOutput);\n          intermediateOutput = [];\n          tokOutput = {\n            type: Twig.token.type.logic,\n            token: prevToken\n          };\n\n          if (stack.length > 0) {\n            intermediateOutput.push(tokOutput);\n          } else {\n            output.push(tokOutput);\n          }\n        } // This token requires additional tokens to complete the logic structure.\n\n\n        if (next !== undefined && next.length > 0) {\n          Twig.log.trace('Twig.compile: ', 'Pushing ', logicToken, ' to logic stack.');\n\n          if (stack.length > 0) {\n            // Put any currently held output into the output list of the logic operator\n            // currently at the head of the stack before we push a new one on.\n            prevToken = stack.pop();\n            prevToken.output = prevToken.output || [];\n            prevToken.output = prevToken.output.concat(intermediateOutput);\n            stack.push(prevToken);\n            intermediateOutput = [];\n          } // Push the new logic token onto the logic stack\n\n\n          stack.push(logicToken);\n        } else if (open !== undefined && open) {\n          tokOutput = {\n            type: Twig.token.type.logic,\n            token: logicToken\n          }; // Standalone token (like {% set ... %}\n\n          if (stack.length > 0) {\n            intermediateOutput.push(tokOutput);\n          } else {\n            output.push(tokOutput);\n          }\n        }\n      };\n\n      while (tokens.length > 0) {\n        token = tokens.shift();\n        prevOutput = output[output.length - 1];\n        prevIntermediateOutput = intermediateOutput[intermediateOutput.length - 1];\n        nextToken = tokens[0];\n        Twig.log.trace('Compiling token ', token);\n\n        switch (token.type) {\n          case Twig.token.type.raw:\n            if (stack.length > 0) {\n              intermediateOutput.push(token);\n            } else {\n              output.push(token);\n            }\n\n            break;\n\n          case Twig.token.type.logic:\n            compileLogic.call(self, token);\n            break;\n          // Do nothing, comments should be ignored\n\n          case Twig.token.type.comment:\n            break;\n\n          case Twig.token.type.output:\n            compileOutput.call(self, token);\n            break;\n          // Kill whitespace ahead and behind this token\n\n          case Twig.token.type.logicWhitespacePre:\n          case Twig.token.type.logicWhitespacePost:\n          case Twig.token.type.logicWhitespaceBoth:\n          case Twig.token.type.outputWhitespacePre:\n          case Twig.token.type.outputWhitespacePost:\n          case Twig.token.type.outputWhitespaceBoth:\n            if (token.type !== Twig.token.type.outputWhitespacePost && token.type !== Twig.token.type.logicWhitespacePost) {\n              if (prevOutput) {\n                // If the previous output is raw, pop it off\n                if (prevOutput.type === Twig.token.type.raw) {\n                  output.pop();\n                  prevOutput.value = prevOutput.value.trimEnd(); // Repush the previous output\n\n                  output.push(prevOutput);\n                }\n              }\n\n              if (prevIntermediateOutput) {\n                // If the previous intermediate output is raw, pop it off\n                if (prevIntermediateOutput.type === Twig.token.type.raw) {\n                  intermediateOutput.pop();\n                  prevIntermediateOutput.value = prevIntermediateOutput.value.trimEnd(); // Repush the previous intermediate output\n\n                  intermediateOutput.push(prevIntermediateOutput);\n                }\n              }\n            } // Compile this token\n\n\n            switch (token.type) {\n              case Twig.token.type.outputWhitespacePre:\n              case Twig.token.type.outputWhitespacePost:\n              case Twig.token.type.outputWhitespaceBoth:\n                compileOutput.call(self, token);\n                break;\n\n              case Twig.token.type.logicWhitespacePre:\n              case Twig.token.type.logicWhitespacePost:\n              case Twig.token.type.logicWhitespaceBoth:\n                compileLogic.call(self, token);\n                break;\n\n              default:\n                break;\n            }\n\n            if (token.type !== Twig.token.type.outputWhitespacePre && token.type !== Twig.token.type.logicWhitespacePre) {\n              if (nextToken) {\n                // If the next token is raw, shift it out\n                if (nextToken.type === Twig.token.type.raw) {\n                  tokens.shift();\n                  nextToken.value = nextToken.value.trimStart(); // Unshift the next token\n\n                  tokens.unshift(nextToken);\n                }\n              }\n            }\n\n            break;\n\n          default:\n            break;\n        }\n\n        Twig.log.trace('Twig.compile: ', ' Output: ', output, ' Logic Stack: ', stack, ' Pending Output: ', intermediateOutput);\n      } // Verify that there are no logic tokens left in the stack.\n\n\n      if (stack.length > 0) {\n        unclosedToken = stack.pop();\n        throw new Error('Unable to find an end tag for ' + unclosedToken.type + ', expecting one of ' + unclosedToken.next);\n      }\n\n      return output;\n    } catch (error) {\n      if (self.options.rethrow) {\n        if (error.type === 'TwigException' && !error.file) {\n          error.file = self.id;\n        }\n\n        throw error;\n      } else {\n        Twig.log.error('Error compiling twig template ' + self.id + ': ');\n\n        if (error.stack) {\n          Twig.log.error(error.stack);\n        } else {\n          Twig.log.error(error.toString());\n        }\n      }\n    }\n  };\n\n  function handleException(state, ex) {\n    if (state.template.options.rethrow) {\n      if (typeof ex === 'string') {\n        ex = new Twig.Error(ex);\n      }\n\n      if (ex.type === 'TwigException' && !ex.file) {\n        ex.file = state.template.id;\n      }\n\n      throw ex;\n    } else {\n      Twig.log.error('Error parsing twig template ' + state.template.id + ': ');\n\n      if (ex.stack) {\n        Twig.log.error(ex.stack);\n      } else {\n        Twig.log.error(ex.toString());\n      }\n\n      if (Twig.debug) {\n        return ex.toString();\n      }\n    }\n  }\n  /**\n   * Tokenize and compile a string template.\n   *\n   * @param {string} data The template.\n   *\n   * @return {Array} The compiled tokens.\n   */\n\n\n  Twig.prepare = function (data) {\n    // Tokenize\n    Twig.log.debug('Twig.prepare: ', 'Tokenizing ', data);\n    var rawTokens = Twig.tokenize.call(this, data); // Compile\n\n    Twig.log.debug('Twig.prepare: ', 'Compiling ', rawTokens);\n    var tokens = Twig.compile.call(this, rawTokens);\n    Twig.log.debug('Twig.prepare: ', 'Compiled ', tokens);\n    return tokens;\n  };\n  /**\n   * Join the output token's stack and escape it if needed\n   *\n   * @param {Array} Output token's stack\n   *\n   * @return {string|String} Autoescaped output\n   */\n\n\n  Twig.output = function (output) {\n    var autoescape = this.options.autoescape;\n\n    if (!autoescape) {\n      return output.join('');\n    }\n\n    var strategy = typeof autoescape === 'string' ? autoescape : 'html';\n    var escapedOutput = output.map(function (str) {\n      if (str && str.twigMarkup !== true && str.twigMarkup !== strategy && !(strategy === 'html' && str.twigMarkup === 'html_attr')) {\n        str = Twig.filters.escape(str, [strategy]);\n      }\n\n      return str;\n    });\n\n    if (escapedOutput.length === 0) {\n      return '';\n    }\n\n    var joinedOutput = escapedOutput.join('');\n\n    if (joinedOutput.length === 0) {\n      return '';\n    }\n\n    return new Twig.Markup(joinedOutput, true);\n  }; // Namespace for template storage and retrieval\n\n\n  Twig.Templates = {\n    /**\n     * Registered template loaders - use Twig.Templates.registerLoader to add supported loaders\n     * @type {Object}\n     */\n    loaders: {},\n\n    /**\n     * Registered template parsers - use Twig.Templates.registerParser to add supported parsers\n     * @type {Object}\n     */\n    parsers: {},\n\n    /**\n     * Cached / loaded templates\n     * @type {Object}\n     */\n    registry: {}\n  };\n  /**\n   * Is this id valid for a twig template?\n   *\n   * @param {string} id The ID to check.\n   *\n   * @throws {Twig.Error} If the ID is invalid or used.\n   * @return {boolean} True if the ID is valid.\n   */\n\n  Twig.validateId = function (id) {\n    if (id === 'prototype') {\n      throw new Twig.Error(id + ' is not a valid twig identifier');\n    } else if (Twig.cache && Object.hasOwnProperty.call(Twig.Templates.registry, id)) {\n      throw new Twig.Error('There is already a template with the ID ' + id);\n    }\n\n    return true;\n  };\n  /**\n   * Register a template loader\n   *\n   * @example\n   * Twig.extend(function (Twig) {\n   *    Twig.Templates.registerLoader('custom_loader', function (location, params, callback, errorCallback) {\n   *        // ... load the template ...\n   *        params.data = loadedTemplateData;\n   *        // create and return the template\n   *        var template = new Twig.Template(params);\n   *        if (typeof callback === 'function') {\n   *            callback(template);\n   *        }\n   *        return template;\n   *    });\n   * });\n   *\n   * @param {String} methodName The method this loader is intended for (ajax, fs)\n   * @param {Function} func The function to execute when loading the template\n   * @param {Object|undefined} scope Optional scope parameter to bind func to\n   *\n   * @throws Twig.Error\n   *\n   * @return {void}\n   */\n\n\n  Twig.Templates.registerLoader = function (methodName, func, scope) {\n    if (typeof func !== 'function') {\n      throw new Twig.Error('Unable to add loader for ' + methodName + ': Invalid function reference given.');\n    }\n\n    if (scope) {\n      func = func.bind(scope);\n    }\n\n    this.loaders[methodName] = func;\n  };\n  /**\n   * Remove a registered loader\n   *\n   * @param {String} methodName The method name for the loader you wish to remove\n   *\n   * @return {void}\n   */\n\n\n  Twig.Templates.unRegisterLoader = function (methodName) {\n    if (this.isRegisteredLoader(methodName)) {\n      delete this.loaders[methodName];\n    }\n  };\n  /**\n   * See if a loader is registered by its method name\n   *\n   * @param {String} methodName The name of the loader you are looking for\n   *\n   * @return {boolean}\n   */\n\n\n  Twig.Templates.isRegisteredLoader = function (methodName) {\n    return Object.hasOwnProperty.call(this.loaders, methodName);\n  };\n  /**\n   * Register a template parser\n   *\n   * @example\n   * Twig.extend(function (Twig) {\n   *    Twig.Templates.registerParser('custom_parser', function (params) {\n   *        // this template source can be accessed in params.data\n   *        var template = params.data\n   *\n   *        // ... custom process that modifies the template\n   *\n   *        // return the parsed template\n   *        return template;\n   *    });\n   * });\n   *\n   * @param {String} methodName The method this parser is intended for (twig, source)\n   * @param {Function} func The function to execute when parsing the template\n   * @param {Object|undefined} scope Optional scope parameter to bind func to\n   *\n   * @throws Twig.Error\n   *\n   * @return {void}\n   */\n\n\n  Twig.Templates.registerParser = function (methodName, func, scope) {\n    if (typeof func !== 'function') {\n      throw new Twig.Error('Unable to add parser for ' + methodName + ': Invalid function regerence given.');\n    }\n\n    if (scope) {\n      func = func.bind(scope);\n    }\n\n    this.parsers[methodName] = func;\n  };\n  /**\n   * Remove a registered parser\n   *\n   * @param {String} methodName The method name for the parser you wish to remove\n   *\n   * @return {void}\n   */\n\n\n  Twig.Templates.unRegisterParser = function (methodName) {\n    if (this.isRegisteredParser(methodName)) {\n      delete this.parsers[methodName];\n    }\n  };\n  /**\n   * See if a parser is registered by its method name\n   *\n   * @param {String} methodName The name of the parser you are looking for\n   *\n   * @return {boolean}\n   */\n\n\n  Twig.Templates.isRegisteredParser = function (methodName) {\n    return Object.hasOwnProperty.call(this.parsers, methodName);\n  };\n  /**\n   * Save a template object to the store.\n   *\n   * @param {Twig.Template} template   The twig.js template to store.\n   */\n\n\n  Twig.Templates.save = function (template) {\n    if (template.id === undefined) {\n      throw new Twig.Error('Unable to save template with no id');\n    }\n\n    Twig.Templates.registry[template.id] = template;\n  };\n  /**\n   * Load a previously saved template from the store.\n   *\n   * @param {string} id   The ID of the template to load.\n   *\n   * @return {Twig.Template} A twig.js template stored with the provided ID.\n   */\n\n\n  Twig.Templates.load = function (id) {\n    if (!Object.hasOwnProperty.call(Twig.Templates.registry, id)) {\n      return null;\n    }\n\n    return Twig.Templates.registry[id];\n  };\n  /**\n   * Load a template from a remote location using AJAX and saves in with the given ID.\n   *\n   * Available parameters:\n   *\n   *      async:       Should the HTTP request be performed asynchronously.\n   *                      Defaults to true.\n   *      method:      What method should be used to load the template\n   *                      (fs or ajax)\n   *      parser:      What method should be used to parse the template\n   *                      (twig or source)\n   *      precompiled: Has the template already been compiled.\n   *\n   * @param {string} location  The remote URL to load as a template.\n   * @param {Object} params The template parameters.\n   * @param {function} callback  A callback triggered when the template finishes loading.\n   * @param {function} errorCallback  A callback triggered if an error occurs loading the template.\n   *\n   *\n   */\n\n\n  Twig.Templates.loadRemote = function (location, params, callback, errorCallback) {\n    // Default to the URL so the template is cached.\n    var id = typeof params.id === 'undefined' ? location : params.id;\n    var cached = Twig.Templates.registry[id]; // Check for existing template\n\n    if (Twig.cache && typeof cached !== 'undefined') {\n      // A template is already saved with the given id.\n      if (typeof callback === 'function') {\n        callback(cached);\n      } // TODO: if async, return deferred promise\n\n\n      return cached;\n    } // If the parser name hasn't been set, default it to twig\n\n\n    params.parser = params.parser || 'twig';\n    params.id = id; // Default to async\n\n    if (typeof params.async === 'undefined') {\n      params.async = true;\n    } // Assume 'fs' if the loader is not defined\n\n\n    var loader = this.loaders[params.method] || this.loaders.fs;\n    return loader.call(this, location, params, callback, errorCallback);\n  }; // Determine object type\n\n\n  function is(type, obj) {\n    var clas = Object.prototype.toString.call(obj).slice(8, -1);\n    return obj !== undefined && obj !== null && clas === type;\n  }\n  /**\n   * A wrapper for template blocks.\n   *\n   * @param  {Twig.Template} The template that the block was originally defined in.\n   * @param  {Object} The compiled block token.\n   */\n\n\n  Twig.Block = function (template, token) {\n    this.template = template;\n    this.token = token;\n  };\n  /**\n   * Render the block using a specific parse state and context.\n   *\n   * @param  {Twig.ParseState} parseState\n   * @param  {Object} context\n   *\n   * @return {Promise}\n   */\n\n\n  Twig.Block.prototype.render = function (parseState, context) {\n    var originalTemplate = parseState.template;\n    var promise;\n    parseState.template = this.template;\n\n    if (this.token.expression) {\n      promise = Twig.expression.parseAsync.call(parseState, this.token.output, context);\n    } else {\n      promise = parseState.parseAsync(this.token.output, context);\n    }\n\n    return promise.then(function (value) {\n      return Twig.expression.parseAsync.call(parseState, {\n        type: Twig.expression.type.string,\n        value: value\n      }, context);\n    }).then(function (output) {\n      parseState.template = originalTemplate;\n      return output;\n    });\n  };\n  /**\n   * Holds the state needed to parse a template.\n   *\n   * @param {Twig.Template} template The template that the tokens being parsed are associated with.\n   * @param {Object} blockOverrides Any blocks that should override those defined in the associated template.\n   */\n\n\n  Twig.ParseState = function (template, blockOverrides) {\n    this.renderedBlocks = {};\n    this.overrideBlocks = blockOverrides === undefined ? {} : blockOverrides;\n    this.context = {};\n    this.macros = {};\n    this.nestingStack = [];\n    this.template = template;\n  };\n  /**\n   * Get a block by its name, resolving in the following order:\n   *     - override blocks specified when initialized (except when excluded)\n   *     - blocks resolved from the associated template\n   *     - blocks resolved from the parent template when extending\n   *\n   * @param {String} name The name of the block to return.\n   * @param {Boolean} checkOnlyInheritedBlocks Whether to skip checking the overrides and associated template, will not skip by default.\n   *\n   * @return {Twig.Block|undefined}\n   */\n\n\n  Twig.ParseState.prototype.getBlock = function (name, checkOnlyInheritedBlocks) {\n    var block;\n\n    if (checkOnlyInheritedBlocks !== true) {\n      // Blocks specified when initialized\n      block = this.overrideBlocks[name];\n    }\n\n    if (block === undefined) {\n      // Block defined by the associated template\n      block = this.template.getBlock(name, checkOnlyInheritedBlocks);\n    }\n\n    if (block === undefined && this.template.parentTemplate !== null) {\n      // Block defined in the parent template when extending\n      block = this.template.parentTemplate.getBlock(name);\n    }\n\n    return block;\n  };\n  /**\n   * Get all the available blocks, resolving in the following order:\n   *     - override blocks specified when initialized\n   *     - blocks resolved from the associated template\n   *     - blocks resolved from the parent template when extending (except when excluded)\n   *\n   * @param {Boolean} includeParentBlocks Whether to get blocks from the parent template when extending, will always do so by default.\n   *\n   * @return {Object}\n   */\n\n\n  Twig.ParseState.prototype.getBlocks = function (includeParentBlocks) {\n    var blocks = {};\n\n    if (includeParentBlocks !== false && this.template.parentTemplate !== null && // Prevent infinite loop\n    this.template.parentTemplate !== this.template) {\n      // Blocks from the parent template when extending\n      blocks = this.template.parentTemplate.getBlocks();\n    }\n\n    blocks = _objectSpread({}, blocks, {}, this.template.getBlocks(), {}, this.overrideBlocks);\n    return blocks;\n  };\n  /**\n   * Get the closest token of a specific type to the current nest level.\n   *\n   * @param  {String} type  The logic token type\n   *\n   * @return {Object}\n   */\n\n\n  Twig.ParseState.prototype.getNestingStackToken = function (type) {\n    var matchingToken;\n    this.nestingStack.forEach(function (token) {\n      if (matchingToken === undefined && token.type === type) {\n        matchingToken = token;\n      }\n    });\n    return matchingToken;\n  };\n  /**\n   * Parse a set of tokens using the current state.\n   *\n   * @param {Array} tokens The compiled tokens.\n   * @param {Object} context The context to set the state to while parsing.\n   * @param {Boolean} allowAsync Whether to parse asynchronously.\n   * @param {Object} blocks Blocks that should override any defined while parsing.\n   *\n   * @return {String} The rendered tokens.\n   *\n   */\n\n\n  Twig.ParseState.prototype.parse = function (tokens, context, allowAsync) {\n    var state = this;\n    var output = []; // Store any error that might be thrown by the promise chain.\n\n    var err = null; // This will be set to isAsync if template renders synchronously\n\n    var isAsync = true;\n    var promise = null; // Track logic chains\n\n    var chain = true;\n\n    if (context) {\n      state.context = context;\n    }\n    /*\n     * Extracted into it's own function such that the function\n     * does not get recreated over and over again in the `forEach`\n     * loop below. This method can be compiled and optimized\n     * a single time instead of being recreated on each iteration.\n     */\n\n\n    function outputPush(o) {\n      output.push(o);\n    }\n\n    function parseTokenLogic(logic) {\n      if (typeof logic.chain !== 'undefined') {\n        chain = logic.chain;\n      }\n\n      if (typeof logic.context !== 'undefined') {\n        state.context = logic.context;\n      }\n\n      if (typeof logic.output !== 'undefined') {\n        output.push(logic.output);\n      }\n    }\n\n    promise = Twig.async.forEach(tokens, function (token) {\n      Twig.log.debug('Twig.ParseState.parse: ', 'Parsing token: ', token);\n\n      switch (token.type) {\n        case Twig.token.type.raw:\n          output.push(Twig.filters.raw(token.value));\n          break;\n\n        case Twig.token.type.logic:\n          return Twig.logic.parseAsync.call(state, token.token\n          /* logicToken */\n          , state.context, chain).then(parseTokenLogic);\n\n        case Twig.token.type.comment:\n          // Do nothing, comments should be ignored\n          break;\n        // Fall through whitespace to output\n\n        case Twig.token.type.outputWhitespacePre:\n        case Twig.token.type.outputWhitespacePost:\n        case Twig.token.type.outputWhitespaceBoth:\n        case Twig.token.type.output:\n          Twig.log.debug('Twig.ParseState.parse: ', 'Output token: ', token.stack); // Parse the given expression in the given context\n\n          return Twig.expression.parseAsync.call(state, token.stack, state.context).then(outputPush);\n\n        default:\n          break;\n      }\n    }).then(function () {\n      output = Twig.output.call(state.template, output);\n      isAsync = false;\n      return output;\n    })[\"catch\"](function (error) {\n      if (allowAsync) {\n        handleException(state, error);\n      }\n\n      err = error;\n    }); // If `allowAsync` we will always return a promise since we do not\n    // know in advance if we are going to run asynchronously or not.\n\n    if (allowAsync) {\n      return promise;\n    } // Handle errors here if we fail synchronously.\n\n\n    if (err !== null) {\n      return handleException(state, err);\n    } // If `allowAsync` is not true we should not allow the user\n    // to use asynchronous functions or filters.\n\n\n    if (isAsync) {\n      throw new Twig.Error('You are using Twig.js in sync mode in combination with async extensions.');\n    }\n\n    return output;\n  };\n  /**\n   * Create a new twig.js template.\n   *\n   * Parameters: {\n   *      data:   The template, either pre-compiled tokens or a string template\n   *      id:     The name of this template\n   * }\n   *\n   * @param {Object} params The template parameters.\n   */\n\n\n  Twig.Template = function (params) {\n    var data = params.data,\n        id = params.id,\n        base = params.base,\n        path = params.path,\n        url = params.url,\n        name = params.name,\n        method = params.method,\n        options = params.options; // # What is stored in a Twig.Template\n    //\n    // The Twig Template hold several chucks of data.\n    //\n    //     {\n    //          id:     The token ID (if any)\n    //          tokens: The list of tokens that makes up this template.\n    //          base:   The base template (if any)\n    //            options:  {\n    //                Compiler/parser options\n    //\n    //                strict_variables: true/false\n    //                    Should missing variable/keys emit an error message. If false, they default to null.\n    //            }\n    //     }\n    //\n\n    this.base = base;\n    this.blocks = {\n      defined: {},\n      imported: {}\n    };\n    this.id = id;\n    this.method = method;\n    this.name = name;\n    this.options = options;\n    this.parentTemplate = null;\n    this.path = path;\n    this.url = url;\n\n    if (is('String', data)) {\n      this.tokens = Twig.prepare.call(this, data);\n    } else {\n      this.tokens = data;\n    }\n\n    if (id !== undefined) {\n      Twig.Templates.save(this);\n    }\n  };\n  /**\n   * Get a block by its name, resolving in the following order:\n   *     - blocks defined in the template itself\n   *     - blocks imported from another template\n   *\n   * @param {String} name The name of the block to return.\n   * @param {Boolean} checkOnlyInheritedBlocks Whether to skip checking the blocks defined in the template itself, will not skip by default.\n   *\n   * @return {Twig.Block|undefined}\n   */\n\n\n  Twig.Template.prototype.getBlock = function (name, checkOnlyInheritedBlocks) {\n    var checkImports = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var block;\n\n    if (checkOnlyInheritedBlocks !== true) {\n      block = this.blocks.defined[name];\n    }\n\n    if (checkImports && block === undefined) {\n      block = this.blocks.imported[name];\n    }\n\n    if (block === undefined && this.parentTemplate !== null) {\n      /**\n       * Block defined in the parent template when extending.\n       * This recursion is useful to inherit from ascendants.\n       * But take care of not considering ascendants' {% use %}\n       */\n      block = this.parentTemplate.getBlock(name, checkOnlyInheritedBlocks, checkImports = false);\n    }\n\n    return block;\n  };\n  /**\n   * Get all the available blocks, resolving in the following order:\n   *     - blocks defined in the template itself\n   *     - blocks imported from other templates\n   *\n   * @return {Object}\n   */\n\n\n  Twig.Template.prototype.getBlocks = function () {\n    var blocks = {};\n    blocks = _objectSpread({}, blocks, {}, this.blocks.imported, {}, this.blocks.defined);\n    return blocks;\n  };\n\n  Twig.Template.prototype.render = function (context, params, allowAsync) {\n    var template = this;\n    params = params || {};\n    return Twig.async.potentiallyAsync(template, allowAsync, function () {\n      var state = new Twig.ParseState(template, params.blocks);\n      return state.parseAsync(template.tokens, context).then(function (output) {\n        var parentTemplate;\n        var url;\n\n        if (template.parentTemplate !== null) {\n          // This template extends another template\n          if (template.options.allowInlineIncludes) {\n            // The template is provided inline\n            parentTemplate = Twig.Templates.load(template.parentTemplate);\n\n            if (parentTemplate) {\n              parentTemplate.options = template.options;\n            }\n          } // Check for the template file via include\n\n\n          if (!parentTemplate) {\n            url = Twig.path.parsePath(template, template.parentTemplate);\n            parentTemplate = Twig.Templates.loadRemote(url, {\n              method: template.getLoaderMethod(),\n              base: template.base,\n              async: false,\n              id: url,\n              options: template.options\n            });\n          }\n\n          template.parentTemplate = parentTemplate;\n          return template.parentTemplate.renderAsync(state.context, {\n            blocks: state.getBlocks(false),\n            isInclude: true\n          });\n        }\n\n        if (params.isInclude === true) {\n          return output;\n        }\n\n        return output.valueOf();\n      });\n    });\n  };\n\n  Twig.Template.prototype.importFile = function (file) {\n    var url = null;\n    var subTemplate;\n\n    if (!this.url && this.options.allowInlineIncludes) {\n      file = this.path ? Twig.path.parsePath(this, file) : file;\n      subTemplate = Twig.Templates.load(file);\n\n      if (!subTemplate) {\n        subTemplate = Twig.Templates.loadRemote(url, {\n          id: file,\n          method: this.getLoaderMethod(),\n          async: false,\n          path: file,\n          options: this.options\n        });\n\n        if (!subTemplate) {\n          throw new Twig.Error('Unable to find the template ' + file);\n        }\n      }\n\n      subTemplate.options = this.options;\n      return subTemplate;\n    }\n\n    url = Twig.path.parsePath(this, file); // Load blocks from an external file\n\n    subTemplate = Twig.Templates.loadRemote(url, {\n      method: this.getLoaderMethod(),\n      base: this.base,\n      async: false,\n      options: this.options,\n      id: url\n    });\n    return subTemplate;\n  };\n\n  Twig.Template.prototype.getLoaderMethod = function () {\n    if (this.path) {\n      return 'fs';\n    }\n\n    if (this.url) {\n      return 'ajax';\n    }\n\n    return this.method || 'fs';\n  };\n\n  Twig.Template.prototype.compile = function (options) {\n    // Compile the template into raw JS\n    return Twig.compiler.compile(this, options);\n  };\n  /**\n   * Create safe output\n   *\n   * @param {string} Content safe to output\n   *\n   * @return {String} Content wrapped into a String\n   */\n\n\n  Twig.Markup = function (content, strategy) {\n    if (typeof content !== 'string') {\n      return content;\n    }\n    /* eslint-disable no-new-wrappers, unicorn/new-for-builtins */\n\n\n    var output = new String(content);\n    /* eslint-enable */\n\n    output.twigMarkup = typeof strategy === 'undefined' ? true : strategy;\n    return output;\n  };\n\n  return Twig;\n};\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// ## twig.compiler.js\n//\n// This file handles compiling templates into JS\nmodule.exports = function (Twig) {\n  /**\n   * Namespace for compilation.\n   */\n  Twig.compiler = {\n    module: {}\n  }; // Compile a Twig Template to output.\n\n  Twig.compiler.compile = function (template, options) {\n    // Get tokens\n    var tokens = JSON.stringify(template.tokens);\n    var id = template.id;\n    var output = null;\n\n    if (options.module) {\n      if (Twig.compiler.module[options.module] === undefined) {\n        throw new Twig.Error('Unable to find module type ' + options.module);\n      }\n\n      output = Twig.compiler.module[options.module](id, tokens, options.twig);\n    } else {\n      output = Twig.compiler.wrap(id, tokens);\n    }\n\n    return output;\n  };\n\n  Twig.compiler.module = {\n    amd: function amd(id, tokens, pathToTwig) {\n      return 'define([\"' + pathToTwig + '\"], function (Twig) {\\n\\tvar twig, templates;\\ntwig = Twig.twig;\\ntemplates = ' + Twig.compiler.wrap(id, tokens) + '\\n\\treturn templates;\\n});';\n    },\n    node: function node(id, tokens) {\n      return 'var twig = require(\"twig\").twig;\\nexports.template = ' + Twig.compiler.wrap(id, tokens);\n    },\n    cjs2: function cjs2(id, tokens, pathToTwig) {\n      return 'module.declare([{ twig: \"' + pathToTwig + '\" }], function (require, exports, module) {\\n\\tvar twig = require(\"twig\").twig;\\n\\texports.template = ' + Twig.compiler.wrap(id, tokens) + '\\n});';\n    }\n  };\n\n  Twig.compiler.wrap = function (id, tokens) {\n    return 'twig({id:\"' + id.replace('\"', '\\\\\"') + '\", data:' + tokens + ', precompiled: true});\\n';\n  };\n\n  return Twig;\n};\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __webpack_require__(0);\n\nvar _typeof2 = _interopRequireDefault(__webpack_require__(1));\n\nvar _toConsumableArray2 = _interopRequireDefault(__webpack_require__(10));\n\n// ## twig.expression.js\n//\n// This file handles tokenizing, compiling and parsing expressions.\nmodule.exports = function (Twig) {\n  'use strict';\n\n  function parseParams(state, params, context) {\n    if (params) {\n      return Twig.expression.parseAsync.call(state, params, context);\n    }\n\n    return Twig.Promise.resolve(false);\n  }\n  /**\n   * Namespace for expression handling.\n   */\n\n\n  Twig.expression = {};\n\n  __webpack_require__(14)(Twig);\n  /**\n   * Reserved word that can't be used as variable names.\n   */\n\n\n  Twig.expression.reservedWords = ['true', 'false', 'null', 'TRUE', 'FALSE', 'NULL', '_context', 'and', 'b-and', 'or', 'b-or', 'b-xor', 'in', 'not in', 'if', 'matches', 'starts', 'ends', 'with'];\n  /**\n   * The type of tokens used in expressions.\n   */\n\n  Twig.expression.type = {\n    comma: 'Twig.expression.type.comma',\n    operator: {\n      unary: 'Twig.expression.type.operator.unary',\n      binary: 'Twig.expression.type.operator.binary'\n    },\n    string: 'Twig.expression.type.string',\n    bool: 'Twig.expression.type.bool',\n    slice: 'Twig.expression.type.slice',\n    array: {\n      start: 'Twig.expression.type.array.start',\n      end: 'Twig.expression.type.array.end'\n    },\n    object: {\n      start: 'Twig.expression.type.object.start',\n      end: 'Twig.expression.type.object.end'\n    },\n    parameter: {\n      start: 'Twig.expression.type.parameter.start',\n      end: 'Twig.expression.type.parameter.end'\n    },\n    subexpression: {\n      start: 'Twig.expression.type.subexpression.start',\n      end: 'Twig.expression.type.subexpression.end'\n    },\n    key: {\n      period: 'Twig.expression.type.key.period',\n      brackets: 'Twig.expression.type.key.brackets'\n    },\n    filter: 'Twig.expression.type.filter',\n    _function: 'Twig.expression.type._function',\n    variable: 'Twig.expression.type.variable',\n    number: 'Twig.expression.type.number',\n    _null: 'Twig.expression.type.null',\n    context: 'Twig.expression.type.context',\n    test: 'Twig.expression.type.test'\n  };\n  Twig.expression.set = {\n    // What can follow an expression (in general)\n    operations: [Twig.expression.type.filter, Twig.expression.type.operator.unary, Twig.expression.type.operator.binary, Twig.expression.type.array.end, Twig.expression.type.object.end, Twig.expression.type.parameter.end, Twig.expression.type.subexpression.end, Twig.expression.type.comma, Twig.expression.type.test],\n    expressions: [Twig.expression.type._function, Twig.expression.type.bool, Twig.expression.type.string, Twig.expression.type.variable, Twig.expression.type.number, Twig.expression.type._null, Twig.expression.type.context, Twig.expression.type.parameter.start, Twig.expression.type.array.start, Twig.expression.type.object.start, Twig.expression.type.subexpression.start, Twig.expression.type.operator.unary]\n  }; // Most expressions allow a '.' or '[' after them, so we provide a convenience set\n\n  Twig.expression.set.operationsExtended = Twig.expression.set.operations.concat([Twig.expression.type.key.period, Twig.expression.type.key.brackets, Twig.expression.type.slice]); // Some commonly used compile and parse functions.\n\n  Twig.expression.fn = {\n    compile: {\n      push: function push(token, stack, output) {\n        output.push(token);\n      },\n      pushBoth: function pushBoth(token, stack, output) {\n        output.push(token);\n        stack.push(token);\n      }\n    },\n    parse: {\n      push: function push(token, stack) {\n        stack.push(token);\n      },\n      pushValue: function pushValue(token, stack) {\n        stack.push(token.value);\n      }\n    }\n  }; // The regular expressions and compile/parse logic used to match tokens in expressions.\n  //\n  // Properties:\n  //\n  //      type:  The type of expression this matches\n  //\n  //      regex: One or more regular expressions that matche the format of the token.\n  //\n  //      next:  Valid tokens that can occur next in the expression.\n  //\n  // Functions:\n  //\n  //      compile: A function that compiles the raw regular expression match into a token.\n  //\n  //      parse:   A function that parses the compiled token into output.\n  //\n\n  Twig.expression.definitions = [{\n    type: Twig.expression.type.test,\n    regex: /^is\\s+(not)?\\s*([a-zA-Z_]\\w*(\\s?as)?)/,\n    next: Twig.expression.set.operations.concat([Twig.expression.type.parameter.start]),\n    compile: function compile(token, stack, output) {\n      token.filter = token.match[2];\n      token.modifier = token.match[1];\n      delete token.match;\n      delete token.value;\n      output.push(token);\n    },\n    parse: function parse(token, stack, context) {\n      var value = stack.pop();\n      var state = this;\n      return parseParams(state, token.params, context).then(function (params) {\n        var result = Twig.test(token.filter, value, params);\n\n        if (token.modifier === 'not') {\n          stack.push(!result);\n        } else {\n          stack.push(result);\n        }\n      });\n    }\n  }, {\n    type: Twig.expression.type.comma,\n    // Match a comma\n    regex: /^,/,\n    next: Twig.expression.set.expressions.concat([Twig.expression.type.array.end, Twig.expression.type.object.end]),\n    compile: function compile(token, stack, output) {\n      var i = stack.length - 1;\n      var stackToken;\n      delete token.match;\n      delete token.value; // Pop tokens off the stack until the start of the object\n\n      for (; i >= 0; i--) {\n        stackToken = stack.pop();\n\n        if (stackToken.type === Twig.expression.type.object.start || stackToken.type === Twig.expression.type.parameter.start || stackToken.type === Twig.expression.type.array.start) {\n          stack.push(stackToken);\n          break;\n        }\n\n        output.push(stackToken);\n      }\n\n      output.push(token);\n    }\n  }, {\n    /**\n     * Match a number (integer or decimal)\n     */\n    type: Twig.expression.type.number,\n    // Match a number\n    regex: /^-?\\d+(\\.\\d+)?/,\n    next: Twig.expression.set.operations,\n    compile: function compile(token, stack, output) {\n      token.value = Number(token.value);\n      output.push(token);\n    },\n    parse: Twig.expression.fn.parse.pushValue\n  }, {\n    type: Twig.expression.type.operator.binary,\n    // Match any of ??, ?:, +, *, /, -, %, ~, <, <=, >, >=, !=, ==, **, ?, :, and, b-and, or, b-or, b-xor, in, not in\n    // and, or, in, not in, matches, starts with, ends with can be followed by a space or parenthesis\n    regex: /(^\\?\\?|^\\?:|^(b-and)|^(b-or)|^(b-xor)|^[+\\-~%?]|^[:](?!\\d\\])|^[!=]==?|^[!<>]=?|^\\*\\*?|^\\/\\/?|^(and)[(|\\s+]|^(or)[(|\\s+]|^(in)[(|\\s+]|^(not in)[(|\\s+]|^(matches)|^(starts with)|^(ends with)|^\\.\\.)/,\n    next: Twig.expression.set.expressions,\n    transform: function transform(match, tokens) {\n      switch (match[0]) {\n        case 'and(':\n        case 'or(':\n        case 'in(':\n        case 'not in(':\n          // Strip off the ( if it exists\n          tokens[tokens.length - 1].value = match[2];\n          return match[0];\n\n        default:\n          return '';\n      }\n    },\n    compile: function compile(token, stack, output) {\n      delete token.match;\n      token.value = token.value.trim();\n      var value = token.value;\n      var operator = Twig.expression.operator.lookup(value, token);\n      Twig.log.trace('Twig.expression.compile: ', 'Operator: ', operator, ' from ', value);\n\n      while (stack.length > 0 && (stack[stack.length - 1].type === Twig.expression.type.operator.unary || stack[stack.length - 1].type === Twig.expression.type.operator.binary) && (operator.associativity === Twig.expression.operator.leftToRight && operator.precidence >= stack[stack.length - 1].precidence || operator.associativity === Twig.expression.operator.rightToLeft && operator.precidence > stack[stack.length - 1].precidence)) {\n        var temp = stack.pop();\n        output.push(temp);\n      }\n\n      if (value === ':') {\n        // Check if this is a ternary or object key being set\n        if (stack[stack.length - 1] && stack[stack.length - 1].value === '?') {// Continue as normal for a ternary\n        } else {\n          // This is not a ternary so we push the token to the output where it can be handled\n          //   when the assocated object is closed.\n          var keyToken = output.pop();\n\n          if (keyToken.type === Twig.expression.type.string || keyToken.type === Twig.expression.type.variable) {\n            token.key = keyToken.value;\n          } else if (keyToken.type === Twig.expression.type.number) {\n            // Convert integer keys into string keys\n            token.key = keyToken.value.toString();\n          } else if (keyToken.expression && (keyToken.type === Twig.expression.type.parameter.end || keyToken.type === Twig.expression.type.subexpression.end)) {\n            token.params = keyToken.params;\n          } else {\n            throw new Twig.Error('Unexpected value before \\':\\' of ' + keyToken.type + ' = ' + keyToken.value);\n          }\n\n          output.push(token);\n        }\n      } else {\n        stack.push(operator);\n      }\n    },\n    parse: function parse(token, stack, context) {\n      var state = this;\n\n      if (token.key) {\n        // Handle ternary ':' operator\n        stack.push(token);\n      } else if (token.params) {\n        // Handle \"{(expression):value}\"\n        return Twig.expression.parseAsync.call(state, token.params, context).then(function (key) {\n          token.key = key;\n          stack.push(token); // If we're in a loop, we might need token.params later, especially in this form of \"(expression):value\"\n\n          if (!context.loop) {\n            delete token.params;\n          }\n        });\n      } else {\n        Twig.expression.operator.parse(token.value, stack);\n      }\n    }\n  }, {\n    type: Twig.expression.type.operator.unary,\n    // Match any of not\n    regex: /(^not\\s+)/,\n    next: Twig.expression.set.expressions,\n    compile: function compile(token, stack, output) {\n      delete token.match;\n      token.value = token.value.trim();\n      var value = token.value;\n      var operator = Twig.expression.operator.lookup(value, token);\n      Twig.log.trace('Twig.expression.compile: ', 'Operator: ', operator, ' from ', value);\n\n      while (stack.length > 0 && (stack[stack.length - 1].type === Twig.expression.type.operator.unary || stack[stack.length - 1].type === Twig.expression.type.operator.binary) && (operator.associativity === Twig.expression.operator.leftToRight && operator.precidence >= stack[stack.length - 1].precidence || operator.associativity === Twig.expression.operator.rightToLeft && operator.precidence > stack[stack.length - 1].precidence)) {\n        var temp = stack.pop();\n        output.push(temp);\n      }\n\n      stack.push(operator);\n    },\n    parse: function parse(token, stack) {\n      Twig.expression.operator.parse(token.value, stack);\n    }\n  }, {\n    /**\n     * Match a string. This is anything between a pair of single or double quotes.\n     */\n    type: Twig.expression.type.string,\n    // See: http://blog.stevenlevithan.com/archives/match-quoted-string\n    regex: /^([\"'])(?:(?=(\\\\?))\\2[\\s\\S])*?\\1/,\n    next: Twig.expression.set.operationsExtended,\n    compile: function compile(token, stack, output) {\n      var value = token.value;\n      delete token.match; // Remove the quotes from the string\n\n      if (value.slice(0, 1) === '\"') {\n        value = value.replace('\\\\\"', '\"');\n      } else {\n        value = value.replace('\\\\\\'', '\\'');\n      }\n\n      token.value = value.slice(1, -1).replace(/\\\\n/g, '\\n').replace(/\\\\r/g, '\\r');\n      Twig.log.trace('Twig.expression.compile: ', 'String value: ', token.value);\n      output.push(token);\n    },\n    parse: Twig.expression.fn.parse.pushValue\n  }, {\n    /**\n     * Match a subexpression set start.\n     */\n    type: Twig.expression.type.subexpression.start,\n    regex: /^\\(/,\n    next: Twig.expression.set.expressions.concat([Twig.expression.type.subexpression.end]),\n    compile: function compile(token, stack, output) {\n      token.value = '(';\n      output.push(token);\n      stack.push(token);\n    },\n    parse: Twig.expression.fn.parse.push\n  }, {\n    /**\n     * Match a subexpression set end.\n     */\n    type: Twig.expression.type.subexpression.end,\n    regex: /^\\)/,\n    next: Twig.expression.set.operationsExtended,\n    validate: function validate(match, tokens) {\n      // Iterate back through previous tokens to ensure we follow a subexpression start\n      var i = tokens.length - 1;\n      var foundSubexpressionStart = false;\n      var nextSubexpressionStartInvalid = false;\n      var unclosedParameterCount = 0;\n\n      while (!foundSubexpressionStart && i >= 0) {\n        var token = tokens[i];\n        foundSubexpressionStart = token.type === Twig.expression.type.subexpression.start; // If we have previously found a subexpression end, then this subexpression start is the start of\n        // that subexpression, not the subexpression we are searching for\n\n        if (foundSubexpressionStart && nextSubexpressionStartInvalid) {\n          nextSubexpressionStartInvalid = false;\n          foundSubexpressionStart = false;\n        } // Count parameter tokens to ensure we dont return truthy for a parameter opener\n\n\n        if (token.type === Twig.expression.type.parameter.start) {\n          unclosedParameterCount++;\n        } else if (token.type === Twig.expression.type.parameter.end) {\n          unclosedParameterCount--;\n        } else if (token.type === Twig.expression.type.subexpression.end) {\n          nextSubexpressionStartInvalid = true;\n        }\n\n        i--;\n      } // If we found unclosed parameters, return false\n      // If we didnt find subexpression start, return false\n      // Otherwise return true\n\n\n      return foundSubexpressionStart && unclosedParameterCount === 0;\n    },\n    compile: function compile(token, stack, output) {\n      // This is basically a copy of parameter end compilation\n      var stackToken;\n      var endToken = token;\n      stackToken = stack.pop();\n\n      while (stack.length > 0 && stackToken.type !== Twig.expression.type.subexpression.start) {\n        output.push(stackToken);\n        stackToken = stack.pop();\n      } // Move contents of parens into preceding filter\n\n\n      var paramStack = [];\n\n      while (token.type !== Twig.expression.type.subexpression.start) {\n        // Add token to arguments stack\n        paramStack.unshift(token);\n        token = output.pop();\n      }\n\n      paramStack.unshift(token); // If the token at the top of the *stack* is a function token, pop it onto the output queue.\n      // Get the token preceding the parameters\n\n      stackToken = stack[stack.length - 1];\n\n      if (stackToken === undefined || stackToken.type !== Twig.expression.type._function && stackToken.type !== Twig.expression.type.filter && stackToken.type !== Twig.expression.type.test && stackToken.type !== Twig.expression.type.key.brackets) {\n        endToken.expression = true; // Remove start and end token from stack\n\n        paramStack.pop();\n        paramStack.shift();\n        endToken.params = paramStack;\n        output.push(endToken);\n      } else {\n        // This should never be hit\n        endToken.expression = false;\n        stackToken.params = paramStack;\n      }\n    },\n    parse: function parse(token, stack, context) {\n      var state = this;\n\n      if (token.expression) {\n        return Twig.expression.parseAsync.call(state, token.params, context).then(function (value) {\n          stack.push(value);\n        });\n      }\n\n      throw new Twig.Error('Unexpected subexpression end when token is not marked as an expression');\n    }\n  }, {\n    /**\n     * Match a parameter set start.\n     */\n    type: Twig.expression.type.parameter.start,\n    regex: /^\\(/,\n    next: Twig.expression.set.expressions.concat([Twig.expression.type.parameter.end]),\n    validate: function validate(match, tokens) {\n      var lastToken = tokens[tokens.length - 1]; // We can't use the regex to test if we follow a space because expression is trimmed\n\n      return lastToken && !Twig.expression.reservedWords.includes(lastToken.value.trim());\n    },\n    compile: Twig.expression.fn.compile.pushBoth,\n    parse: Twig.expression.fn.parse.push\n  }, {\n    /**\n     * Match a parameter set end.\n     */\n    type: Twig.expression.type.parameter.end,\n    regex: /^\\)/,\n    next: Twig.expression.set.operationsExtended,\n    compile: function compile(token, stack, output) {\n      var stackToken;\n      var endToken = token;\n      stackToken = stack.pop();\n\n      while (stack.length > 0 && stackToken.type !== Twig.expression.type.parameter.start) {\n        output.push(stackToken);\n        stackToken = stack.pop();\n      } // Move contents of parens into preceding filter\n\n\n      var paramStack = [];\n\n      while (token.type !== Twig.expression.type.parameter.start) {\n        // Add token to arguments stack\n        paramStack.unshift(token);\n        token = output.pop();\n      }\n\n      paramStack.unshift(token); // Get the token preceding the parameters\n\n      token = output[output.length - 1];\n\n      if (token === undefined || token.type !== Twig.expression.type._function && token.type !== Twig.expression.type.filter && token.type !== Twig.expression.type.test && token.type !== Twig.expression.type.key.brackets) {\n        endToken.expression = true; // Remove start and end token from stack\n\n        paramStack.pop();\n        paramStack.shift();\n        endToken.params = paramStack;\n        output.push(endToken);\n      } else {\n        endToken.expression = false;\n        token.params = paramStack;\n      }\n    },\n    parse: function parse(token, stack, context) {\n      var newArray = [];\n      var arrayEnded = false;\n      var value = null;\n      var state = this;\n\n      if (token.expression) {\n        return Twig.expression.parseAsync.call(state, token.params, context).then(function (value) {\n          stack.push(value);\n        });\n      }\n\n      while (stack.length > 0) {\n        value = stack.pop(); // Push values into the array until the start of the array\n\n        if (value && value.type && value.type === Twig.expression.type.parameter.start) {\n          arrayEnded = true;\n          break;\n        }\n\n        newArray.unshift(value);\n      }\n\n      if (!arrayEnded) {\n        throw new Twig.Error('Expected end of parameter set.');\n      }\n\n      stack.push(newArray);\n    }\n  }, {\n    type: Twig.expression.type.slice,\n    regex: /^\\[(\\d*:\\d*)\\]/,\n    next: Twig.expression.set.operationsExtended,\n    compile: function compile(token, stack, output) {\n      var sliceRange = token.match[1].split(':'); // SliceStart can be undefined when we pass parameters to the slice filter later\n\n      var sliceStart = sliceRange[0] ? parseInt(sliceRange[0], 10) : undefined;\n      var sliceEnd = sliceRange[1] ? parseInt(sliceRange[1], 10) : undefined;\n      token.value = 'slice';\n      token.params = [sliceStart, sliceEnd]; // SliceEnd can't be undefined as the slice filter doesn't check for this, but it does check the length\n      // of the params array, so just shorten it.\n\n      if (!sliceEnd) {\n        token.params = [sliceStart];\n      }\n\n      output.push(token);\n    },\n    parse: function parse(token, stack) {\n      var input = stack.pop();\n      var params = token.params;\n      var state = this;\n      stack.push(Twig.filter.call(state, token.value, input, params));\n    }\n  }, {\n    /**\n     * Match an array start.\n     */\n    type: Twig.expression.type.array.start,\n    regex: /^\\[/,\n    next: Twig.expression.set.expressions.concat([Twig.expression.type.array.end]),\n    compile: Twig.expression.fn.compile.pushBoth,\n    parse: Twig.expression.fn.parse.push\n  }, {\n    /**\n     * Match an array end.\n     */\n    type: Twig.expression.type.array.end,\n    regex: /^\\]/,\n    next: Twig.expression.set.operationsExtended,\n    compile: function compile(token, stack, output) {\n      var i = stack.length - 1;\n      var stackToken; // Pop tokens off the stack until the start of the object\n\n      for (; i >= 0; i--) {\n        stackToken = stack.pop();\n\n        if (stackToken.type === Twig.expression.type.array.start) {\n          break;\n        }\n\n        output.push(stackToken);\n      }\n\n      output.push(token);\n    },\n    parse: function parse(token, stack) {\n      var newArray = [];\n      var arrayEnded = false;\n      var value = null;\n\n      while (stack.length > 0) {\n        value = stack.pop(); // Push values into the array until the start of the array\n\n        if (value && value.type && value.type === Twig.expression.type.array.start) {\n          arrayEnded = true;\n          break;\n        }\n\n        newArray.unshift(value);\n      }\n\n      if (!arrayEnded) {\n        throw new Twig.Error('Expected end of array.');\n      }\n\n      stack.push(newArray);\n    }\n  }, // Token that represents the start of a hash map '}'\n  //\n  // Hash maps take the form:\n  //    { \"key\": 'value', \"another_key\": item }\n  //\n  // Keys must be quoted (either single or double) and values can be any expression.\n  {\n    type: Twig.expression.type.object.start,\n    regex: /^\\{/,\n    next: Twig.expression.set.expressions.concat([Twig.expression.type.object.end]),\n    compile: Twig.expression.fn.compile.pushBoth,\n    parse: Twig.expression.fn.parse.push\n  }, // Token that represents the end of a Hash Map '}'\n  //\n  // This is where the logic for building the internal\n  // representation of a hash map is defined.\n  {\n    type: Twig.expression.type.object.end,\n    regex: /^\\}/,\n    next: Twig.expression.set.operationsExtended,\n    compile: function compile(token, stack, output) {\n      var i = stack.length - 1;\n      var stackToken; // Pop tokens off the stack until the start of the object\n\n      for (; i >= 0; i--) {\n        stackToken = stack.pop();\n\n        if (stackToken && stackToken.type === Twig.expression.type.object.start) {\n          break;\n        }\n\n        output.push(stackToken);\n      }\n\n      output.push(token);\n    },\n    parse: function parse(endToken, stack) {\n      var newObject = {};\n      var objectEnded = false;\n      var token = null;\n      var hasValue = false;\n      var value = null;\n\n      while (stack.length > 0) {\n        token = stack.pop(); // Push values into the array until the start of the object\n\n        if (token && token.type && token.type === Twig.expression.type.object.start) {\n          objectEnded = true;\n          break;\n        }\n\n        if (token && token.type && (token.type === Twig.expression.type.operator.binary || token.type === Twig.expression.type.operator.unary) && token.key) {\n          if (!hasValue) {\n            throw new Twig.Error('Missing value for key \\'' + token.key + '\\' in object definition.');\n          }\n\n          newObject[token.key] = value; // Preserve the order that elements are added to the map\n          // This is necessary since JavaScript objects don't\n          // guarantee the order of keys\n\n          if (newObject._keys === undefined) {\n            newObject._keys = [];\n          }\n\n          newObject._keys.unshift(token.key); // Reset value check\n\n\n          value = null;\n          hasValue = false;\n        } else {\n          hasValue = true;\n          value = token;\n        }\n      }\n\n      if (!objectEnded) {\n        throw new Twig.Error('Unexpected end of object.');\n      }\n\n      stack.push(newObject);\n    }\n  }, // Token representing a filter\n  //\n  // Filters can follow any expression and take the form:\n  //    expression|filter(optional, args)\n  //\n  // Filter parsing is done in the Twig.filters namespace.\n  {\n    type: Twig.expression.type.filter,\n    // Match a | then a letter or _, then any number of letters, numbers, _ or -\n    regex: /^\\|\\s?([a-zA-Z_][a-zA-Z0-9_-]*)/,\n    next: Twig.expression.set.operationsExtended.concat([Twig.expression.type.parameter.start]),\n    compile: function compile(token, stack, output) {\n      token.value = token.match[1];\n      output.push(token);\n    },\n    parse: function parse(token, stack, context) {\n      var input = stack.pop();\n      var state = this;\n      return parseParams(state, token.params, context).then(function (params) {\n        return Twig.filter.call(state, token.value, input, params);\n      }).then(function (value) {\n        stack.push(value);\n      });\n    }\n  }, {\n    type: Twig.expression.type._function,\n    // Match any letter or _, then any number of letters, numbers, _ or - followed by (\n    regex: /^([a-zA-Z_]\\w*)\\s*\\(/,\n    next: Twig.expression.type.parameter.start,\n    validate: function validate(match) {\n      // Make sure this function is not a reserved word\n      return match[1] && !Twig.expression.reservedWords.includes(match[1]);\n    },\n    transform: function transform() {\n      return '(';\n    },\n    compile: function compile(token, stack, output) {\n      var fn = token.match[1];\n      token.fn = fn; // Cleanup token\n\n      delete token.match;\n      delete token.value;\n      output.push(token);\n    },\n    parse: function parse(token, stack, context) {\n      var state = this;\n      var fn = token.fn;\n      var value;\n      return parseParams(state, token.params, context).then(function (params) {\n        if (Twig.functions[fn]) {\n          // Get the function from the built-in functions\n          value = Twig.functions[fn].apply(state, params);\n        } else if (typeof context[fn] === 'function') {\n          // Get the function from the user/context defined functions\n          value = context[fn].apply(context, (0, _toConsumableArray2[\"default\"])(params));\n        } else {\n          throw new Twig.Error(fn + ' function does not exist and is not defined in the context');\n        }\n\n        return value;\n      }).then(function (result) {\n        stack.push(result);\n      });\n    }\n  }, // Token representing a variable.\n  //\n  // Variables can contain letters, numbers, underscores and\n  // dashes, but must start with a letter or underscore.\n  //\n  // Variables are retrieved from the render context and take\n  // the value of 'undefined' if the given variable doesn't\n  // exist in the context.\n  {\n    type: Twig.expression.type.variable,\n    // Match any letter or _, then any number of letters, numbers, _ or -\n    regex: /^[a-zA-Z_]\\w*/,\n    next: Twig.expression.set.operationsExtended.concat([Twig.expression.type.parameter.start]),\n    compile: Twig.expression.fn.compile.push,\n    validate: function validate(match) {\n      return !Twig.expression.reservedWords.includes(match[0]);\n    },\n    parse: function parse(token, stack, context) {\n      var state = this; // Get the variable from the context\n\n      return Twig.expression.resolveAsync.call(state, context[token.value], context).then(function (value) {\n        if (state.template.options.strictVariables && value === undefined) {\n          throw new Twig.Error('Variable \"' + token.value + '\" does not exist.');\n        }\n\n        stack.push(value);\n      });\n    }\n  }, {\n    type: Twig.expression.type.key.period,\n    regex: /^\\.(\\w+)/,\n    next: Twig.expression.set.operationsExtended.concat([Twig.expression.type.parameter.start]),\n    compile: function compile(token, stack, output) {\n      token.key = token.match[1];\n      delete token.match;\n      delete token.value;\n      output.push(token);\n    },\n    parse: function parse(token, stack, context, nextToken) {\n      var state = this;\n      var key = token.key;\n      var object = stack.pop();\n      var value;\n\n      if (object && !Object.prototype.hasOwnProperty.call(object, key) && state.template.options.strictVariables) {\n        var keys = Object.keys(object);\n\n        if (keys.length > 0) {\n          throw new Twig.Error('Key \"' + key + '\" for object with keys \"' + Object.keys(object).join(', ') + '\" does not exist.');\n        } else {\n          throw new Twig.Error('Key \"' + key + '\" does not exist as the object is empty.');\n        }\n      }\n\n      return parseParams(state, token.params, context).then(function (params) {\n        if (object === null || object === undefined) {\n          value = undefined;\n        } else {\n          var capitalize = function capitalize(value) {\n            return value.slice(0, 1).toUpperCase() + value.slice(1);\n          }; // Get the variable from the context\n\n\n          if ((0, _typeof2[\"default\"])(object) === 'object' && key in object) {\n            value = object[key];\n          } else if (object['get' + capitalize(key)]) {\n            value = object['get' + capitalize(key)];\n          } else if (object['is' + capitalize(key)]) {\n            value = object['is' + capitalize(key)];\n          } else {\n            value = undefined;\n          }\n        } // When resolving an expression we need to pass nextToken in case the expression is a function\n\n\n        return Twig.expression.resolveAsync.call(state, value, context, params, nextToken, object);\n      }).then(function (result) {\n        stack.push(result);\n      });\n    }\n  }, {\n    type: Twig.expression.type.key.brackets,\n    regex: /^\\[([^\\]:]*)\\]/,\n    next: Twig.expression.set.operationsExtended.concat([Twig.expression.type.parameter.start]),\n    compile: function compile(token, stack, output) {\n      var match = token.match[1];\n      delete token.value;\n      delete token.match; // The expression stack for the key\n\n      token.stack = Twig.expression.compile({\n        value: match\n      }).stack;\n      output.push(token);\n    },\n    parse: function parse(token, stack, context, nextToken) {\n      // Evaluate key\n      var state = this;\n      var params = null;\n      var object;\n      var value;\n      return parseParams(state, token.params, context).then(function (parameters) {\n        params = parameters;\n        return Twig.expression.parseAsync.call(state, token.stack, context);\n      }).then(function (key) {\n        object = stack.pop();\n\n        if (object && !Object.prototype.hasOwnProperty.call(object, key) && state.template.options.strictVariables) {\n          var keys = Object.keys(object);\n\n          if (keys.length > 0) {\n            throw new Twig.Error('Key \"' + key + '\" for array with keys \"' + keys.join(', ') + '\" does not exist.');\n          } else {\n            throw new Twig.Error('Key \"' + key + '\" does not exist as the array is empty.');\n          }\n        } else if (object === null || object === undefined) {\n          return null;\n        } // Get the variable from the context\n\n\n        if ((0, _typeof2[\"default\"])(object) === 'object' && key in object) {\n          value = object[key];\n        } else {\n          value = null;\n        } // When resolving an expression we need to pass nextToken in case the expression is a function\n\n\n        return Twig.expression.resolveAsync.call(state, value, object, params, nextToken);\n      }).then(function (result) {\n        stack.push(result);\n      });\n    }\n  }, {\n    /**\n     * Match a null value.\n     */\n    type: Twig.expression.type._null,\n    // Match a number\n    regex: /^(null|NULL|none|NONE)/,\n    next: Twig.expression.set.operations,\n    compile: function compile(token, stack, output) {\n      delete token.match;\n      token.value = null;\n      output.push(token);\n    },\n    parse: Twig.expression.fn.parse.pushValue\n  }, {\n    /**\n     * Match the context\n     */\n    type: Twig.expression.type.context,\n    regex: /^_context/,\n    next: Twig.expression.set.operationsExtended.concat([Twig.expression.type.parameter.start]),\n    compile: Twig.expression.fn.compile.push,\n    parse: function parse(token, stack, context) {\n      stack.push(context);\n    }\n  }, {\n    /**\n     * Match a boolean\n     */\n    type: Twig.expression.type.bool,\n    regex: /^(true|TRUE|false|FALSE)/,\n    next: Twig.expression.set.operations,\n    compile: function compile(token, stack, output) {\n      token.value = token.match[0].toLowerCase() === 'true';\n      delete token.match;\n      output.push(token);\n    },\n    parse: Twig.expression.fn.parse.pushValue\n  }];\n  /**\n   * Resolve a context value.\n   *\n   * If the value is a function, it is executed with a context parameter.\n   *\n   * @param {string} key The context object key.\n   * @param {Object} context The render context.\n   */\n\n  Twig.expression.resolveAsync = function (value, context, params, nextToken, object) {\n    var state = this;\n\n    if (typeof value !== 'function') {\n      return Twig.Promise.resolve(value);\n    }\n\n    var promise = Twig.Promise.resolve(params);\n    /*\n    If value is a function, it will have been impossible during the compile stage to determine that a following\n    set of parentheses were parameters for this function.\n     Those parentheses will have therefore been marked as an expression, with their own parameters, which really\n    belong to this function.\n     Those parameters will also need parsing in case they are actually an expression to pass as parameters.\n        */\n\n    if (nextToken && nextToken.type === Twig.expression.type.parameter.end) {\n      // When parsing these parameters, we need to get them all back, not just the last item on the stack.\n      var tokensAreParameters = true;\n      promise = promise.then(function () {\n        return nextToken.params && Twig.expression.parseAsync.call(state, nextToken.params, context, tokensAreParameters);\n      }).then(function (p) {\n        // Clean up the parentheses tokens on the next loop\n        nextToken.cleanup = true;\n        return p;\n      });\n    }\n\n    return promise.then(function (params) {\n      return value.apply(object || context, params || []);\n    });\n  };\n\n  Twig.expression.resolve = function (value, context, params, nextToken, object) {\n    return Twig.async.potentiallyAsync(this, false, function () {\n      return Twig.expression.resolveAsync.call(this, value, context, params, nextToken, object);\n    });\n  };\n  /**\n   * Registry for logic handlers.\n   */\n\n\n  Twig.expression.handler = {};\n  /**\n   * Define a new expression type, available at Twig.logic.type.{type}\n   *\n   * @param {string} type The name of the new type.\n   */\n\n  Twig.expression.extendType = function (type) {\n    Twig.expression.type[type] = 'Twig.expression.type.' + type;\n  };\n  /**\n   * Extend the expression parsing functionality with a new definition.\n   *\n   * Token definitions follow this format:\n   *  {\n   *      type:     One of Twig.expression.type.[type], either pre-defined or added using\n   *                    Twig.expression.extendType\n   *\n   *      next:     Array of types from Twig.expression.type that can follow this token,\n   *\n   *      regex:    A regex or array of regex's that should match the token.\n   *\n   *      compile: function(token, stack, output) called when this token is being compiled.\n   *                   Should return an object with stack and output set.\n   *\n   *      parse:   function(token, stack, context) called when this token is being parsed.\n   *                   Should return an object with stack and context set.\n   *  }\n   *\n   * @param {Object} definition A token definition.\n   */\n\n\n  Twig.expression.extend = function (definition) {\n    if (!definition.type) {\n      throw new Twig.Error('Unable to extend logic definition. No type provided for ' + definition);\n    }\n\n    Twig.expression.handler[definition.type] = definition;\n  }; // Extend with built-in expressions\n\n\n  while (Twig.expression.definitions.length > 0) {\n    Twig.expression.extend(Twig.expression.definitions.shift());\n  }\n  /**\n   * Break an expression into tokens defined in Twig.expression.definitions.\n   *\n   * @param {string} expression The string to tokenize.\n   *\n   * @return {Array} An array of tokens.\n   */\n\n\n  Twig.expression.tokenize = function (expression) {\n    var tokens = []; // Keep an offset of the location in the expression for error messages.\n\n    var expOffset = 0; // The valid next tokens of the previous token\n\n    var next = null; // Match information\n\n    var type;\n    var regex;\n    var regexI; // The possible next token for the match\n\n    var tokenNext; // Has a match been found from the definitions\n\n    var matchFound;\n    var invalidMatches = [];\n\n    var matchFunction = function matchFunction() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      // Don't pass arguments to `Array.slice`, that is a performance killer\n      var matchI = arguments.length - 2;\n      var match = new Array(matchI);\n\n      while (matchI-- > 0) {\n        match[matchI] = args[matchI];\n      }\n\n      Twig.log.trace('Twig.expression.tokenize', 'Matched a ', type, ' regular expression of ', match);\n\n      if (next && !next.includes(type)) {\n        invalidMatches.push(type + ' cannot follow a ' + tokens[tokens.length - 1].type + ' at template:' + expOffset + ' near \\'' + match[0].slice(0, 20) + '...\\''); // Not a match, don't change the expression\n\n        return match[0];\n      }\n\n      var handler = Twig.expression.handler[type]; // Validate the token if a validation function is provided\n\n      if (handler.validate && !handler.validate(match, tokens)) {\n        return match[0];\n      }\n\n      invalidMatches = [];\n      tokens.push({\n        type: type,\n        value: match[0],\n        match: match\n      });\n      matchFound = true;\n      next = tokenNext;\n      expOffset += match[0].length; // Does the token need to return output back to the expression string\n      // e.g. a function match of cycle( might return the '(' back to the expression\n      // This allows look-ahead to differentiate between token types (e.g. functions and variable names)\n\n      if (handler.transform) {\n        return handler.transform(match, tokens);\n      }\n\n      return '';\n    };\n\n    Twig.log.debug('Twig.expression.tokenize', 'Tokenizing expression ', expression);\n\n    while (expression.length > 0) {\n      expression = expression.trim();\n\n      for (type in Twig.expression.handler) {\n        if (Object.hasOwnProperty.call(Twig.expression.handler, type)) {\n          tokenNext = Twig.expression.handler[type].next;\n          regex = Twig.expression.handler[type].regex;\n          Twig.log.trace('Checking type ', type, ' on ', expression);\n          matchFound = false;\n\n          if (Array.isArray(regex)) {\n            regexI = regex.length;\n\n            while (regexI-- > 0) {\n              expression = expression.replace(regex[regexI], matchFunction);\n            }\n          } else {\n            expression = expression.replace(regex, matchFunction);\n          } // An expression token has been matched. Break the for loop and start trying to\n          //  match the next template (if expression isn't empty.)\n\n\n          if (matchFound) {\n            break;\n          }\n        }\n      }\n\n      if (!matchFound) {\n        if (invalidMatches.length > 0) {\n          throw new Twig.Error(invalidMatches.join(' OR '));\n        } else {\n          throw new Twig.Error('Unable to parse \\'' + expression + '\\' at template position' + expOffset);\n        }\n      }\n    }\n\n    Twig.log.trace('Twig.expression.tokenize', 'Tokenized to ', tokens);\n    return tokens;\n  };\n  /**\n   * Compile an expression token.\n   *\n   * @param {Object} rawToken The uncompiled token.\n   *\n   * @return {Object} The compiled token.\n   */\n\n\n  Twig.expression.compile = function (rawToken) {\n    var expression = rawToken.value; // Tokenize expression\n\n    var tokens = Twig.expression.tokenize(expression);\n    var token = null;\n    var output = [];\n    var stack = [];\n    var tokenTemplate = null;\n    Twig.log.trace('Twig.expression.compile: ', 'Compiling ', expression); // Push tokens into RPN stack using the Shunting-yard algorithm\n    // See http://en.wikipedia.org/wiki/Shunting_yard_algorithm\n\n    while (tokens.length > 0) {\n      token = tokens.shift();\n      tokenTemplate = Twig.expression.handler[token.type];\n      Twig.log.trace('Twig.expression.compile: ', 'Compiling ', token); // Compile the template\n\n      tokenTemplate.compile(token, stack, output);\n      Twig.log.trace('Twig.expression.compile: ', 'Stack is', stack);\n      Twig.log.trace('Twig.expression.compile: ', 'Output is', output);\n    }\n\n    while (stack.length > 0) {\n      output.push(stack.pop());\n    }\n\n    Twig.log.trace('Twig.expression.compile: ', 'Final output is', output);\n    rawToken.stack = output;\n    delete rawToken.value;\n    return rawToken;\n  };\n  /**\n   * Parse an RPN expression stack within a context.\n   *\n   * @param {Array} tokens An array of compiled expression tokens.\n   * @param {Object} context The render context to parse the tokens with.\n   *\n   * @return {Object} The result of parsing all the tokens. The result\n   *                  can be anything, String, Array, Object, etc... based on\n   *                  the given expression.\n   */\n\n\n  Twig.expression.parse = function (tokens, context, tokensAreParameters, allowAsync) {\n    var state = this; // If the token isn't an array, make it one.\n\n    if (!Array.isArray(tokens)) {\n      tokens = [tokens];\n    } // The output stack\n\n\n    var stack = [];\n    var loopTokenFixups = [];\n    var binaryOperator = Twig.expression.type.operator.binary;\n    return Twig.async.potentiallyAsync(state, allowAsync, function () {\n      return Twig.async.forEach(tokens, function (token, index) {\n        var tokenTemplate = null;\n        var nextToken = null;\n        var result; // If the token is marked for cleanup, we don't need to parse it\n\n        if (token.cleanup) {\n          return;\n        } // Determine the token that follows this one so that we can pass it to the parser\n\n\n        if (tokens.length > index + 1) {\n          nextToken = tokens[index + 1];\n        }\n\n        tokenTemplate = Twig.expression.handler[token.type];\n\n        if (tokenTemplate.parse) {\n          result = tokenTemplate.parse.call(state, token, stack, context, nextToken);\n        } // Store any binary tokens for later if we are in a loop.\n\n\n        if (token.type === binaryOperator && context.loop) {\n          loopTokenFixups.push(token);\n        }\n\n        return result;\n      }).then(function () {\n        // Check every fixup and remove \"key\" as long as they still have \"params\". This covers the use case where\n        // a \":\" operator is used in a loop with a \"(expression):\" statement. We need to be able to evaluate the expression\n        var len = loopTokenFixups.length;\n        var loopTokenFixup = null;\n\n        while (len-- > 0) {\n          loopTokenFixup = loopTokenFixups[len];\n\n          if (loopTokenFixup.params && loopTokenFixup.key) {\n            delete loopTokenFixup.key;\n          }\n        } // If parse has been called with a set of tokens that are parameters, we need to return the whole stack,\n        // wrapped in an Array.\n\n\n        if (tokensAreParameters) {\n          var params = stack.splice(0);\n          stack.push(params);\n        } // Pop the final value off the stack\n\n\n        return stack.pop();\n      });\n    });\n  };\n\n  return Twig;\n};\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar arrayWithoutHoles = __webpack_require__(11);\n\nvar iterableToArray = __webpack_require__(12);\n\nvar nonIterableSpread = __webpack_require__(13);\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports) {\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports) {\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// ## twig.expression.operator.js\n//\n// This file handles operator lookups and parsing.\nmodule.exports = function (Twig) {\n  'use strict';\n  /**\n   * Operator associativity constants.\n   */\n\n  Twig.expression.operator = {\n    leftToRight: 'leftToRight',\n    rightToLeft: 'rightToLeft'\n  };\n\n  var containment = function containment(a, b) {\n    if (b === undefined || b === null) {\n      return null;\n    }\n\n    if (b.indexOf !== undefined) {\n      // String\n      return (a === b || a !== '') && b.includes(a);\n    }\n\n    var el;\n\n    for (el in b) {\n      if (Object.hasOwnProperty.call(b, el) && b[el] === a) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Get the precidence and associativity of an operator. These follow the order that C/C++ use.\n   * See http://en.wikipedia.org/wiki/Operators_in_C_and_C++ for the table of values.\n   */\n\n\n  Twig.expression.operator.lookup = function (operator, token) {\n    switch (operator) {\n      case '..':\n        token.precidence = 20;\n        token.associativity = Twig.expression.operator.leftToRight;\n        break;\n\n      case ',':\n        token.precidence = 18;\n        token.associativity = Twig.expression.operator.leftToRight;\n        break;\n      // Ternary\n\n      case '?:':\n      case '?':\n      case ':':\n        token.precidence = 16;\n        token.associativity = Twig.expression.operator.rightToLeft;\n        break;\n      // Null-coalescing operator\n\n      case '??':\n        token.precidence = 15;\n        token.associativity = Twig.expression.operator.rightToLeft;\n        break;\n\n      case 'or':\n        token.precidence = 14;\n        token.associativity = Twig.expression.operator.leftToRight;\n        break;\n\n      case 'and':\n        token.precidence = 13;\n        token.associativity = Twig.expression.operator.leftToRight;\n        break;\n\n      case 'b-or':\n        token.precidence = 12;\n        token.associativity = Twig.expression.operator.leftToRight;\n        break;\n\n      case 'b-xor':\n        token.precidence = 11;\n        token.associativity = Twig.expression.operator.leftToRight;\n        break;\n\n      case 'b-and':\n        token.precidence = 10;\n        token.associativity = Twig.expression.operator.leftToRight;\n        break;\n\n      case '==':\n      case '!=':\n        token.precidence = 9;\n        token.associativity = Twig.expression.operator.leftToRight;\n        break;\n\n      case '<':\n      case '<=':\n      case '>':\n      case '>=':\n      case 'not in':\n      case 'in':\n        token.precidence = 8;\n        token.associativity = Twig.expression.operator.leftToRight;\n        break;\n\n      case '~': // String concatination\n\n      case '+':\n      case '-':\n        token.precidence = 6;\n        token.associativity = Twig.expression.operator.leftToRight;\n        break;\n\n      case '//':\n      case '**':\n      case '*':\n      case '/':\n      case '%':\n        token.precidence = 5;\n        token.associativity = Twig.expression.operator.leftToRight;\n        break;\n\n      case 'not':\n        token.precidence = 3;\n        token.associativity = Twig.expression.operator.rightToLeft;\n        break;\n\n      case 'matches':\n        token.precidence = 8;\n        token.associativity = Twig.expression.operator.leftToRight;\n        break;\n\n      case 'starts with':\n        token.precidence = 8;\n        token.associativity = Twig.expression.operator.leftToRight;\n        break;\n\n      case 'ends with':\n        token.precidence = 8;\n        token.associativity = Twig.expression.operator.leftToRight;\n        break;\n\n      default:\n        throw new Twig.Error('Failed to lookup operator: ' + operator + ' is an unknown operator.');\n    }\n\n    token.operator = operator;\n    return token;\n  };\n  /**\n   * Handle operations on the RPN stack.\n   *\n   * Returns the updated stack.\n   */\n\n\n  Twig.expression.operator.parse = function (operator, stack) {\n    Twig.log.trace('Twig.expression.operator.parse: ', 'Handling ', operator);\n    var a;\n    var b;\n    var c;\n\n    if (operator === '?') {\n      c = stack.pop();\n    }\n\n    b = stack.pop();\n\n    if (operator !== 'not') {\n      a = stack.pop();\n    }\n\n    if (operator !== 'in' && operator !== 'not in' && operator !== '??') {\n      if (a && Array.isArray(a)) {\n        a = a.length;\n      }\n\n      if (operator !== '?' && b && Array.isArray(b)) {\n        b = b.length;\n      }\n    }\n\n    if (operator === 'matches') {\n      if (b && typeof b === 'string') {\n        var reParts = b.match(/^\\/(.*)\\/([gims]?)$/);\n        var reBody = reParts[1];\n        var reFlags = reParts[2];\n        b = new RegExp(reBody, reFlags);\n      }\n    }\n\n    switch (operator) {\n      case ':':\n        // Ignore\n        break;\n\n      case '??':\n        if (a === undefined) {\n          a = b;\n          b = c;\n          c = undefined;\n        }\n\n        if (a !== undefined && a !== null) {\n          stack.push(a);\n        } else {\n          stack.push(b);\n        }\n\n        break;\n\n      case '?:':\n        if (Twig.lib.boolval(a)) {\n          stack.push(a);\n        } else {\n          stack.push(b);\n        }\n\n        break;\n\n      case '?':\n        if (a === undefined) {\n          // An extended ternary.\n          a = b;\n          b = c;\n          c = undefined;\n        }\n\n        if (Twig.lib.boolval(a)) {\n          stack.push(b);\n        } else {\n          stack.push(c);\n        }\n\n        break;\n\n      case '+':\n        b = parseFloat(b);\n        a = parseFloat(a);\n        stack.push(a + b);\n        break;\n\n      case '-':\n        b = parseFloat(b);\n        a = parseFloat(a);\n        stack.push(a - b);\n        break;\n\n      case '*':\n        b = parseFloat(b);\n        a = parseFloat(a);\n        stack.push(a * b);\n        break;\n\n      case '/':\n        b = parseFloat(b);\n        a = parseFloat(a);\n        stack.push(a / b);\n        break;\n\n      case '//':\n        b = parseFloat(b);\n        a = parseFloat(a);\n        stack.push(Math.floor(a / b));\n        break;\n\n      case '%':\n        b = parseFloat(b);\n        a = parseFloat(a);\n        stack.push(a % b);\n        break;\n\n      case '~':\n        stack.push((typeof a !== 'undefined' && a !== null ? a.toString() : '') + (typeof b !== 'undefined' && b !== null ? b.toString() : ''));\n        break;\n\n      case 'not':\n      case '!':\n        stack.push(!Twig.lib.boolval(b));\n        break;\n\n      case '<':\n        stack.push(a < b);\n        break;\n\n      case '<=':\n        stack.push(a <= b);\n        break;\n\n      case '>':\n        stack.push(a > b);\n        break;\n\n      case '>=':\n        stack.push(a >= b);\n        break;\n\n      case '===':\n        stack.push(a === b);\n        break;\n\n      case '==':\n        /* eslint-disable-next-line eqeqeq */\n        stack.push(a == b);\n        break;\n\n      case '!==':\n        stack.push(a !== b);\n        break;\n\n      case '!=':\n        /* eslint-disable-next-line eqeqeq */\n        stack.push(a != b);\n        break;\n\n      case 'or':\n        stack.push(Twig.lib.boolval(a) || Twig.lib.boolval(b));\n        break;\n\n      case 'b-or':\n        stack.push(a | b);\n        break;\n\n      case 'b-xor':\n        stack.push(a ^ b);\n        break;\n\n      case 'and':\n        stack.push(Twig.lib.boolval(a) && Twig.lib.boolval(b));\n        break;\n\n      case 'b-and':\n        stack.push(a & b);\n        break;\n\n      case '**':\n        stack.push(Math.pow(a, b));\n        break;\n\n      case 'not in':\n        stack.push(!containment(a, b));\n        break;\n\n      case 'in':\n        stack.push(containment(a, b));\n        break;\n\n      case 'matches':\n        stack.push(b.test(a));\n        break;\n\n      case 'starts with':\n        stack.push(typeof a === 'string' && a.indexOf(b) === 0);\n        break;\n\n      case 'ends with':\n        stack.push(typeof a === 'string' && a.includes(b, a.length - b.length));\n        break;\n\n      case '..':\n        stack.push(Twig.functions.range(a, b));\n        break;\n\n      default:\n        throw new Twig.Error('Failed to parse operator: ' + operator + ' is an unknown operator.');\n    }\n  };\n\n  return Twig;\n};\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __webpack_require__(0);\n\nvar _typeof2 = _interopRequireDefault(__webpack_require__(1));\n\n// ## twig.filters.js\n//\n// This file handles parsing filters.\nmodule.exports = function (Twig) {\n  // Determine object type\n  function is(type, obj) {\n    var clas = Object.prototype.toString.call(obj).slice(8, -1);\n    return obj !== undefined && obj !== null && clas === type;\n  }\n\n  Twig.filters = {\n    // String Filters\n    upper: function upper(value) {\n      if (typeof value !== 'string') {\n        return value;\n      }\n\n      return value.toUpperCase();\n    },\n    lower: function lower(value) {\n      if (typeof value !== 'string') {\n        return value;\n      }\n\n      return value.toLowerCase();\n    },\n    capitalize: function capitalize(value) {\n      if (typeof value !== 'string') {\n        return value;\n      }\n\n      return value.slice(0, 1).toUpperCase() + value.toLowerCase().slice(1);\n    },\n    title: function title(value) {\n      if (typeof value !== 'string') {\n        return value;\n      }\n\n      return value.toLowerCase().replace(/(^|\\s)([a-z])/g, function (m, p1, p2) {\n        return p1 + p2.toUpperCase();\n      });\n    },\n    length: function length(value) {\n      if (Twig.lib.is('Array', value) || typeof value === 'string') {\n        return value.length;\n      }\n\n      if (Twig.lib.is('Object', value)) {\n        if (value._keys === undefined) {\n          return Object.keys(value).length;\n        }\n\n        return value._keys.length;\n      }\n\n      return 0;\n    },\n    // Array/Object Filters\n    reverse: function reverse(value) {\n      if (is('Array', value)) {\n        return value.reverse();\n      }\n\n      if (is('String', value)) {\n        return value.split('').reverse().join('');\n      }\n\n      if (is('Object', value)) {\n        var keys = value._keys || Object.keys(value).reverse();\n        value._keys = keys;\n        return value;\n      }\n    },\n    sort: function sort(value) {\n      if (is('Array', value)) {\n        return value.sort();\n      }\n\n      if (is('Object', value)) {\n        // Sorting objects isn't obvious since the order of\n        // returned keys isn't guaranteed in JavaScript.\n        // Because of this we use a \"hidden\" key called _keys to\n        // store the keys in the order we want to return them.\n        delete value._keys;\n        var keys = Object.keys(value);\n        var sortedKeys = keys.sort(function (a, b) {\n          var a1;\n          var b1; // If a and b are comparable, we're fine :-)\n\n          if (value[a] > value[b] === !(value[a] <= value[b])) {\n            return value[a] > value[b] ? 1 : value[a] < value[b] ? -1 : 0;\n          } // If a and b can be parsed as numbers, we can compare\n          // their numeric value\n\n\n          if (!isNaN(a1 = parseFloat(value[a])) && !isNaN(b1 = parseFloat(value[b]))) {\n            return a1 > b1 ? 1 : a1 < b1 ? -1 : 0;\n          } // If one of the values is a string, we convert the\n          // other value to string as well\n\n\n          if (typeof value[a] === 'string') {\n            return value[a] > value[b].toString() ? 1 : value[a] < value[b].toString() ? -1 : 0;\n          }\n\n          if (typeof value[b] === 'string') {\n            return value[a].toString() > value[b] ? 1 : value[a].toString() < value[b] ? -1 : 0;\n          } // Everything failed - return 'null' as sign, that\n          // the values are not comparable\n\n\n          return null;\n        });\n        value._keys = sortedKeys;\n        return value;\n      }\n    },\n    keys: function keys(value) {\n      if (value === undefined || value === null) {\n        return;\n      }\n\n      var keyset = value._keys || Object.keys(value);\n      var output = [];\n      keyset.forEach(function (key) {\n        if (key === '_keys') {\n          return;\n        } // Ignore the _keys property\n\n\n        if (Object.hasOwnProperty.call(value, key)) {\n          output.push(key);\n        }\n      });\n      return output;\n    },\n\n    /* eslint-disable-next-line camelcase */\n    url_encode: function url_encode(value) {\n      if (value === undefined || value === null) {\n        return;\n      }\n\n      if (Twig.lib.is('Object', value)) {\n        var serialize = function serialize(obj, prefix) {\n          var result = [];\n          var keyset = obj._keys || Object.keys(obj);\n          keyset.forEach(function (key) {\n            if (!Object.prototype.hasOwnProperty.call(obj, key)) {\n              return;\n            }\n\n            var resultKey = prefix ? prefix + '[' + key + ']' : key;\n            var resultValue = obj[key];\n            result.push(Twig.lib.is('Object', resultValue) || Array.isArray(resultValue) ? serialize(resultValue, resultKey) : encodeURIComponent(resultKey) + '=' + encodeURIComponent(resultValue));\n          });\n          return result.join('&amp;');\n        };\n\n        return serialize(value);\n      }\n\n      var result = encodeURIComponent(value);\n      result = result.replace('\\'', '%27');\n      return result;\n    },\n    join: function join(value, params) {\n      if (value === undefined || value === null) {\n        return;\n      }\n\n      var joinStr = '';\n      var output = [];\n      var keyset = null;\n\n      if (params && params[0]) {\n        joinStr = params[0];\n      }\n\n      if (is('Array', value)) {\n        output = value;\n      } else {\n        keyset = value._keys || Object.keys(value);\n        keyset.forEach(function (key) {\n          if (key === '_keys') {\n            return;\n          } // Ignore the _keys property\n\n\n          if (Object.hasOwnProperty.call(value, key)) {\n            output.push(value[key]);\n          }\n        });\n      }\n\n      return output.join(joinStr);\n    },\n    \"default\": function _default(value, params) {\n      if (params !== undefined && params.length > 1) {\n        throw new Twig.Error('default filter expects one argument');\n      }\n\n      if (value === undefined || value === null || value === '') {\n        if (params === undefined) {\n          return '';\n        }\n\n        return params[0];\n      }\n\n      return value;\n    },\n\n    /* eslint-disable-next-line camelcase */\n    json_encode: function json_encode(value) {\n      if (value === undefined || value === null) {\n        return 'null';\n      }\n\n      if ((0, _typeof2[\"default\"])(value) === 'object' && is('Array', value)) {\n        var output = [];\n        value.forEach(function (v) {\n          output.push(Twig.filters.json_encode(v));\n        });\n        return '[' + output.join(',') + ']';\n      }\n\n      if ((0, _typeof2[\"default\"])(value) === 'object' && is('Date', value)) {\n        return '\"' + value.toISOString() + '\"';\n      }\n\n      if ((0, _typeof2[\"default\"])(value) === 'object') {\n        var keyset = value._keys || Object.keys(value);\n        var _output = [];\n        keyset.forEach(function (key) {\n          _output.push(JSON.stringify(key) + ':' + Twig.filters.json_encode(value[key]));\n        });\n        return '{' + _output.join(',') + '}';\n      }\n\n      return JSON.stringify(value);\n    },\n    merge: function merge(value, params) {\n      var obj = [];\n      var arrIndex = 0;\n      var keyset = []; // Check to see if all the objects being merged are arrays\n\n      if (is('Array', value)) {\n        params.forEach(function (param) {\n          if (!is('Array', param)) {\n            obj = {};\n          }\n        });\n      } else {\n        // Create obj as an Object\n        obj = {};\n      }\n\n      if (!is('Array', obj)) {\n        obj._keys = [];\n      }\n\n      if (is('Array', value)) {\n        value.forEach(function (val) {\n          if (obj._keys) {\n            obj._keys.push(arrIndex);\n          }\n\n          obj[arrIndex] = val;\n          arrIndex++;\n        });\n      } else {\n        keyset = value._keys || Object.keys(value);\n        keyset.forEach(function (key) {\n          obj[key] = value[key];\n\n          obj._keys.push(key); // Handle edge case where a number index in an object is greater than\n          //   the array counter. In such a case, the array counter is increased\n          //   one past the index.\n          //\n          // Example {{ [\"a\", \"b\"]|merge({\"4\":\"value\"}, [\"c\", \"d\"])\n          // Without this, d would have an index of \"4\" and overwrite the value\n          //   of \"value\"\n\n\n          var intKey = parseInt(key, 10);\n\n          if (!isNaN(intKey) && intKey >= arrIndex) {\n            arrIndex = intKey + 1;\n          }\n        });\n      } // Mixin the merge arrays\n\n\n      params.forEach(function (param) {\n        if (is('Array', param)) {\n          param.forEach(function (val) {\n            if (obj._keys) {\n              obj._keys.push(arrIndex);\n            }\n\n            obj[arrIndex] = val;\n            arrIndex++;\n          });\n        } else {\n          keyset = param._keys || Object.keys(param);\n          keyset.forEach(function (key) {\n            if (!obj[key]) {\n              obj._keys.push(key);\n            }\n\n            obj[key] = param[key];\n            var intKey = parseInt(key, 10);\n\n            if (!isNaN(intKey) && intKey >= arrIndex) {\n              arrIndex = intKey + 1;\n            }\n          });\n        }\n      });\n\n      if (params.length === 0) {\n        throw new Twig.Error('Filter merge expects at least one parameter');\n      }\n\n      return obj;\n    },\n    date: function date(value, params) {\n      var date = Twig.functions.date(value);\n      var format = params && Boolean(params.length) ? params[0] : 'F j, Y H:i';\n      return Twig.lib.date(format.replace(/\\\\\\\\/g, '\\\\'), date);\n    },\n\n    /* eslint-disable-next-line camelcase */\n    date_modify: function date_modify(value, params) {\n      if (value === undefined || value === null) {\n        return;\n      }\n\n      if (params === undefined || params.length !== 1) {\n        throw new Twig.Error('date_modify filter expects 1 argument');\n      }\n\n      var modifyText = params[0];\n      var time;\n\n      if (Twig.lib.is('Date', value)) {\n        time = Twig.lib.strtotime(modifyText, value.getTime() / 1000);\n      }\n\n      if (Twig.lib.is('String', value)) {\n        time = Twig.lib.strtotime(modifyText, Twig.lib.strtotime(value));\n      }\n\n      if (Twig.lib.is('Number', value)) {\n        time = Twig.lib.strtotime(modifyText, value);\n      }\n\n      return new Date(time * 1000);\n    },\n    replace: function replace(value, params) {\n      if (value === undefined || value === null) {\n        return;\n      }\n\n      var pairs = params[0];\n      var tag;\n\n      for (tag in pairs) {\n        if (Object.hasOwnProperty.call(pairs, tag) && tag !== '_keys') {\n          value = Twig.lib.replaceAll(value, tag, pairs[tag]);\n        }\n      }\n\n      return value;\n    },\n    format: function format(value, params) {\n      if (value === undefined || value === null) {\n        return;\n      }\n\n      return Twig.lib.vsprintf(value, params);\n    },\n    striptags: function striptags(value, allowed) {\n      if (value === undefined || value === null) {\n        return;\n      }\n\n      return Twig.lib.stripTags(value, allowed);\n    },\n    escape: function escape(value, params) {\n      if (value === undefined || value === null || value === '') {\n        return;\n      }\n\n      var strategy = 'html';\n\n      if (params && Boolean(params.length) && params[0] !== true) {\n        strategy = params[0];\n      }\n\n      if (strategy === 'html') {\n        var rawValue = value.toString().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#039;');\n        return new Twig.Markup(rawValue, 'html');\n      }\n\n      if (strategy === 'js') {\n        var _rawValue = value.toString();\n\n        var result = '';\n\n        for (var i = 0; i < _rawValue.length; i++) {\n          if (_rawValue[i].match(/^[a-zA-Z0-9,._]$/)) {\n            result += _rawValue[i];\n          } else {\n            var _char = _rawValue.charAt(i);\n\n            var charCode = _rawValue.charCodeAt(i); // A few characters have short escape sequences in JSON and JavaScript.\n            // Escape sequences supported only by JavaScript, not JSON, are ommitted.\n            // \\\" is also supported but omitted, because the resulting string is not HTML safe.\n\n\n            var shortMap = {\n              '\\\\': '\\\\\\\\',\n              '/': '\\\\/',\n              \"\\b\": '\\\\b',\n              \"\\f\": '\\\\f',\n              \"\\n\": '\\\\n',\n              \"\\r\": '\\\\r',\n              \"\\t\": '\\\\t'\n            };\n\n            if (shortMap[_char]) {\n              result += shortMap[_char];\n            } else {\n              result += Twig.lib.sprintf(\"\\\\u%04s\", charCode.toString(16).toUpperCase());\n            }\n          }\n        }\n\n        return new Twig.Markup(result, 'js');\n      }\n\n      if (strategy === 'css') {\n        var _rawValue2 = value.toString();\n\n        var _result = '';\n\n        for (var _i = 0; _i < _rawValue2.length; _i++) {\n          if (_rawValue2[_i].match(/^[a-zA-Z0-9]$/)) {\n            _result += _rawValue2[_i];\n          } else {\n            var _charCode = _rawValue2.charCodeAt(_i);\n\n            _result += '\\\\' + _charCode.toString(16).toUpperCase() + ' ';\n          }\n        }\n\n        return new Twig.Markup(_result, 'css');\n      }\n\n      if (strategy === 'url') {\n        var _result2 = Twig.filters.url_encode(value);\n\n        return new Twig.Markup(_result2, 'url');\n      }\n\n      if (strategy === 'html_attr') {\n        var _rawValue3 = value.toString();\n\n        var _result3 = '';\n\n        for (var _i2 = 0; _i2 < _rawValue3.length; _i2++) {\n          if (_rawValue3[_i2].match(/^[a-zA-Z0-9,.\\-_]$/)) {\n            _result3 += _rawValue3[_i2];\n          } else if (_rawValue3[_i2].match(/^[&<>\"]$/)) {\n            _result3 += _rawValue3[_i2].replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n          } else {\n            var _charCode2 = _rawValue3.charCodeAt(_i2); // The following replaces characters undefined in HTML with\n            // the hex entity for the Unicode replacement character.\n\n\n            if (_charCode2 <= 0x1F && _charCode2 !== 0x09 && _charCode2 !== 0x0A && _charCode2 !== 0x0D) {\n              _result3 += '&#xFFFD;';\n            } else if (_charCode2 < 0x80) {\n              _result3 += Twig.lib.sprintf('&#x%02s;', _charCode2.toString(16).toUpperCase());\n            } else {\n              _result3 += Twig.lib.sprintf('&#x%04s;', _charCode2.toString(16).toUpperCase());\n            }\n          }\n        }\n\n        return new Twig.Markup(_result3, 'html_attr');\n      }\n\n      throw new Twig.Error('escape strategy unsupported');\n    },\n\n    /* Alias of escape */\n    e: function e(value, params) {\n      return Twig.filters.escape(value, params);\n    },\n    nl2br: function nl2br(value) {\n      if (value === undefined || value === null || value === '') {\n        return;\n      }\n\n      var linebreakTag = 'BACKSLASH_n_replace';\n      var br = '<br />' + linebreakTag;\n      value = Twig.filters.escape(value).replace(/\\r\\n/g, br).replace(/\\r/g, br).replace(/\\n/g, br);\n      value = Twig.lib.replaceAll(value, linebreakTag, '\\n');\n      return new Twig.Markup(value);\n    },\n\n    /**\n     * Adapted from: http://phpjs.org/functions/number_format:481\n     */\n\n    /* eslint-disable-next-line camelcase */\n    number_format: function number_format(value, params) {\n      var number = value;\n      var decimals = params && params[0] ? params[0] : undefined;\n      var dec = params && params[1] !== undefined ? params[1] : '.';\n      var sep = params && params[2] !== undefined ? params[2] : ',';\n      number = String(number).replace(/[^0-9+\\-Ee.]/g, '');\n      var n = isFinite(Number(number)) ? Number(number) : 0;\n      var prec = isFinite(Number(decimals)) ? Math.abs(decimals) : 0;\n      var s = '';\n\n      var toFixedFix = function toFixedFix(n, prec) {\n        var k = Math.pow(10, prec);\n        return String(Math.round(n * k) / k);\n      }; // Fix for IE parseFloat(0.55).toFixed(0) = 0;\n\n\n      s = (prec ? toFixedFix(n, prec) : String(Math.round(n))).split('.');\n\n      if (s[0].length > 3) {\n        s[0] = s[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, sep);\n      }\n\n      if ((s[1] || '').length < prec) {\n        s[1] = s[1] || '';\n        s[1] += new Array(prec - s[1].length + 1).join('0');\n      }\n\n      return s.join(dec);\n    },\n    trim: function trim(value, params) {\n      if (value === undefined || value === null) {\n        return;\n      }\n\n      var str = String(value);\n      var whitespace;\n\n      if (params && params[0]) {\n        whitespace = String(params[0]);\n      } else {\n        whitespace = \" \\n\\r\\t\\f\\x0B\\xA0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u2028\\u2029\\u3000\";\n      }\n\n      for (var i = 0; i < str.length; i++) {\n        if (!whitespace.includes(str.charAt(i))) {\n          str = str.slice(Math.max(0, i));\n          break;\n        }\n      }\n\n      for (var _i3 = str.length - 1; _i3 >= 0; _i3--) {\n        if (!whitespace.includes(str.charAt(_i3))) {\n          str = str.slice(0, Math.max(0, _i3 + 1));\n          break;\n        }\n      }\n\n      return whitespace.includes(str.charAt(0)) ? '' : str;\n    },\n    truncate: function truncate(value, params) {\n      var length = 30;\n      var preserve = false;\n      var separator = '...';\n      value = String(value);\n\n      if (params) {\n        if (params[0]) {\n          length = params[0];\n        }\n\n        if (params[1]) {\n          preserve = params[1];\n        }\n\n        if (params[2]) {\n          separator = params[2];\n        }\n      }\n\n      if (value.length > length) {\n        if (preserve) {\n          length = value.indexOf(' ', length);\n\n          if (length === -1) {\n            return value;\n          }\n        }\n\n        value = value.slice(0, length) + separator;\n      }\n\n      return value;\n    },\n    slice: function slice(value, params) {\n      if (value === undefined || value === null) {\n        return;\n      }\n\n      if (params === undefined || params.length === 0) {\n        throw new Twig.Error('slice filter expects at least 1 argument');\n      } // Default to start of string\n\n\n      var start = params[0] || 0; // Default to length of string\n\n      var length = params.length > 1 ? params[1] : value.length; // Handle negative start values\n\n      var startIndex = start >= 0 ? start : Math.max(value.length + start, 0);\n\n      if (Twig.lib.is('Array', value)) {\n        var output = [];\n\n        for (var i = startIndex; i < startIndex + length && i < value.length; i++) {\n          output.push(value[i]);\n        }\n\n        return output;\n      }\n\n      if (Twig.lib.is('String', value)) {\n        return value.slice(startIndex, startIndex + length);\n      }\n\n      throw new Twig.Error('slice filter expects value to be an array or string');\n    },\n    abs: function abs(value) {\n      if (value === undefined || value === null) {\n        return;\n      }\n\n      return Math.abs(value);\n    },\n    first: function first(value) {\n      if (is('Array', value)) {\n        return value[0];\n      }\n\n      if (is('Object', value)) {\n        if ('_keys' in value) {\n          return value[value._keys[0]];\n        }\n      } else if (typeof value === 'string') {\n        return value.slice(0, 1);\n      }\n    },\n    split: function split(value, params) {\n      if (value === undefined || value === null) {\n        return;\n      }\n\n      if (params === undefined || params.length === 0 || params.length > 2) {\n        throw new Twig.Error('split filter expects 1 or 2 argument');\n      }\n\n      if (Twig.lib.is('String', value)) {\n        var delimiter = params[0];\n        var limit = params[1];\n        var split = value.split(delimiter);\n\n        if (limit === undefined) {\n          return split;\n        }\n\n        if (limit < 0) {\n          return value.split(delimiter, split.length + limit);\n        }\n\n        var limitedSplit = [];\n\n        if (delimiter === '') {\n          // Empty delimiter\n          // \"aabbcc\"|split('', 2)\n          //     -> ['aa', 'bb', 'cc']\n          while (split.length > 0) {\n            var temp = '';\n\n            for (var i = 0; i < limit && split.length > 0; i++) {\n              temp += split.shift();\n            }\n\n            limitedSplit.push(temp);\n          }\n        } else {\n          // Non-empty delimiter\n          // \"one,two,three,four,five\"|split(',', 3)\n          //     -> ['one', 'two', 'three,four,five']\n          for (var _i4 = 0; _i4 < limit - 1 && split.length > 0; _i4++) {\n            limitedSplit.push(split.shift());\n          }\n\n          if (split.length > 0) {\n            limitedSplit.push(split.join(delimiter));\n          }\n        }\n\n        return limitedSplit;\n      }\n\n      throw new Twig.Error('split filter expects value to be a string');\n    },\n    last: function last(value) {\n      if (Twig.lib.is('Object', value)) {\n        var keys;\n\n        if (value._keys === undefined) {\n          keys = Object.keys(value);\n        } else {\n          keys = value._keys;\n        }\n\n        return value[keys[keys.length - 1]];\n      }\n\n      if (Twig.lib.is('Number', value)) {\n        return value.toString().slice(-1);\n      } // String|array\n\n\n      return value[value.length - 1];\n    },\n    raw: function raw(value) {\n      return new Twig.Markup(value || '');\n    },\n    batch: function batch(items, params) {\n      var size = params.shift();\n      var fill = params.shift();\n      var last;\n      var missing;\n\n      if (!Twig.lib.is('Array', items)) {\n        throw new Twig.Error('batch filter expects items to be an array');\n      }\n\n      if (!Twig.lib.is('Number', size)) {\n        throw new Twig.Error('batch filter expects size to be a number');\n      }\n\n      size = Math.ceil(size);\n      var result = Twig.lib.chunkArray(items, size);\n\n      if (fill && items.length % size !== 0) {\n        last = result.pop();\n        missing = size - last.length;\n\n        while (missing--) {\n          last.push(fill);\n        }\n\n        result.push(last);\n      }\n\n      return result;\n    },\n    round: function round(value, params) {\n      params = params || [];\n      var precision = params.length > 0 ? params[0] : 0;\n      var method = params.length > 1 ? params[1] : 'common';\n      value = parseFloat(value);\n\n      if (precision && !Twig.lib.is('Number', precision)) {\n        throw new Twig.Error('round filter expects precision to be a number');\n      }\n\n      if (method === 'common') {\n        return Twig.lib.round(value, precision);\n      }\n\n      if (!Twig.lib.is('Function', Math[method])) {\n        throw new Twig.Error('round filter expects method to be \\'floor\\', \\'ceil\\', or \\'common\\'');\n      }\n\n      return Math[method](value * Math.pow(10, precision)) / Math.pow(10, precision);\n    },\n    spaceless: function spaceless(value) {\n      return value.replace(/>\\s+</g, '><').trim();\n    }\n  };\n\n  Twig.filter = function (filter, value, params) {\n    var state = this;\n\n    if (!Twig.filters[filter]) {\n      throw new Twig.Error('Unable to find filter ' + filter);\n    }\n\n    return Twig.filters[filter].call(state, value, params);\n  };\n\n  Twig.filter.extend = function (filter, definition) {\n    Twig.filters[filter] = definition;\n  };\n\n  return Twig;\n};\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __webpack_require__(0);\n\nvar _typeof2 = _interopRequireDefault(__webpack_require__(1));\n\n// ## twig.functions.js\n//\n// This file handles parsing filters.\nmodule.exports = function (Twig) {\n  /**\n   * @constant\n   * @type {string}\n   */\n  var TEMPLATE_NOT_FOUND_MESSAGE = 'Template \"{name}\" is not defined.';\n  Twig.functions = {\n    //  Attribute, block, constant, date, dump, parent, random,.\n    // Range function from http://phpjs.org/functions/range:499\n    // Used under an MIT License\n    range: function range(low, high, step) {\n      // http://kevin.vanzonneveld.net\n      // +   original by: Waldo Malqui Silva\n      // *     example 1: range ( 0, 12 );\n      // *     returns 1: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n      // *     example 2: range( 0, 100, 10 );\n      // *     returns 2: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n      // *     example 3: range( 'a', 'i' );\n      // *     returns 3: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']\n      // *     example 4: range( 'c', 'a' );\n      // *     returns 4: ['c', 'b', 'a']\n      var matrix = [];\n      var inival;\n      var endval;\n      var walker = step || 1;\n      var chars = false;\n\n      if (!isNaN(low) && !isNaN(high)) {\n        inival = parseInt(low, 10);\n        endval = parseInt(high, 10);\n      } else if (isNaN(low) && isNaN(high)) {\n        chars = true;\n        inival = low.charCodeAt(0);\n        endval = high.charCodeAt(0);\n      } else {\n        inival = isNaN(low) ? 0 : low;\n        endval = isNaN(high) ? 0 : high;\n      }\n\n      var plus = !(inival > endval);\n\n      if (plus) {\n        while (inival <= endval) {\n          matrix.push(chars ? String.fromCharCode(inival) : inival);\n          inival += walker;\n        }\n      } else {\n        while (inival >= endval) {\n          matrix.push(chars ? String.fromCharCode(inival) : inival);\n          inival -= walker;\n        }\n      }\n\n      return matrix;\n    },\n    cycle: function cycle(arr, i) {\n      var pos = i % arr.length;\n      return arr[pos];\n    },\n    dump: function dump() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      // Don't pass arguments to `Array.slice`, that is a performance killer\n      var argsCopy = [].concat(args);\n      var state = this;\n      var EOL = '\\n';\n      var indentChar = '  ';\n      var indentTimes = 0;\n      var out = '';\n\n      var indent = function indent(times) {\n        var ind = '';\n\n        while (times > 0) {\n          times--;\n          ind += indentChar;\n        }\n\n        return ind;\n      };\n\n      var displayVar = function displayVar(variable) {\n        out += indent(indentTimes);\n\n        if ((0, _typeof2[\"default\"])(variable) === 'object') {\n          dumpVar(variable);\n        } else if (typeof variable === 'function') {\n          out += 'function()' + EOL;\n        } else if (typeof variable === 'string') {\n          out += 'string(' + variable.length + ') \"' + variable + '\"' + EOL;\n        } else if (typeof variable === 'number') {\n          out += 'number(' + variable + ')' + EOL;\n        } else if (typeof variable === 'boolean') {\n          out += 'bool(' + variable + ')' + EOL;\n        }\n      };\n\n      var dumpVar = function dumpVar(variable) {\n        var i;\n\n        if (variable === null) {\n          out += 'NULL' + EOL;\n        } else if (variable === undefined) {\n          out += 'undefined' + EOL;\n        } else if ((0, _typeof2[\"default\"])(variable) === 'object') {\n          out += indent(indentTimes) + (0, _typeof2[\"default\"])(variable);\n          indentTimes++;\n\n          out += '(' + function (obj) {\n            var size = 0;\n            var key;\n\n            for (key in obj) {\n              if (Object.hasOwnProperty.call(obj, key)) {\n                size++;\n              }\n            }\n\n            return size;\n          }(variable) + ') {' + EOL;\n\n          for (i in variable) {\n            if (Object.hasOwnProperty.call(variable, i)) {\n              out += indent(indentTimes) + '[' + i + ']=> ' + EOL;\n              displayVar(variable[i]);\n            }\n          }\n\n          indentTimes--;\n          out += indent(indentTimes) + '}' + EOL;\n        } else {\n          displayVar(variable);\n        }\n      }; // Handle no argument case by dumping the entire render context\n\n\n      if (argsCopy.length === 0) {\n        argsCopy.push(state.context);\n      }\n\n      argsCopy.forEach(function (variable) {\n        dumpVar(variable);\n      });\n      return out;\n    },\n    date: function date(_date) {\n      var dateObj;\n\n      if (_date === undefined || _date === null || _date === '') {\n        dateObj = new Date();\n      } else if (Twig.lib.is('Date', _date)) {\n        dateObj = _date;\n      } else if (Twig.lib.is('String', _date)) {\n        if (_date.match(/^\\d+$/)) {\n          dateObj = new Date(_date * 1000);\n        } else {\n          dateObj = new Date(Twig.lib.strtotime(_date) * 1000);\n        }\n      } else if (Twig.lib.is('Number', _date)) {\n        // Timestamp\n        dateObj = new Date(_date * 1000);\n      } else {\n        throw new Twig.Error('Unable to parse date ' + _date);\n      }\n\n      return dateObj;\n    },\n    block: function block(blockName) {\n      var state = this;\n      var block = state.getBlock(blockName);\n\n      if (block !== undefined) {\n        return block.render(state, state.context);\n      }\n    },\n    parent: function parent() {\n      var state = this;\n      return state.getBlock(state.getNestingStackToken(Twig.logic.type.block).blockName, true).render(state, state.context);\n    },\n    attribute: function attribute(object, method, params) {\n      if (Twig.lib.is('Object', object)) {\n        if (Object.hasOwnProperty.call(object, method)) {\n          if (typeof object[method] === 'function') {\n            return object[method].apply(undefined, params);\n          }\n\n          return object[method];\n        }\n      } // Array will return element 0-index\n\n\n      return object ? object[method] || undefined : undefined;\n    },\n    max: function max(values) {\n      if (Twig.lib.is('Object', values)) {\n        delete values._keys;\n        return Twig.lib.max(values);\n      }\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      return Reflect.apply(Twig.lib.max, null, [values].concat(args));\n    },\n    min: function min(values) {\n      if (Twig.lib.is('Object', values)) {\n        delete values._keys;\n        return Twig.lib.min(values);\n      }\n\n      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n      }\n\n      return Reflect.apply(Twig.lib.min, null, [values].concat(args));\n    },\n\n    /* eslint-disable-next-line camelcase */\n    template_from_string: function template_from_string(template) {\n      var state = this;\n\n      if (template === undefined) {\n        template = '';\n      }\n\n      return Twig.Templates.parsers.twig({\n        options: state.template.options,\n        data: template\n      });\n    },\n    random: function random(value) {\n      var LIMIT_INT31 = 0x80000000;\n\n      function getRandomNumber(n) {\n        var random = Math.floor(Math.random() * LIMIT_INT31);\n        var min = Math.min.call(null, 0, n);\n        var max = Math.max.call(null, 0, n);\n        return min + Math.floor((max - min + 1) * random / LIMIT_INT31);\n      }\n\n      if (Twig.lib.is('Number', value)) {\n        return getRandomNumber(value);\n      }\n\n      if (Twig.lib.is('String', value)) {\n        return value.charAt(getRandomNumber(value.length - 1));\n      }\n\n      if (Twig.lib.is('Array', value)) {\n        return value[getRandomNumber(value.length - 1)];\n      }\n\n      if (Twig.lib.is('Object', value)) {\n        var keys = Object.keys(value);\n        return value[keys[getRandomNumber(keys.length - 1)]];\n      }\n\n      return getRandomNumber(LIMIT_INT31 - 1);\n    },\n\n    /**\n     * Returns the content of a template without rendering it\n     * @param {string} name\n     * @param {boolean} [ignoreMissing=false]\n     * @returns {string}\n     */\n    source: function source(name, ignoreMissing) {\n      var templateSource;\n      var templateFound = false;\n      var isNodeEnvironment =   true && typeof module.exports !== 'undefined' && typeof window === 'undefined';\n      var loader;\n      var path = name; // If we are running in a node.js environment, set the loader to 'fs'.\n\n      if (isNodeEnvironment) {\n        loader = 'fs';\n      } else {\n        loader = 'ajax';\n      } // Build the params object\n\n\n      var params = {\n        id: name,\n        path: path,\n        method: loader,\n        parser: 'source',\n        async: false,\n        fetchTemplateSource: true\n      }; // Default ignoreMissing to false\n\n      if (typeof ignoreMissing === 'undefined') {\n        ignoreMissing = false;\n      } // Try to load the remote template\n      //\n      // on exception, log it\n\n\n      try {\n        templateSource = Twig.Templates.loadRemote(name, params); // If the template is undefined or null, set the template to an empty string and do NOT flip the\n        // boolean indicating we found the template\n        //\n        // else, all is good! flip the boolean indicating we found the template\n\n        if (typeof templateSource === 'undefined' || templateSource === null) {\n          templateSource = '';\n        } else {\n          templateFound = true;\n        }\n      } catch (error) {\n        Twig.log.debug('Twig.functions.source: ', 'Problem loading template  ', error);\n      } // If the template was NOT found AND we are not ignoring missing templates, return the same message\n      // that is returned by the PHP implementation of the twig source() function\n      //\n      // else, return the template source\n\n\n      if (!templateFound && !ignoreMissing) {\n        return TEMPLATE_NOT_FOUND_MESSAGE.replace('{name}', name);\n      }\n\n      return templateSource;\n    }\n  };\n\n  Twig._function = function (_function, value, params) {\n    if (!Twig.functions[_function]) {\n      throw new Twig.Error('Unable to find function ' + _function);\n    }\n\n    return Twig.functions[_function](value, params);\n  };\n\n  Twig._function.extend = function (_function, definition) {\n    Twig.functions[_function] = definition;\n  };\n\n  return Twig;\n};\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// ## twig.lib.js\n//\n// This file contains 3rd party libraries used within twig.\n//\n// Copies of the licenses for the code included here can be found in the\n// LICENSES.md file.\n//\nmodule.exports = function (Twig) {\n  // Namespace for libraries\n  Twig.lib = {};\n  Twig.lib.sprintf = __webpack_require__(3);\n  Twig.lib.vsprintf = __webpack_require__(18);\n  Twig.lib.round = __webpack_require__(19);\n  Twig.lib.max = __webpack_require__(20);\n  Twig.lib.min = __webpack_require__(21);\n  Twig.lib.stripTags = __webpack_require__(22);\n  Twig.lib.strtotime = __webpack_require__(24);\n  Twig.lib.date = __webpack_require__(25);\n  Twig.lib.boolval = __webpack_require__(26);\n\n  Twig.lib.is = function (type, obj) {\n    if (typeof obj === 'undefined' || obj === null) {\n      return false;\n    }\n\n    switch (type) {\n      case 'Array':\n        return Array.isArray(obj);\n\n      case 'Date':\n        return obj instanceof Date;\n\n      case 'String':\n        return typeof obj === 'string' || obj instanceof String;\n\n      case 'Number':\n        return typeof obj === 'number' || obj instanceof Number;\n\n      case 'Function':\n        return typeof obj === 'function';\n\n      case 'Object':\n        return obj instanceof Object;\n\n      default:\n        return false;\n    }\n  };\n\n  Twig.lib.replaceAll = function (string, search, replace) {\n    // Escape possible regular expression syntax\n    var searchEscaped = search.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    return string.replace(new RegExp(searchEscaped, 'g'), replace);\n  }; // Chunk an array (arr) into arrays of (size) items, returns an array of arrays, or an empty array on invalid input\n\n\n  Twig.lib.chunkArray = function (arr, size) {\n    var returnVal = [];\n    var x = 0;\n    var len = arr.length;\n\n    if (size < 1 || !Array.isArray(arr)) {\n      return [];\n    }\n\n    while (x < len) {\n      returnVal.push(arr.slice(x, x += size));\n    }\n\n    return returnVal;\n  };\n\n  return Twig;\n};\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = function vsprintf(format, args) {\n  //  discuss at: http://locutus.io/php/vsprintf/\n  // original by: ejsanders\n  //   example 1: vsprintf('%04d-%02d-%02d', [1988, 8, 1])\n  //   returns 1: '1988-08-01'\n\n  var sprintf = __webpack_require__(3);\n\n  return sprintf.apply(this, [format].concat(args));\n};\n//# sourceMappingURL=vsprintf.js.map\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = function round(value, precision, mode) {\n  //  discuss at: http://locutus.io/php/round/\n  // original by: Philip Peterson\n  //  revised by: Onno Marsman (https://twitter.com/onnomarsman)\n  //  revised by: T.Wild\n  //  revised by: Rafał Kukawski (http://blog.kukawski.pl)\n  //    input by: Greenseed\n  //    input by: meo\n  //    input by: William\n  //    input by: Josep Sanz (http://www.ws3.es/)\n  // bugfixed by: Brett Zamir (http://brett-zamir.me)\n  //      note 1: Great work. Ideas for improvement:\n  //      note 1: - code more compliant with developer guidelines\n  //      note 1: - for implementing PHP constant arguments look at\n  //      note 1: the pathinfo() function, it offers the greatest\n  //      note 1: flexibility & compatibility possible\n  //   example 1: round(1241757, -3)\n  //   returns 1: 1242000\n  //   example 2: round(3.6)\n  //   returns 2: 4\n  //   example 3: round(2.835, 2)\n  //   returns 3: 2.84\n  //   example 4: round(1.1749999999999, 2)\n  //   returns 4: 1.17\n  //   example 5: round(58551.799999999996, 2)\n  //   returns 5: 58551.8\n\n  var m, f, isHalf, sgn; // helper variables\n  // making sure precision is integer\n  precision |= 0;\n  m = Math.pow(10, precision);\n  value *= m;\n  // sign of the number\n  sgn = value > 0 | -(value < 0);\n  isHalf = value % 1 === 0.5 * sgn;\n  f = Math.floor(value);\n\n  if (isHalf) {\n    switch (mode) {\n      case 'PHP_ROUND_HALF_DOWN':\n        // rounds .5 toward zero\n        value = f + (sgn < 0);\n        break;\n      case 'PHP_ROUND_HALF_EVEN':\n        // rouds .5 towards the next even integer\n        value = f + f % 2 * sgn;\n        break;\n      case 'PHP_ROUND_HALF_ODD':\n        // rounds .5 towards the next odd integer\n        value = f + !(f % 2);\n        break;\n      default:\n        // rounds .5 away from zero\n        value = f + (sgn > 0);\n    }\n  }\n\n  return (isHalf ? value : Math.round(value)) / m;\n};\n//# sourceMappingURL=round.js.map\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nmodule.exports = function max() {\n  //  discuss at: http://locutus.io/php/max/\n  // original by: Onno Marsman (https://twitter.com/onnomarsman)\n  //  revised by: Onno Marsman (https://twitter.com/onnomarsman)\n  // improved by: Jack\n  //      note 1: Long code cause we're aiming for maximum PHP compatibility\n  //   example 1: max(1, 3, 5, 6, 7)\n  //   returns 1: 7\n  //   example 2: max([2, 4, 5])\n  //   returns 2: 5\n  //   example 3: max(0, 'hello')\n  //   returns 3: 0\n  //   example 4: max('hello', 0)\n  //   returns 4: 'hello'\n  //   example 5: max(-1, 'hello')\n  //   returns 5: 'hello'\n  //   example 6: max([2, 4, 8], [2, 5, 7])\n  //   returns 6: [2, 5, 7]\n\n  var ar;\n  var retVal;\n  var i = 0;\n  var n = 0;\n  var argv = arguments;\n  var argc = argv.length;\n  var _obj2Array = function _obj2Array(obj) {\n    if (Object.prototype.toString.call(obj) === '[object Array]') {\n      return obj;\n    } else {\n      var ar = [];\n      for (var i in obj) {\n        if (obj.hasOwnProperty(i)) {\n          ar.push(obj[i]);\n        }\n      }\n      return ar;\n    }\n  };\n  var _compare = function _compare(current, next) {\n    var i = 0;\n    var n = 0;\n    var tmp = 0;\n    var nl = 0;\n    var cl = 0;\n\n    if (current === next) {\n      return 0;\n    } else if ((typeof current === 'undefined' ? 'undefined' : _typeof(current)) === 'object') {\n      if ((typeof next === 'undefined' ? 'undefined' : _typeof(next)) === 'object') {\n        current = _obj2Array(current);\n        next = _obj2Array(next);\n        cl = current.length;\n        nl = next.length;\n        if (nl > cl) {\n          return 1;\n        } else if (nl < cl) {\n          return -1;\n        }\n        for (i = 0, n = cl; i < n; ++i) {\n          tmp = _compare(current[i], next[i]);\n          if (tmp === 1) {\n            return 1;\n          } else if (tmp === -1) {\n            return -1;\n          }\n        }\n        return 0;\n      }\n      return -1;\n    } else if ((typeof next === 'undefined' ? 'undefined' : _typeof(next)) === 'object') {\n      return 1;\n    } else if (isNaN(next) && !isNaN(current)) {\n      if (current === 0) {\n        return 0;\n      }\n      return current < 0 ? 1 : -1;\n    } else if (isNaN(current) && !isNaN(next)) {\n      if (next === 0) {\n        return 0;\n      }\n      return next > 0 ? 1 : -1;\n    }\n\n    if (next === current) {\n      return 0;\n    }\n\n    return next > current ? 1 : -1;\n  };\n\n  if (argc === 0) {\n    throw new Error('At least one value should be passed to max()');\n  } else if (argc === 1) {\n    if (_typeof(argv[0]) === 'object') {\n      ar = _obj2Array(argv[0]);\n    } else {\n      throw new Error('Wrong parameter count for max()');\n    }\n    if (ar.length === 0) {\n      throw new Error('Array must contain at least one element for max()');\n    }\n  } else {\n    ar = argv;\n  }\n\n  retVal = ar[0];\n  for (i = 1, n = ar.length; i < n; ++i) {\n    if (_compare(retVal, ar[i]) === 1) {\n      retVal = ar[i];\n    }\n  }\n\n  return retVal;\n};\n//# sourceMappingURL=max.js.map\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nmodule.exports = function min() {\n  //  discuss at: http://locutus.io/php/min/\n  // original by: Onno Marsman (https://twitter.com/onnomarsman)\n  //  revised by: Onno Marsman (https://twitter.com/onnomarsman)\n  // improved by: Jack\n  //      note 1: Long code cause we're aiming for maximum PHP compatibility\n  //   example 1: min(1, 3, 5, 6, 7)\n  //   returns 1: 1\n  //   example 2: min([2, 4, 5])\n  //   returns 2: 2\n  //   example 3: min(0, 'hello')\n  //   returns 3: 0\n  //   example 4: min('hello', 0)\n  //   returns 4: 'hello'\n  //   example 5: min(-1, 'hello')\n  //   returns 5: -1\n  //   example 6: min([2, 4, 8], [2, 5, 7])\n  //   returns 6: [2, 4, 8]\n\n  var ar;\n  var retVal;\n  var i = 0;\n  var n = 0;\n  var argv = arguments;\n  var argc = argv.length;\n  var _obj2Array = function _obj2Array(obj) {\n    if (Object.prototype.toString.call(obj) === '[object Array]') {\n      return obj;\n    }\n    var ar = [];\n    for (var i in obj) {\n      if (obj.hasOwnProperty(i)) {\n        ar.push(obj[i]);\n      }\n    }\n    return ar;\n  };\n\n  var _compare = function _compare(current, next) {\n    var i = 0;\n    var n = 0;\n    var tmp = 0;\n    var nl = 0;\n    var cl = 0;\n\n    if (current === next) {\n      return 0;\n    } else if ((typeof current === 'undefined' ? 'undefined' : _typeof(current)) === 'object') {\n      if ((typeof next === 'undefined' ? 'undefined' : _typeof(next)) === 'object') {\n        current = _obj2Array(current);\n        next = _obj2Array(next);\n        cl = current.length;\n        nl = next.length;\n        if (nl > cl) {\n          return 1;\n        } else if (nl < cl) {\n          return -1;\n        }\n        for (i = 0, n = cl; i < n; ++i) {\n          tmp = _compare(current[i], next[i]);\n          if (tmp === 1) {\n            return 1;\n          } else if (tmp === -1) {\n            return -1;\n          }\n        }\n        return 0;\n      }\n      return -1;\n    } else if ((typeof next === 'undefined' ? 'undefined' : _typeof(next)) === 'object') {\n      return 1;\n    } else if (isNaN(next) && !isNaN(current)) {\n      if (current === 0) {\n        return 0;\n      }\n      return current < 0 ? 1 : -1;\n    } else if (isNaN(current) && !isNaN(next)) {\n      if (next === 0) {\n        return 0;\n      }\n      return next > 0 ? 1 : -1;\n    }\n\n    if (next === current) {\n      return 0;\n    }\n\n    return next > current ? 1 : -1;\n  };\n\n  if (argc === 0) {\n    throw new Error('At least one value should be passed to min()');\n  } else if (argc === 1) {\n    if (_typeof(argv[0]) === 'object') {\n      ar = _obj2Array(argv[0]);\n    } else {\n      throw new Error('Wrong parameter count for min()');\n    }\n\n    if (ar.length === 0) {\n      throw new Error('Array must contain at least one element for min()');\n    }\n  } else {\n    ar = argv;\n  }\n\n  retVal = ar[0];\n\n  for (i = 1, n = ar.length; i < n; ++i) {\n    if (_compare(retVal, ar[i]) === -1) {\n      retVal = ar[i];\n    }\n  }\n\n  return retVal;\n};\n//# sourceMappingURL=min.js.map\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = function strip_tags(input, allowed) {\n  // eslint-disable-line camelcase\n  //  discuss at: http://locutus.io/php/strip_tags/\n  // original by: Kevin van Zonneveld (http://kvz.io)\n  // improved by: Luke Godfrey\n  // improved by: Kevin van Zonneveld (http://kvz.io)\n  //    input by: Pul\n  //    input by: Alex\n  //    input by: Marc Palau\n  //    input by: Brett Zamir (http://brett-zamir.me)\n  //    input by: Bobby Drake\n  //    input by: Evertjan Garretsen\n  // bugfixed by: Kevin van Zonneveld (http://kvz.io)\n  // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman)\n  // bugfixed by: Kevin van Zonneveld (http://kvz.io)\n  // bugfixed by: Kevin van Zonneveld (http://kvz.io)\n  // bugfixed by: Eric Nagel\n  // bugfixed by: Kevin van Zonneveld (http://kvz.io)\n  // bugfixed by: Tomasz Wesolowski\n  // bugfixed by: Tymon Sturgeon (https://scryptonite.com)\n  // bugfixed by: Tim de Koning (https://www.kingsquare.nl)\n  //  revised by: Rafał Kukawski (http://blog.kukawski.pl)\n  //   example 1: strip_tags('<p>Kevin</p> <br /><b>van</b> <i>Zonneveld</i>', '<i><b>')\n  //   returns 1: 'Kevin <b>van</b> <i>Zonneveld</i>'\n  //   example 2: strip_tags('<p>Kevin <img src=\"someimage.png\" onmouseover=\"someFunction()\">van <i>Zonneveld</i></p>', '<p>')\n  //   returns 2: '<p>Kevin van Zonneveld</p>'\n  //   example 3: strip_tags(\"<a href='http://kvz.io'>Kevin van Zonneveld</a>\", \"<a>\")\n  //   returns 3: \"<a href='http://kvz.io'>Kevin van Zonneveld</a>\"\n  //   example 4: strip_tags('1 < 5 5 > 1')\n  //   returns 4: '1 < 5 5 > 1'\n  //   example 5: strip_tags('1 <br/> 1')\n  //   returns 5: '1  1'\n  //   example 6: strip_tags('1 <br/> 1', '<br>')\n  //   returns 6: '1 <br/> 1'\n  //   example 7: strip_tags('1 <br/> 1', '<br><br/>')\n  //   returns 7: '1 <br/> 1'\n  //   example 8: strip_tags('<i>hello</i> <<foo>script>world<</foo>/script>')\n  //   returns 8: 'hello world'\n  //   example 9: strip_tags(4)\n  //   returns 9: '4'\n\n  var _phpCastString = __webpack_require__(23);\n\n  // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)\n  allowed = (((allowed || '') + '').toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');\n\n  var tags = /<\\/?([a-z0-9]*)\\b[^>]*>?/gi;\n  var commentsAndPhpTags = /<!--[\\s\\S]*?-->|<\\?(?:php)?[\\s\\S]*?\\?>/gi;\n\n  var after = _phpCastString(input);\n  // removes tha '<' char at the end of the string to replicate PHP's behaviour\n  after = after.substring(after.length - 1) === '<' ? after.substring(0, after.length - 1) : after;\n\n  // recursively remove tags to ensure that the returned string doesn't contain forbidden tags after previous passes (e.g. '<<bait/>switch/>')\n  while (true) {\n    var before = after;\n    after = before.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {\n      return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';\n    });\n\n    // return once no more tags are removed\n    if (before === after) {\n      return after;\n    }\n  }\n};\n//# sourceMappingURL=strip_tags.js.map\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nmodule.exports = function _phpCastString(value) {\n  // original by: Rafał Kukawski\n  //   example 1: _phpCastString(true)\n  //   returns 1: '1'\n  //   example 2: _phpCastString(false)\n  //   returns 2: ''\n  //   example 3: _phpCastString('foo')\n  //   returns 3: 'foo'\n  //   example 4: _phpCastString(0/0)\n  //   returns 4: 'NAN'\n  //   example 5: _phpCastString(1/0)\n  //   returns 5: 'INF'\n  //   example 6: _phpCastString(-1/0)\n  //   returns 6: '-INF'\n  //   example 7: _phpCastString(null)\n  //   returns 7: ''\n  //   example 8: _phpCastString(undefined)\n  //   returns 8: ''\n  //   example 9: _phpCastString([])\n  //   returns 9: 'Array'\n  //   example 10: _phpCastString({})\n  //   returns 10: 'Object'\n  //   example 11: _phpCastString(0)\n  //   returns 11: '0'\n  //   example 12: _phpCastString(1)\n  //   returns 12: '1'\n  //   example 13: _phpCastString(3.14)\n  //   returns 13: '3.14'\n\n  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n\n  switch (type) {\n    case 'boolean':\n      return value ? '1' : '';\n    case 'string':\n      return value;\n    case 'number':\n      if (isNaN(value)) {\n        return 'NAN';\n      }\n\n      if (!isFinite(value)) {\n        return (value < 0 ? '-' : '') + 'INF';\n      }\n\n      return value + '';\n    case 'undefined':\n      return '';\n    case 'object':\n      if (Array.isArray(value)) {\n        return 'Array';\n      }\n\n      if (value !== null) {\n        return 'Object';\n      }\n\n      return '';\n    case 'function':\n    // fall through\n    default:\n      throw new Error('Unsupported value type');\n  }\n};\n//# sourceMappingURL=_phpCastString.js.map\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar reSpace = '[ \\\\t]+';\nvar reSpaceOpt = '[ \\\\t]*';\nvar reMeridian = '(?:([ap])\\\\.?m\\\\.?([\\\\t ]|$))';\nvar reHour24 = '(2[0-4]|[01]?[0-9])';\nvar reHour24lz = '([01][0-9]|2[0-4])';\nvar reHour12 = '(0?[1-9]|1[0-2])';\nvar reMinute = '([0-5]?[0-9])';\nvar reMinutelz = '([0-5][0-9])';\nvar reSecond = '(60|[0-5]?[0-9])';\nvar reSecondlz = '(60|[0-5][0-9])';\nvar reFrac = '(?:\\\\.([0-9]+))';\n\nvar reDayfull = 'sunday|monday|tuesday|wednesday|thursday|friday|saturday';\nvar reDayabbr = 'sun|mon|tue|wed|thu|fri|sat';\nvar reDaytext = reDayfull + '|' + reDayabbr + '|weekdays?';\n\nvar reReltextnumber = 'first|second|third|fourth|fifth|sixth|seventh|eighth?|ninth|tenth|eleventh|twelfth';\nvar reReltexttext = 'next|last|previous|this';\nvar reReltextunit = '(?:second|sec|minute|min|hour|day|fortnight|forthnight|month|year)s?|weeks|' + reDaytext;\n\nvar reYear = '([0-9]{1,4})';\nvar reYear2 = '([0-9]{2})';\nvar reYear4 = '([0-9]{4})';\nvar reYear4withSign = '([+-]?[0-9]{4})';\nvar reMonth = '(1[0-2]|0?[0-9])';\nvar reMonthlz = '(0[0-9]|1[0-2])';\nvar reDay = '(?:(3[01]|[0-2]?[0-9])(?:st|nd|rd|th)?)';\nvar reDaylz = '(0[0-9]|[1-2][0-9]|3[01])';\n\nvar reMonthFull = 'january|february|march|april|may|june|july|august|september|october|november|december';\nvar reMonthAbbr = 'jan|feb|mar|apr|may|jun|jul|aug|sept?|oct|nov|dec';\nvar reMonthroman = 'i[vx]|vi{0,3}|xi{0,2}|i{1,3}';\nvar reMonthText = '(' + reMonthFull + '|' + reMonthAbbr + '|' + reMonthroman + ')';\n\nvar reTzCorrection = '((?:GMT)?([+-])' + reHour24 + ':?' + reMinute + '?)';\nvar reDayOfYear = '(00[1-9]|0[1-9][0-9]|[12][0-9][0-9]|3[0-5][0-9]|36[0-6])';\nvar reWeekOfYear = '(0[1-9]|[1-4][0-9]|5[0-3])';\n\nfunction processMeridian(hour, meridian) {\n  meridian = meridian && meridian.toLowerCase();\n\n  switch (meridian) {\n    case 'a':\n      hour += hour === 12 ? -12 : 0;\n      break;\n    case 'p':\n      hour += hour !== 12 ? 12 : 0;\n      break;\n  }\n\n  return hour;\n}\n\nfunction processYear(yearStr) {\n  var year = +yearStr;\n\n  if (yearStr.length < 4 && year < 100) {\n    year += year < 70 ? 2000 : 1900;\n  }\n\n  return year;\n}\n\nfunction lookupMonth(monthStr) {\n  return {\n    jan: 0,\n    january: 0,\n    i: 0,\n    feb: 1,\n    february: 1,\n    ii: 1,\n    mar: 2,\n    march: 2,\n    iii: 2,\n    apr: 3,\n    april: 3,\n    iv: 3,\n    may: 4,\n    v: 4,\n    jun: 5,\n    june: 5,\n    vi: 5,\n    jul: 6,\n    july: 6,\n    vii: 6,\n    aug: 7,\n    august: 7,\n    viii: 7,\n    sep: 8,\n    sept: 8,\n    september: 8,\n    ix: 8,\n    oct: 9,\n    october: 9,\n    x: 9,\n    nov: 10,\n    november: 10,\n    xi: 10,\n    dec: 11,\n    december: 11,\n    xii: 11\n  }[monthStr.toLowerCase()];\n}\n\nfunction lookupWeekday(dayStr) {\n  var desiredSundayNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  var dayNumbers = {\n    mon: 1,\n    monday: 1,\n    tue: 2,\n    tuesday: 2,\n    wed: 3,\n    wednesday: 3,\n    thu: 4,\n    thursday: 4,\n    fri: 5,\n    friday: 5,\n    sat: 6,\n    saturday: 6,\n    sun: 0,\n    sunday: 0\n  };\n\n  return dayNumbers[dayStr.toLowerCase()] || desiredSundayNumber;\n}\n\nfunction lookupRelative(relText) {\n  var relativeNumbers = {\n    last: -1,\n    previous: -1,\n    this: 0,\n    first: 1,\n    next: 1,\n    second: 2,\n    third: 3,\n    fourth: 4,\n    fifth: 5,\n    sixth: 6,\n    seventh: 7,\n    eight: 8,\n    eighth: 8,\n    ninth: 9,\n    tenth: 10,\n    eleventh: 11,\n    twelfth: 12\n  };\n\n  var relativeBehavior = {\n    this: 1\n  };\n\n  var relTextLower = relText.toLowerCase();\n\n  return {\n    amount: relativeNumbers[relTextLower],\n    behavior: relativeBehavior[relTextLower] || 0\n  };\n}\n\nfunction processTzCorrection(tzOffset, oldValue) {\n  var reTzCorrectionLoose = /(?:GMT)?([+-])(\\d+)(:?)(\\d{0,2})/i;\n  tzOffset = tzOffset && tzOffset.match(reTzCorrectionLoose);\n\n  if (!tzOffset) {\n    return oldValue;\n  }\n\n  var sign = tzOffset[1] === '-' ? 1 : -1;\n  var hours = +tzOffset[2];\n  var minutes = +tzOffset[4];\n\n  if (!tzOffset[4] && !tzOffset[3]) {\n    minutes = Math.floor(hours % 100);\n    hours = Math.floor(hours / 100);\n  }\n\n  return sign * (hours * 60 + minutes);\n}\n\nvar formats = {\n  yesterday: {\n    regex: /^yesterday/i,\n    name: 'yesterday',\n    callback: function callback() {\n      this.rd -= 1;\n      return this.resetTime();\n    }\n  },\n\n  now: {\n    regex: /^now/i,\n    name: 'now'\n    // do nothing\n  },\n\n  noon: {\n    regex: /^noon/i,\n    name: 'noon',\n    callback: function callback() {\n      return this.resetTime() && this.time(12, 0, 0, 0);\n    }\n  },\n\n  midnightOrToday: {\n    regex: /^(midnight|today)/i,\n    name: 'midnight | today',\n    callback: function callback() {\n      return this.resetTime();\n    }\n  },\n\n  tomorrow: {\n    regex: /^tomorrow/i,\n    name: 'tomorrow',\n    callback: function callback() {\n      this.rd += 1;\n      return this.resetTime();\n    }\n  },\n\n  timestamp: {\n    regex: /^@(-?\\d+)/i,\n    name: 'timestamp',\n    callback: function callback(match, timestamp) {\n      this.rs += +timestamp;\n      this.y = 1970;\n      this.m = 0;\n      this.d = 1;\n      this.dates = 0;\n\n      return this.resetTime() && this.zone(0);\n    }\n  },\n\n  firstOrLastDay: {\n    regex: /^(first|last) day of/i,\n    name: 'firstdayof | lastdayof',\n    callback: function callback(match, day) {\n      if (day.toLowerCase() === 'first') {\n        this.firstOrLastDayOfMonth = 1;\n      } else {\n        this.firstOrLastDayOfMonth = -1;\n      }\n    }\n  },\n\n  backOrFrontOf: {\n    regex: RegExp('^(back|front) of ' + reHour24 + reSpaceOpt + reMeridian + '?', 'i'),\n    name: 'backof | frontof',\n    callback: function callback(match, side, hours, meridian) {\n      var back = side.toLowerCase() === 'back';\n      var hour = +hours;\n      var minute = 15;\n\n      if (!back) {\n        hour -= 1;\n        minute = 45;\n      }\n\n      hour = processMeridian(hour, meridian);\n\n      return this.resetTime() && this.time(hour, minute, 0, 0);\n    }\n  },\n\n  weekdayOf: {\n    regex: RegExp('^(' + reReltextnumber + '|' + reReltexttext + ')' + reSpace + '(' + reDayfull + '|' + reDayabbr + ')' + reSpace + 'of', 'i'),\n    name: 'weekdayof'\n    // todo\n  },\n\n  mssqltime: {\n    regex: RegExp('^' + reHour12 + ':' + reMinutelz + ':' + reSecondlz + '[:.]([0-9]+)' + reMeridian, 'i'),\n    name: 'mssqltime',\n    callback: function callback(match, hour, minute, second, frac, meridian) {\n      return this.time(processMeridian(+hour, meridian), +minute, +second, +frac.substr(0, 3));\n    }\n  },\n\n  timeLong12: {\n    regex: RegExp('^' + reHour12 + '[:.]' + reMinute + '[:.]' + reSecondlz + reSpaceOpt + reMeridian, 'i'),\n    name: 'timelong12',\n    callback: function callback(match, hour, minute, second, meridian) {\n      return this.time(processMeridian(+hour, meridian), +minute, +second, 0);\n    }\n  },\n\n  timeShort12: {\n    regex: RegExp('^' + reHour12 + '[:.]' + reMinutelz + reSpaceOpt + reMeridian, 'i'),\n    name: 'timeshort12',\n    callback: function callback(match, hour, minute, meridian) {\n      return this.time(processMeridian(+hour, meridian), +minute, 0, 0);\n    }\n  },\n\n  timeTiny12: {\n    regex: RegExp('^' + reHour12 + reSpaceOpt + reMeridian, 'i'),\n    name: 'timetiny12',\n    callback: function callback(match, hour, meridian) {\n      return this.time(processMeridian(+hour, meridian), 0, 0, 0);\n    }\n  },\n\n  soap: {\n    regex: RegExp('^' + reYear4 + '-' + reMonthlz + '-' + reDaylz + 'T' + reHour24lz + ':' + reMinutelz + ':' + reSecondlz + reFrac + reTzCorrection + '?', 'i'),\n    name: 'soap',\n    callback: function callback(match, year, month, day, hour, minute, second, frac, tzCorrection) {\n      return this.ymd(+year, month - 1, +day) && this.time(+hour, +minute, +second, +frac.substr(0, 3)) && this.zone(processTzCorrection(tzCorrection));\n    }\n  },\n\n  wddx: {\n    regex: RegExp('^' + reYear4 + '-' + reMonth + '-' + reDay + 'T' + reHour24 + ':' + reMinute + ':' + reSecond),\n    name: 'wddx',\n    callback: function callback(match, year, month, day, hour, minute, second) {\n      return this.ymd(+year, month - 1, +day) && this.time(+hour, +minute, +second, 0);\n    }\n  },\n\n  exif: {\n    regex: RegExp('^' + reYear4 + ':' + reMonthlz + ':' + reDaylz + ' ' + reHour24lz + ':' + reMinutelz + ':' + reSecondlz, 'i'),\n    name: 'exif',\n    callback: function callback(match, year, month, day, hour, minute, second) {\n      return this.ymd(+year, month - 1, +day) && this.time(+hour, +minute, +second, 0);\n    }\n  },\n\n  xmlRpc: {\n    regex: RegExp('^' + reYear4 + reMonthlz + reDaylz + 'T' + reHour24 + ':' + reMinutelz + ':' + reSecondlz),\n    name: 'xmlrpc',\n    callback: function callback(match, year, month, day, hour, minute, second) {\n      return this.ymd(+year, month - 1, +day) && this.time(+hour, +minute, +second, 0);\n    }\n  },\n\n  xmlRpcNoColon: {\n    regex: RegExp('^' + reYear4 + reMonthlz + reDaylz + '[Tt]' + reHour24 + reMinutelz + reSecondlz),\n    name: 'xmlrpcnocolon',\n    callback: function callback(match, year, month, day, hour, minute, second) {\n      return this.ymd(+year, month - 1, +day) && this.time(+hour, +minute, +second, 0);\n    }\n  },\n\n  clf: {\n    regex: RegExp('^' + reDay + '/(' + reMonthAbbr + ')/' + reYear4 + ':' + reHour24lz + ':' + reMinutelz + ':' + reSecondlz + reSpace + reTzCorrection, 'i'),\n    name: 'clf',\n    callback: function callback(match, day, month, year, hour, minute, second, tzCorrection) {\n      return this.ymd(+year, lookupMonth(month), +day) && this.time(+hour, +minute, +second, 0) && this.zone(processTzCorrection(tzCorrection));\n    }\n  },\n\n  iso8601long: {\n    regex: RegExp('^t?' + reHour24 + '[:.]' + reMinute + '[:.]' + reSecond + reFrac, 'i'),\n    name: 'iso8601long',\n    callback: function callback(match, hour, minute, second, frac) {\n      return this.time(+hour, +minute, +second, +frac.substr(0, 3));\n    }\n  },\n\n  dateTextual: {\n    regex: RegExp('^' + reMonthText + '[ .\\\\t-]*' + reDay + '[,.stndrh\\\\t ]+' + reYear, 'i'),\n    name: 'datetextual',\n    callback: function callback(match, month, day, year) {\n      return this.ymd(processYear(year), lookupMonth(month), +day);\n    }\n  },\n\n  pointedDate4: {\n    regex: RegExp('^' + reDay + '[.\\\\t-]' + reMonth + '[.-]' + reYear4),\n    name: 'pointeddate4',\n    callback: function callback(match, day, month, year) {\n      return this.ymd(+year, month - 1, +day);\n    }\n  },\n\n  pointedDate2: {\n    regex: RegExp('^' + reDay + '[.\\\\t]' + reMonth + '\\\\.' + reYear2),\n    name: 'pointeddate2',\n    callback: function callback(match, day, month, year) {\n      return this.ymd(processYear(year), month - 1, +day);\n    }\n  },\n\n  timeLong24: {\n    regex: RegExp('^t?' + reHour24 + '[:.]' + reMinute + '[:.]' + reSecond),\n    name: 'timelong24',\n    callback: function callback(match, hour, minute, second) {\n      return this.time(+hour, +minute, +second, 0);\n    }\n  },\n\n  dateNoColon: {\n    regex: RegExp('^' + reYear4 + reMonthlz + reDaylz),\n    name: 'datenocolon',\n    callback: function callback(match, year, month, day) {\n      return this.ymd(+year, month - 1, +day);\n    }\n  },\n\n  pgydotd: {\n    regex: RegExp('^' + reYear4 + '\\\\.?' + reDayOfYear),\n    name: 'pgydotd',\n    callback: function callback(match, year, day) {\n      return this.ymd(+year, 0, +day);\n    }\n  },\n\n  timeShort24: {\n    regex: RegExp('^t?' + reHour24 + '[:.]' + reMinute, 'i'),\n    name: 'timeshort24',\n    callback: function callback(match, hour, minute) {\n      return this.time(+hour, +minute, 0, 0);\n    }\n  },\n\n  iso8601noColon: {\n    regex: RegExp('^t?' + reHour24lz + reMinutelz + reSecondlz, 'i'),\n    name: 'iso8601nocolon',\n    callback: function callback(match, hour, minute, second) {\n      return this.time(+hour, +minute, +second, 0);\n    }\n  },\n\n  iso8601dateSlash: {\n    // eventhough the trailing slash is optional in PHP\n    // here it's mandatory and inputs without the slash\n    // are handled by dateslash\n    regex: RegExp('^' + reYear4 + '/' + reMonthlz + '/' + reDaylz + '/'),\n    name: 'iso8601dateslash',\n    callback: function callback(match, year, month, day) {\n      return this.ymd(+year, month - 1, +day);\n    }\n  },\n\n  dateSlash: {\n    regex: RegExp('^' + reYear4 + '/' + reMonth + '/' + reDay),\n    name: 'dateslash',\n    callback: function callback(match, year, month, day) {\n      return this.ymd(+year, month - 1, +day);\n    }\n  },\n\n  american: {\n    regex: RegExp('^' + reMonth + '/' + reDay + '/' + reYear),\n    name: 'american',\n    callback: function callback(match, month, day, year) {\n      return this.ymd(processYear(year), month - 1, +day);\n    }\n  },\n\n  americanShort: {\n    regex: RegExp('^' + reMonth + '/' + reDay),\n    name: 'americanshort',\n    callback: function callback(match, month, day) {\n      return this.ymd(this.y, month - 1, +day);\n    }\n  },\n\n  gnuDateShortOrIso8601date2: {\n    // iso8601date2 is complete subset of gnudateshort\n    regex: RegExp('^' + reYear + '-' + reMonth + '-' + reDay),\n    name: 'gnudateshort | iso8601date2',\n    callback: function callback(match, year, month, day) {\n      return this.ymd(processYear(year), month - 1, +day);\n    }\n  },\n\n  iso8601date4: {\n    regex: RegExp('^' + reYear4withSign + '-' + reMonthlz + '-' + reDaylz),\n    name: 'iso8601date4',\n    callback: function callback(match, year, month, day) {\n      return this.ymd(+year, month - 1, +day);\n    }\n  },\n\n  gnuNoColon: {\n    regex: RegExp('^t' + reHour24lz + reMinutelz, 'i'),\n    name: 'gnunocolon',\n    callback: function callback(match, hour, minute) {\n      return this.time(+hour, +minute, 0, this.f);\n    }\n  },\n\n  gnuDateShorter: {\n    regex: RegExp('^' + reYear4 + '-' + reMonth),\n    name: 'gnudateshorter',\n    callback: function callback(match, year, month) {\n      return this.ymd(+year, month - 1, 1);\n    }\n  },\n\n  pgTextReverse: {\n    // note: allowed years are from 32-9999\n    // years below 32 should be treated as days in datefull\n    regex: RegExp('^' + '(\\\\d{3,4}|[4-9]\\\\d|3[2-9])-(' + reMonthAbbr + ')-' + reDaylz, 'i'),\n    name: 'pgtextreverse',\n    callback: function callback(match, year, month, day) {\n      return this.ymd(processYear(year), lookupMonth(month), +day);\n    }\n  },\n\n  dateFull: {\n    regex: RegExp('^' + reDay + '[ \\\\t.-]*' + reMonthText + '[ \\\\t.-]*' + reYear, 'i'),\n    name: 'datefull',\n    callback: function callback(match, day, month, year) {\n      return this.ymd(processYear(year), lookupMonth(month), +day);\n    }\n  },\n\n  dateNoDay: {\n    regex: RegExp('^' + reMonthText + '[ .\\\\t-]*' + reYear4, 'i'),\n    name: 'datenoday',\n    callback: function callback(match, month, year) {\n      return this.ymd(+year, lookupMonth(month), 1);\n    }\n  },\n\n  dateNoDayRev: {\n    regex: RegExp('^' + reYear4 + '[ .\\\\t-]*' + reMonthText, 'i'),\n    name: 'datenodayrev',\n    callback: function callback(match, year, month) {\n      return this.ymd(+year, lookupMonth(month), 1);\n    }\n  },\n\n  pgTextShort: {\n    regex: RegExp('^(' + reMonthAbbr + ')-' + reDaylz + '-' + reYear, 'i'),\n    name: 'pgtextshort',\n    callback: function callback(match, month, day, year) {\n      return this.ymd(processYear(year), lookupMonth(month), +day);\n    }\n  },\n\n  dateNoYear: {\n    regex: RegExp('^' + reMonthText + '[ .\\\\t-]*' + reDay + '[,.stndrh\\\\t ]*', 'i'),\n    name: 'datenoyear',\n    callback: function callback(match, month, day) {\n      return this.ymd(this.y, lookupMonth(month), +day);\n    }\n  },\n\n  dateNoYearRev: {\n    regex: RegExp('^' + reDay + '[ .\\\\t-]*' + reMonthText, 'i'),\n    name: 'datenoyearrev',\n    callback: function callback(match, day, month) {\n      return this.ymd(this.y, lookupMonth(month), +day);\n    }\n  },\n\n  isoWeekDay: {\n    regex: RegExp('^' + reYear4 + '-?W' + reWeekOfYear + '(?:-?([0-7]))?'),\n    name: 'isoweekday | isoweek',\n    callback: function callback(match, year, week, day) {\n      day = day ? +day : 1;\n\n      if (!this.ymd(+year, 0, 1)) {\n        return false;\n      }\n\n      // get day of week for Jan 1st\n      var dayOfWeek = new Date(this.y, this.m, this.d).getDay();\n\n      // and use the day to figure out the offset for day 1 of week 1\n      dayOfWeek = 0 - (dayOfWeek > 4 ? dayOfWeek - 7 : dayOfWeek);\n\n      this.rd += dayOfWeek + (week - 1) * 7 + day;\n    }\n  },\n\n  relativeText: {\n    regex: RegExp('^(' + reReltextnumber + '|' + reReltexttext + ')' + reSpace + '(' + reReltextunit + ')', 'i'),\n    name: 'relativetext',\n    callback: function callback(match, relValue, relUnit) {\n      // todo: implement handling of 'this time-unit'\n      // eslint-disable-next-line no-unused-vars\n      var _lookupRelative = lookupRelative(relValue),\n          amount = _lookupRelative.amount,\n          behavior = _lookupRelative.behavior;\n\n      switch (relUnit.toLowerCase()) {\n        case 'sec':\n        case 'secs':\n        case 'second':\n        case 'seconds':\n          this.rs += amount;\n          break;\n        case 'min':\n        case 'mins':\n        case 'minute':\n        case 'minutes':\n          this.ri += amount;\n          break;\n        case 'hour':\n        case 'hours':\n          this.rh += amount;\n          break;\n        case 'day':\n        case 'days':\n          this.rd += amount;\n          break;\n        case 'fortnight':\n        case 'fortnights':\n        case 'forthnight':\n        case 'forthnights':\n          this.rd += amount * 14;\n          break;\n        case 'week':\n        case 'weeks':\n          this.rd += amount * 7;\n          break;\n        case 'month':\n        case 'months':\n          this.rm += amount;\n          break;\n        case 'year':\n        case 'years':\n          this.ry += amount;\n          break;\n        case 'mon':case 'monday':\n        case 'tue':case 'tuesday':\n        case 'wed':case 'wednesday':\n        case 'thu':case 'thursday':\n        case 'fri':case 'friday':\n        case 'sat':case 'saturday':\n        case 'sun':case 'sunday':\n          this.resetTime();\n          this.weekday = lookupWeekday(relUnit, 7);\n          this.weekdayBehavior = 1;\n          this.rd += (amount > 0 ? amount - 1 : amount) * 7;\n          break;\n        case 'weekday':\n        case 'weekdays':\n          // todo\n          break;\n      }\n    }\n  },\n\n  relative: {\n    regex: RegExp('^([+-]*)[ \\\\t]*(\\\\d+)' + reSpaceOpt + '(' + reReltextunit + '|week)', 'i'),\n    name: 'relative',\n    callback: function callback(match, signs, relValue, relUnit) {\n      var minuses = signs.replace(/[^-]/g, '').length;\n\n      var amount = +relValue * Math.pow(-1, minuses);\n\n      switch (relUnit.toLowerCase()) {\n        case 'sec':\n        case 'secs':\n        case 'second':\n        case 'seconds':\n          this.rs += amount;\n          break;\n        case 'min':\n        case 'mins':\n        case 'minute':\n        case 'minutes':\n          this.ri += amount;\n          break;\n        case 'hour':\n        case 'hours':\n          this.rh += amount;\n          break;\n        case 'day':\n        case 'days':\n          this.rd += amount;\n          break;\n        case 'fortnight':\n        case 'fortnights':\n        case 'forthnight':\n        case 'forthnights':\n          this.rd += amount * 14;\n          break;\n        case 'week':\n        case 'weeks':\n          this.rd += amount * 7;\n          break;\n        case 'month':\n        case 'months':\n          this.rm += amount;\n          break;\n        case 'year':\n        case 'years':\n          this.ry += amount;\n          break;\n        case 'mon':case 'monday':\n        case 'tue':case 'tuesday':\n        case 'wed':case 'wednesday':\n        case 'thu':case 'thursday':\n        case 'fri':case 'friday':\n        case 'sat':case 'saturday':\n        case 'sun':case 'sunday':\n          this.resetTime();\n          this.weekday = lookupWeekday(relUnit, 7);\n          this.weekdayBehavior = 1;\n          this.rd += (amount > 0 ? amount - 1 : amount) * 7;\n          break;\n        case 'weekday':\n        case 'weekdays':\n          // todo\n          break;\n      }\n    }\n  },\n\n  dayText: {\n    regex: RegExp('^(' + reDaytext + ')', 'i'),\n    name: 'daytext',\n    callback: function callback(match, dayText) {\n      this.resetTime();\n      this.weekday = lookupWeekday(dayText, 0);\n\n      if (this.weekdayBehavior !== 2) {\n        this.weekdayBehavior = 1;\n      }\n    }\n  },\n\n  relativeTextWeek: {\n    regex: RegExp('^(' + reReltexttext + ')' + reSpace + 'week', 'i'),\n    name: 'relativetextweek',\n    callback: function callback(match, relText) {\n      this.weekdayBehavior = 2;\n\n      switch (relText.toLowerCase()) {\n        case 'this':\n          this.rd += 0;\n          break;\n        case 'next':\n          this.rd += 7;\n          break;\n        case 'last':\n        case 'previous':\n          this.rd -= 7;\n          break;\n      }\n\n      if (isNaN(this.weekday)) {\n        this.weekday = 1;\n      }\n    }\n  },\n\n  monthFullOrMonthAbbr: {\n    regex: RegExp('^(' + reMonthFull + '|' + reMonthAbbr + ')', 'i'),\n    name: 'monthfull | monthabbr',\n    callback: function callback(match, month) {\n      return this.ymd(this.y, lookupMonth(month), this.d);\n    }\n  },\n\n  tzCorrection: {\n    regex: RegExp('^' + reTzCorrection, 'i'),\n    name: 'tzcorrection',\n    callback: function callback(tzCorrection) {\n      return this.zone(processTzCorrection(tzCorrection));\n    }\n  },\n\n  ago: {\n    regex: /^ago/i,\n    name: 'ago',\n    callback: function callback() {\n      this.ry = -this.ry;\n      this.rm = -this.rm;\n      this.rd = -this.rd;\n      this.rh = -this.rh;\n      this.ri = -this.ri;\n      this.rs = -this.rs;\n      this.rf = -this.rf;\n    }\n  },\n\n  gnuNoColon2: {\n    // second instance of gnunocolon, without leading 't'\n    // it's down here, because it is very generic (4 digits in a row)\n    // thus conflicts with many rules above\n    // only year4 should come afterwards\n    regex: RegExp('^' + reHour24lz + reMinutelz, 'i'),\n    name: 'gnunocolon',\n    callback: function callback(match, hour, minute) {\n      return this.time(+hour, +minute, 0, this.f);\n    }\n  },\n\n  year4: {\n    regex: RegExp('^' + reYear4),\n    name: 'year4',\n    callback: function callback(match, year) {\n      this.y = +year;\n      return true;\n    }\n  },\n\n  whitespace: {\n    regex: /^[ .,\\t]+/,\n    name: 'whitespace'\n    // do nothing\n  },\n\n  any: {\n    regex: /^[\\s\\S]+/,\n    name: 'any',\n    callback: function callback() {\n      return false;\n    }\n  }\n};\n\nvar resultProto = {\n  // date\n  y: NaN,\n  m: NaN,\n  d: NaN,\n  // time\n  h: NaN,\n  i: NaN,\n  s: NaN,\n  f: NaN,\n\n  // relative shifts\n  ry: 0,\n  rm: 0,\n  rd: 0,\n  rh: 0,\n  ri: 0,\n  rs: 0,\n  rf: 0,\n\n  // weekday related shifts\n  weekday: NaN,\n  weekdayBehavior: 0,\n\n  // first or last day of month\n  // 0 none, 1 first, -1 last\n  firstOrLastDayOfMonth: 0,\n\n  // timezone correction in minutes\n  z: NaN,\n\n  // counters\n  dates: 0,\n  times: 0,\n  zones: 0,\n\n  // helper functions\n  ymd: function ymd(y, m, d) {\n    if (this.dates > 0) {\n      return false;\n    }\n\n    this.dates++;\n    this.y = y;\n    this.m = m;\n    this.d = d;\n    return true;\n  },\n  time: function time(h, i, s, f) {\n    if (this.times > 0) {\n      return false;\n    }\n\n    this.times++;\n    this.h = h;\n    this.i = i;\n    this.s = s;\n    this.f = f;\n\n    return true;\n  },\n  resetTime: function resetTime() {\n    this.h = 0;\n    this.i = 0;\n    this.s = 0;\n    this.f = 0;\n    this.times = 0;\n\n    return true;\n  },\n  zone: function zone(minutes) {\n    if (this.zones <= 1) {\n      this.zones++;\n      this.z = minutes;\n      return true;\n    }\n\n    return false;\n  },\n  toDate: function toDate(relativeTo) {\n    if (this.dates && !this.times) {\n      this.h = this.i = this.s = this.f = 0;\n    }\n\n    // fill holes\n    if (isNaN(this.y)) {\n      this.y = relativeTo.getFullYear();\n    }\n\n    if (isNaN(this.m)) {\n      this.m = relativeTo.getMonth();\n    }\n\n    if (isNaN(this.d)) {\n      this.d = relativeTo.getDate();\n    }\n\n    if (isNaN(this.h)) {\n      this.h = relativeTo.getHours();\n    }\n\n    if (isNaN(this.i)) {\n      this.i = relativeTo.getMinutes();\n    }\n\n    if (isNaN(this.s)) {\n      this.s = relativeTo.getSeconds();\n    }\n\n    if (isNaN(this.f)) {\n      this.f = relativeTo.getMilliseconds();\n    }\n\n    // adjust special early\n    switch (this.firstOrLastDayOfMonth) {\n      case 1:\n        this.d = 1;\n        break;\n      case -1:\n        this.d = 0;\n        this.m += 1;\n        break;\n    }\n\n    if (!isNaN(this.weekday)) {\n      var date = new Date(relativeTo.getTime());\n      date.setFullYear(this.y, this.m, this.d);\n      date.setHours(this.h, this.i, this.s, this.f);\n\n      var dow = date.getDay();\n\n      if (this.weekdayBehavior === 2) {\n        // To make \"this week\" work, where the current day of week is a \"sunday\"\n        if (dow === 0 && this.weekday !== 0) {\n          this.weekday = -6;\n        }\n\n        // To make \"sunday this week\" work, where the current day of week is not a \"sunday\"\n        if (this.weekday === 0 && dow !== 0) {\n          this.weekday = 7;\n        }\n\n        this.d -= dow;\n        this.d += this.weekday;\n      } else {\n        var diff = this.weekday - dow;\n\n        // some PHP magic\n        if (this.rd < 0 && diff < 0 || this.rd >= 0 && diff <= -this.weekdayBehavior) {\n          diff += 7;\n        }\n\n        if (this.weekday >= 0) {\n          this.d += diff;\n        } else {\n          this.d -= 7 - (Math.abs(this.weekday) - dow);\n        }\n\n        this.weekday = NaN;\n      }\n    }\n\n    // adjust relative\n    this.y += this.ry;\n    this.m += this.rm;\n    this.d += this.rd;\n\n    this.h += this.rh;\n    this.i += this.ri;\n    this.s += this.rs;\n    this.f += this.rf;\n\n    this.ry = this.rm = this.rd = 0;\n    this.rh = this.ri = this.rs = this.rf = 0;\n\n    var result = new Date(relativeTo.getTime());\n    // since Date constructor treats years <= 99 as 1900+\n    // it can't be used, thus this weird way\n    result.setFullYear(this.y, this.m, this.d);\n    result.setHours(this.h, this.i, this.s, this.f);\n\n    // note: this is done twice in PHP\n    // early when processing special relatives\n    // and late\n    // todo: check if the logic can be reduced\n    // to just one time action\n    switch (this.firstOrLastDayOfMonth) {\n      case 1:\n        result.setDate(1);\n        break;\n      case -1:\n        result.setMonth(result.getMonth() + 1, 0);\n        break;\n    }\n\n    // adjust timezone\n    if (!isNaN(this.z) && result.getTimezoneOffset() !== this.z) {\n      result.setUTCFullYear(result.getFullYear(), result.getMonth(), result.getDate());\n\n      result.setUTCHours(result.getHours(), result.getMinutes() + this.z, result.getSeconds(), result.getMilliseconds());\n    }\n\n    return result;\n  }\n};\n\nmodule.exports = function strtotime(str, now) {\n  //       discuss at: http://locutus.io/php/strtotime/\n  //      original by: Caio Ariede (http://caioariede.com)\n  //      improved by: Kevin van Zonneveld (http://kvz.io)\n  //      improved by: Caio Ariede (http://caioariede.com)\n  //      improved by: A. Matías Quezada (http://amatiasq.com)\n  //      improved by: preuter\n  //      improved by: Brett Zamir (http://brett-zamir.me)\n  //      improved by: Mirko Faber\n  //         input by: David\n  //      bugfixed by: Wagner B. Soares\n  //      bugfixed by: Artur Tchernychev\n  //      bugfixed by: Stephan Bösch-Plepelits (http://github.com/plepe)\n  // reimplemented by: Rafał Kukawski\n  //           note 1: Examples all have a fixed timestamp to prevent\n  //           note 1: tests to fail because of variable time(zones)\n  //        example 1: strtotime('+1 day', 1129633200)\n  //        returns 1: 1129719600\n  //        example 2: strtotime('+1 week 2 days 4 hours 2 seconds', 1129633200)\n  //        returns 2: 1130425202\n  //        example 3: strtotime('last month', 1129633200)\n  //        returns 3: 1127041200\n  //        example 4: strtotime('2009-05-04 08:30:00+00')\n  //        returns 4: 1241425800\n  //        example 5: strtotime('2009-05-04 08:30:00+02:00')\n  //        returns 5: 1241418600\n  if (now == null) {\n    now = Math.floor(Date.now() / 1000);\n  }\n\n  // the rule order is very fragile\n  // as many formats are similar to others\n  // so small change can cause\n  // input misinterpretation\n  var rules = [formats.yesterday, formats.now, formats.noon, formats.midnightOrToday, formats.tomorrow, formats.timestamp, formats.firstOrLastDay, formats.backOrFrontOf,\n  // formats.weekdayOf, // not yet implemented\n  formats.mssqltime, formats.timeLong12, formats.timeShort12, formats.timeTiny12, formats.soap, formats.wddx, formats.exif, formats.xmlRpc, formats.xmlRpcNoColon, formats.clf, formats.iso8601long, formats.dateTextual, formats.pointedDate4, formats.pointedDate2, formats.timeLong24, formats.dateNoColon, formats.pgydotd, formats.timeShort24, formats.iso8601noColon,\n  // iso8601dateSlash needs to come before dateSlash\n  formats.iso8601dateSlash, formats.dateSlash, formats.american, formats.americanShort, formats.gnuDateShortOrIso8601date2, formats.iso8601date4, formats.gnuNoColon, formats.gnuDateShorter, formats.pgTextReverse, formats.dateFull, formats.dateNoDay, formats.dateNoDayRev, formats.pgTextShort, formats.dateNoYear, formats.dateNoYearRev, formats.isoWeekDay, formats.relativeText, formats.relative, formats.dayText, formats.relativeTextWeek, formats.monthFullOrMonthAbbr, formats.tzCorrection, formats.ago, formats.gnuNoColon2, formats.year4,\n  // note: the two rules below\n  // should always come last\n  formats.whitespace, formats.any];\n\n  var result = Object.create(resultProto);\n\n  while (str.length) {\n    for (var i = 0, l = rules.length; i < l; i++) {\n      var format = rules[i];\n\n      var match = str.match(format.regex);\n\n      if (match) {\n        // care only about false results. Ignore other values\n        if (format.callback && format.callback.apply(result, match) === false) {\n          return false;\n        }\n\n        str = str.substr(match[0].length);\n        break;\n      }\n    }\n  }\n\n  return Math.floor(result.toDate(new Date(now * 1000)) / 1000);\n};\n//# sourceMappingURL=strtotime.js.map\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = function date(format, timestamp) {\n  //  discuss at: http://locutus.io/php/date/\n  // original by: Carlos R. L. Rodrigues (http://www.jsfromhell.com)\n  // original by: gettimeofday\n  //    parts by: Peter-Paul Koch (http://www.quirksmode.org/js/beat.html)\n  // improved by: Kevin van Zonneveld (http://kvz.io)\n  // improved by: MeEtc (http://yass.meetcweb.com)\n  // improved by: Brad Touesnard\n  // improved by: Tim Wiel\n  // improved by: Bryan Elliott\n  // improved by: David Randall\n  // improved by: Theriault (https://github.com/Theriault)\n  // improved by: Theriault (https://github.com/Theriault)\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  // improved by: Theriault (https://github.com/Theriault)\n  // improved by: Thomas Beaucourt (http://www.webapp.fr)\n  // improved by: JT\n  // improved by: Theriault (https://github.com/Theriault)\n  // improved by: Rafał Kukawski (http://blog.kukawski.pl)\n  // improved by: Theriault (https://github.com/Theriault)\n  //    input by: Brett Zamir (http://brett-zamir.me)\n  //    input by: majak\n  //    input by: Alex\n  //    input by: Martin\n  //    input by: Alex Wilson\n  //    input by: Haravikk\n  // bugfixed by: Kevin van Zonneveld (http://kvz.io)\n  // bugfixed by: majak\n  // bugfixed by: Kevin van Zonneveld (http://kvz.io)\n  // bugfixed by: Brett Zamir (http://brett-zamir.me)\n  // bugfixed by: omid (http://locutus.io/php/380:380#comment_137122)\n  // bugfixed by: Chris (http://www.devotis.nl/)\n  //      note 1: Uses global: locutus to store the default timezone\n  //      note 1: Although the function potentially allows timezone info\n  //      note 1: (see notes), it currently does not set\n  //      note 1: per a timezone specified by date_default_timezone_set(). Implementers might use\n  //      note 1: $locutus.currentTimezoneOffset and\n  //      note 1: $locutus.currentTimezoneDST set by that function\n  //      note 1: in order to adjust the dates in this function\n  //      note 1: (or our other date functions!) accordingly\n  //   example 1: date('H:m:s \\\\m \\\\i\\\\s \\\\m\\\\o\\\\n\\\\t\\\\h', 1062402400)\n  //   returns 1: '07:09:40 m is month'\n  //   example 2: date('F j, Y, g:i a', 1062462400)\n  //   returns 2: 'September 2, 2003, 12:26 am'\n  //   example 3: date('Y W o', 1062462400)\n  //   returns 3: '2003 36 2003'\n  //   example 4: var $x = date('Y m d', (new Date()).getTime() / 1000)\n  //   example 4: $x = $x + ''\n  //   example 4: var $result = $x.length // 2009 01 09\n  //   returns 4: 10\n  //   example 5: date('W', 1104534000)\n  //   returns 5: '52'\n  //   example 6: date('B t', 1104534000)\n  //   returns 6: '999 31'\n  //   example 7: date('W U', 1293750000.82); // 2010-12-31\n  //   returns 7: '52 1293750000'\n  //   example 8: date('W', 1293836400); // 2011-01-01\n  //   returns 8: '52'\n  //   example 9: date('W Y-m-d', 1293974054); // 2011-01-02\n  //   returns 9: '52 2011-01-02'\n  //        test: skip-1 skip-2 skip-5\n\n  var jsdate, f;\n  // Keep this here (works, but for code commented-out below for file size reasons)\n  // var tal= [];\n  var txtWords = ['Sun', 'Mon', 'Tues', 'Wednes', 'Thurs', 'Fri', 'Satur', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  // trailing backslash -> (dropped)\n  // a backslash followed by any character (including backslash) -> the character\n  // empty string -> empty string\n  var formatChr = /\\\\?(.?)/gi;\n  var formatChrCb = function formatChrCb(t, s) {\n    return f[t] ? f[t]() : s;\n  };\n  var _pad = function _pad(n, c) {\n    n = String(n);\n    while (n.length < c) {\n      n = '0' + n;\n    }\n    return n;\n  };\n  f = {\n    // Day\n    d: function d() {\n      // Day of month w/leading 0; 01..31\n      return _pad(f.j(), 2);\n    },\n    D: function D() {\n      // Shorthand day name; Mon...Sun\n      return f.l().slice(0, 3);\n    },\n    j: function j() {\n      // Day of month; 1..31\n      return jsdate.getDate();\n    },\n    l: function l() {\n      // Full day name; Monday...Sunday\n      return txtWords[f.w()] + 'day';\n    },\n    N: function N() {\n      // ISO-8601 day of week; 1[Mon]..7[Sun]\n      return f.w() || 7;\n    },\n    S: function S() {\n      // Ordinal suffix for day of month; st, nd, rd, th\n      var j = f.j();\n      var i = j % 10;\n      if (i <= 3 && parseInt(j % 100 / 10, 10) === 1) {\n        i = 0;\n      }\n      return ['st', 'nd', 'rd'][i - 1] || 'th';\n    },\n    w: function w() {\n      // Day of week; 0[Sun]..6[Sat]\n      return jsdate.getDay();\n    },\n    z: function z() {\n      // Day of year; 0..365\n      var a = new Date(f.Y(), f.n() - 1, f.j());\n      var b = new Date(f.Y(), 0, 1);\n      return Math.round((a - b) / 864e5);\n    },\n\n    // Week\n    W: function W() {\n      // ISO-8601 week number\n      var a = new Date(f.Y(), f.n() - 1, f.j() - f.N() + 3);\n      var b = new Date(a.getFullYear(), 0, 4);\n      return _pad(1 + Math.round((a - b) / 864e5 / 7), 2);\n    },\n\n    // Month\n    F: function F() {\n      // Full month name; January...December\n      return txtWords[6 + f.n()];\n    },\n    m: function m() {\n      // Month w/leading 0; 01...12\n      return _pad(f.n(), 2);\n    },\n    M: function M() {\n      // Shorthand month name; Jan...Dec\n      return f.F().slice(0, 3);\n    },\n    n: function n() {\n      // Month; 1...12\n      return jsdate.getMonth() + 1;\n    },\n    t: function t() {\n      // Days in month; 28...31\n      return new Date(f.Y(), f.n(), 0).getDate();\n    },\n\n    // Year\n    L: function L() {\n      // Is leap year?; 0 or 1\n      var j = f.Y();\n      return j % 4 === 0 & j % 100 !== 0 | j % 400 === 0;\n    },\n    o: function o() {\n      // ISO-8601 year\n      var n = f.n();\n      var W = f.W();\n      var Y = f.Y();\n      return Y + (n === 12 && W < 9 ? 1 : n === 1 && W > 9 ? -1 : 0);\n    },\n    Y: function Y() {\n      // Full year; e.g. 1980...2010\n      return jsdate.getFullYear();\n    },\n    y: function y() {\n      // Last two digits of year; 00...99\n      return f.Y().toString().slice(-2);\n    },\n\n    // Time\n    a: function a() {\n      // am or pm\n      return jsdate.getHours() > 11 ? 'pm' : 'am';\n    },\n    A: function A() {\n      // AM or PM\n      return f.a().toUpperCase();\n    },\n    B: function B() {\n      // Swatch Internet time; 000..999\n      var H = jsdate.getUTCHours() * 36e2;\n      // Hours\n      var i = jsdate.getUTCMinutes() * 60;\n      // Minutes\n      // Seconds\n      var s = jsdate.getUTCSeconds();\n      return _pad(Math.floor((H + i + s + 36e2) / 86.4) % 1e3, 3);\n    },\n    g: function g() {\n      // 12-Hours; 1..12\n      return f.G() % 12 || 12;\n    },\n    G: function G() {\n      // 24-Hours; 0..23\n      return jsdate.getHours();\n    },\n    h: function h() {\n      // 12-Hours w/leading 0; 01..12\n      return _pad(f.g(), 2);\n    },\n    H: function H() {\n      // 24-Hours w/leading 0; 00..23\n      return _pad(f.G(), 2);\n    },\n    i: function i() {\n      // Minutes w/leading 0; 00..59\n      return _pad(jsdate.getMinutes(), 2);\n    },\n    s: function s() {\n      // Seconds w/leading 0; 00..59\n      return _pad(jsdate.getSeconds(), 2);\n    },\n    u: function u() {\n      // Microseconds; 000000-999000\n      return _pad(jsdate.getMilliseconds() * 1000, 6);\n    },\n\n    // Timezone\n    e: function e() {\n      // Timezone identifier; e.g. Atlantic/Azores, ...\n      // The following works, but requires inclusion of the very large\n      // timezone_abbreviations_list() function.\n      /*              return that.date_default_timezone_get();\n       */\n      var msg = 'Not supported (see source code of date() for timezone on how to add support)';\n      throw new Error(msg);\n    },\n    I: function I() {\n      // DST observed?; 0 or 1\n      // Compares Jan 1 minus Jan 1 UTC to Jul 1 minus Jul 1 UTC.\n      // If they are not equal, then DST is observed.\n      var a = new Date(f.Y(), 0);\n      // Jan 1\n      var c = Date.UTC(f.Y(), 0);\n      // Jan 1 UTC\n      var b = new Date(f.Y(), 6);\n      // Jul 1\n      // Jul 1 UTC\n      var d = Date.UTC(f.Y(), 6);\n      return a - c !== b - d ? 1 : 0;\n    },\n    O: function O() {\n      // Difference to GMT in hour format; e.g. +0200\n      var tzo = jsdate.getTimezoneOffset();\n      var a = Math.abs(tzo);\n      return (tzo > 0 ? '-' : '+') + _pad(Math.floor(a / 60) * 100 + a % 60, 4);\n    },\n    P: function P() {\n      // Difference to GMT w/colon; e.g. +02:00\n      var O = f.O();\n      return O.substr(0, 3) + ':' + O.substr(3, 2);\n    },\n    T: function T() {\n      // The following works, but requires inclusion of the very\n      // large timezone_abbreviations_list() function.\n      /*              var abbr, i, os, _default;\n      if (!tal.length) {\n        tal = that.timezone_abbreviations_list();\n      }\n      if ($locutus && $locutus.default_timezone) {\n        _default = $locutus.default_timezone;\n        for (abbr in tal) {\n          for (i = 0; i < tal[abbr].length; i++) {\n            if (tal[abbr][i].timezone_id === _default) {\n              return abbr.toUpperCase();\n            }\n          }\n        }\n      }\n      for (abbr in tal) {\n        for (i = 0; i < tal[abbr].length; i++) {\n          os = -jsdate.getTimezoneOffset() * 60;\n          if (tal[abbr][i].offset === os) {\n            return abbr.toUpperCase();\n          }\n        }\n      }\n      */\n      return 'UTC';\n    },\n    Z: function Z() {\n      // Timezone offset in seconds (-43200...50400)\n      return -jsdate.getTimezoneOffset() * 60;\n    },\n\n    // Full Date/Time\n    c: function c() {\n      // ISO-8601 date.\n      return 'Y-m-d\\\\TH:i:sP'.replace(formatChr, formatChrCb);\n    },\n    r: function r() {\n      // RFC 2822\n      return 'D, d M Y H:i:s O'.replace(formatChr, formatChrCb);\n    },\n    U: function U() {\n      // Seconds since UNIX epoch\n      return jsdate / 1000 | 0;\n    }\n  };\n\n  var _date = function _date(format, timestamp) {\n    jsdate = timestamp === undefined ? new Date() // Not provided\n    : timestamp instanceof Date ? new Date(timestamp) // JS Date()\n    : new Date(timestamp * 1000) // UNIX timestamp (auto-convert to int)\n    ;\n    return format.replace(formatChr, formatChrCb);\n  };\n\n  return _date(format, timestamp);\n};\n//# sourceMappingURL=date.js.map\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = function boolval(mixedVar) {\n  // original by: Will Rowe\n  //   example 1: boolval(true)\n  //   returns 1: true\n  //   example 2: boolval(false)\n  //   returns 2: false\n  //   example 3: boolval(0)\n  //   returns 3: false\n  //   example 4: boolval(0.0)\n  //   returns 4: false\n  //   example 5: boolval('')\n  //   returns 5: false\n  //   example 6: boolval('0')\n  //   returns 6: false\n  //   example 7: boolval([])\n  //   returns 7: false\n  //   example 8: boolval('')\n  //   returns 8: false\n  //   example 9: boolval(null)\n  //   returns 9: false\n  //   example 10: boolval(undefined)\n  //   returns 10: false\n  //   example 11: boolval('true')\n  //   returns 11: true\n\n  if (mixedVar === false) {\n    return false;\n  }\n\n  if (mixedVar === 0 || mixedVar === 0.0) {\n    return false;\n  }\n\n  if (mixedVar === '' || mixedVar === '0') {\n    return false;\n  }\n\n  if (Array.isArray(mixedVar) && mixedVar.length === 0) {\n    return false;\n  }\n\n  if (mixedVar === null || mixedVar === undefined) {\n    return false;\n  }\n\n  return true;\n};\n//# sourceMappingURL=boolval.js.map\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = function (Twig) {\n  'use strict';\n\n  Twig.Templates.registerLoader('ajax', function (location, params, callback, errorCallback) {\n    var template;\n    var precompiled = params.precompiled;\n    var parser = this.parsers[params.parser] || this.parser.twig;\n\n    if (typeof XMLHttpRequest === 'undefined') {\n      throw new Twig.Error('Unsupported platform: Unable to do ajax requests ' + 'because there is no \"XMLHTTPRequest\" implementation');\n    }\n\n    var xmlhttp = new XMLHttpRequest();\n\n    xmlhttp.onreadystatechange = function () {\n      var data = null;\n\n      if (xmlhttp.readyState === 4) {\n        if (xmlhttp.status === 200 || window.cordova && xmlhttp.status === 0) {\n          Twig.log.debug('Got template ', xmlhttp.responseText);\n\n          if (precompiled === true) {\n            data = JSON.parse(xmlhttp.responseText);\n          } else {\n            data = xmlhttp.responseText;\n          }\n\n          params.url = location;\n          params.data = data;\n          template = parser.call(this, params);\n\n          if (typeof callback === 'function') {\n            callback(template);\n          }\n        } else if (typeof errorCallback === 'function') {\n          errorCallback(xmlhttp);\n        }\n      }\n    };\n\n    xmlhttp.open('GET', location, Boolean(params.async));\n    xmlhttp.overrideMimeType('text/plain');\n    xmlhttp.send();\n\n    if (params.async) {\n      // TODO: return deferred promise\n      return true;\n    }\n\n    return template;\n  });\n};\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = function (Twig) {\n  'use strict';\n\n  var fs;\n  var path;\n\n  try {\n    // Require lib dependencies at runtime\n    fs = __webpack_require__(29);\n    path = __webpack_require__(4);\n  } catch (error) {\n    // NOTE: this is in a try/catch to avoid errors cross platform\n    console.warn('Missing fs and path modules. ' + error);\n  }\n\n  Twig.Templates.registerLoader('fs', function (location, params, callback, errorCallback) {\n    var template;\n    var data = null;\n    var precompiled = params.precompiled;\n    var parser = this.parsers[params.parser] || this.parser.twig;\n\n    if (!fs || !path) {\n      throw new Twig.Error('Unsupported platform: Unable to load from file ' + 'because there is no \"fs\" or \"path\" implementation');\n    }\n\n    var loadTemplateFn = function loadTemplateFn(err, data) {\n      if (err) {\n        if (typeof errorCallback === 'function') {\n          errorCallback(err);\n        }\n\n        return;\n      }\n\n      if (precompiled === true) {\n        data = JSON.parse(data);\n      }\n\n      params.data = data;\n      params.path = params.path || location; // Template is in data\n\n      template = parser.call(this, params);\n\n      if (typeof callback === 'function') {\n        callback(template);\n      }\n    };\n\n    params.path = params.path || location;\n\n    if (params.async) {\n      fs.stat(params.path, function (err, stats) {\n        if (err || !stats.isFile()) {\n          if (typeof errorCallback === 'function') {\n            errorCallback(new Twig.Error('Unable to find template file ' + params.path));\n          }\n\n          return;\n        }\n\n        fs.readFile(params.path, 'utf8', loadTemplateFn);\n      }); // TODO: return deferred promise\n\n      return true;\n    }\n\n    try {\n      if (!fs.statSync(params.path).isFile()) {\n        throw new Twig.Error('Unable to find template file ' + params.path);\n      }\n    } catch (error) {\n      throw new Twig.Error('Unable to find template file ' + params.path + '. ' + error);\n    }\n\n    data = fs.readFileSync(params.path, 'utf8');\n    loadTemplateFn(undefined, data);\n    return template;\n  });\n};\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! fs */ 1);\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __webpack_require__(0);\n\nvar _defineProperty2 = _interopRequireDefault(__webpack_require__(2));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// ## twig.logic.js\n//\n// This file handles tokenizing, compiling and parsing logic tokens. {% ... %}\nmodule.exports = function (Twig) {\n  'use strict';\n  /**\n   * Namespace for logic handling.\n   */\n\n  Twig.logic = {};\n  /**\n   * Logic token types.\n   */\n\n  Twig.logic.type = {\n    if_: 'Twig.logic.type.if',\n    endif: 'Twig.logic.type.endif',\n    for_: 'Twig.logic.type.for',\n    endfor: 'Twig.logic.type.endfor',\n    else_: 'Twig.logic.type.else',\n    elseif: 'Twig.logic.type.elseif',\n    set: 'Twig.logic.type.set',\n    setcapture: 'Twig.logic.type.setcapture',\n    endset: 'Twig.logic.type.endset',\n    filter: 'Twig.logic.type.filter',\n    endfilter: 'Twig.logic.type.endfilter',\n    apply: 'Twig.logic.type.apply',\n    endapply: 'Twig.logic.type.endapply',\n    \"do\": 'Twig.logic.type.do',\n    shortblock: 'Twig.logic.type.shortblock',\n    block: 'Twig.logic.type.block',\n    endblock: 'Twig.logic.type.endblock',\n    extends_: 'Twig.logic.type.extends',\n    use: 'Twig.logic.type.use',\n    include: 'Twig.logic.type.include',\n    spaceless: 'Twig.logic.type.spaceless',\n    endspaceless: 'Twig.logic.type.endspaceless',\n    macro: 'Twig.logic.type.macro',\n    endmacro: 'Twig.logic.type.endmacro',\n    import_: 'Twig.logic.type.import',\n    from: 'Twig.logic.type.from',\n    embed: 'Twig.logic.type.embed',\n    endembed: 'Twig.logic.type.endembed',\n    \"with\": 'Twig.logic.type.with',\n    endwith: 'Twig.logic.type.endwith',\n    deprecated: 'Twig.logic.type.deprecated'\n  }; // Regular expressions for handling logic tokens.\n  //\n  // Properties:\n  //\n  //      type:  The type of expression this matches\n  //\n  //      regex: A regular expression that matches the format of the token\n  //\n  //      next:  What logic tokens (if any) pop this token off the logic stack. If empty, the\n  //             logic token is assumed to not require an end tag and isn't push onto the stack.\n  //\n  //      open:  Does this tag open a logic expression or is it standalone. For example,\n  //             {% endif %} cannot exist without an opening {% if ... %} tag, so open = false.\n  //\n  //  Functions:\n  //\n  //      compile: A function that handles compiling the token into an output token ready for\n  //               parsing with the parse function.\n  //\n  //      parse:   A function that parses the compiled token into output (HTML / whatever the\n  //               template represents).\n\n  Twig.logic.definitions = [{\n    /**\n     * If type logic tokens.\n     *\n     *  Format: {% if expression %}\n     */\n    type: Twig.logic.type.if_,\n    regex: /^if\\s?([\\s\\S]+)$/,\n    next: [Twig.logic.type.else_, Twig.logic.type.elseif, Twig.logic.type.endif],\n    open: true,\n    compile: function compile(token) {\n      var expression = token.match[1]; // Compile the expression.\n\n      token.stack = Twig.expression.compile.call(this, {\n        type: Twig.expression.type.expression,\n        value: expression\n      }).stack;\n      delete token.match;\n      return token;\n    },\n    parse: function parse(token, context, chain) {\n      var state = this;\n      return Twig.expression.parseAsync.call(state, token.stack, context).then(function (result) {\n        chain = true;\n\n        if (Twig.lib.boolval(result)) {\n          chain = false;\n          return state.parseAsync(token.output, context);\n        }\n\n        return '';\n      }).then(function (output) {\n        return {\n          chain: chain,\n          output: output\n        };\n      });\n    }\n  }, {\n    /**\n     * Else if type logic tokens.\n     *\n     *  Format: {% elseif expression %}\n     */\n    type: Twig.logic.type.elseif,\n    regex: /^elseif\\s?([^\\s].*)$/,\n    next: [Twig.logic.type.else_, Twig.logic.type.elseif, Twig.logic.type.endif],\n    open: false,\n    compile: function compile(token) {\n      var expression = token.match[1]; // Compile the expression.\n\n      token.stack = Twig.expression.compile.call(this, {\n        type: Twig.expression.type.expression,\n        value: expression\n      }).stack;\n      delete token.match;\n      return token;\n    },\n    parse: function parse(token, context, chain) {\n      var state = this;\n      return Twig.expression.parseAsync.call(state, token.stack, context).then(function (result) {\n        if (chain && Twig.lib.boolval(result)) {\n          chain = false;\n          return state.parseAsync(token.output, context);\n        }\n\n        return '';\n      }).then(function (output) {\n        return {\n          chain: chain,\n          output: output\n        };\n      });\n    }\n  }, {\n    /**\n     * Else type logic tokens.\n     *\n     *  Format: {% else %}\n     */\n    type: Twig.logic.type.else_,\n    regex: /^else$/,\n    next: [Twig.logic.type.endif, Twig.logic.type.endfor],\n    open: false,\n    parse: function parse(token, context, chain) {\n      var promise = Twig.Promise.resolve('');\n      var state = this;\n\n      if (chain) {\n        promise = state.parseAsync(token.output, context);\n      }\n\n      return promise.then(function (output) {\n        return {\n          chain: chain,\n          output: output\n        };\n      });\n    }\n  }, {\n    /**\n     * End if type logic tokens.\n     *\n     *  Format: {% endif %}\n     */\n    type: Twig.logic.type.endif,\n    regex: /^endif$/,\n    next: [],\n    open: false\n  }, {\n    /**\n     * For type logic tokens.\n     *\n     *  Format: {% for expression %}\n     */\n    type: Twig.logic.type.for_,\n    regex: /^for\\s+([a-zA-Z0-9_,\\s]+)\\s+in\\s+([\\S\\s]+?)(?:\\s+if\\s+([^\\s].*))?$/,\n    next: [Twig.logic.type.else_, Twig.logic.type.endfor],\n    open: true,\n    compile: function compile(token) {\n      var keyValue = token.match[1];\n      var expression = token.match[2];\n      var conditional = token.match[3];\n      var kvSplit = null;\n      token.keyVar = null;\n      token.valueVar = null;\n\n      if (keyValue.includes(',')) {\n        kvSplit = keyValue.split(',');\n\n        if (kvSplit.length === 2) {\n          token.keyVar = kvSplit[0].trim();\n          token.valueVar = kvSplit[1].trim();\n        } else {\n          throw new Twig.Error('Invalid expression in for loop: ' + keyValue);\n        }\n      } else {\n        token.valueVar = keyValue.trim();\n      } // Valid expressions for a for loop\n      //   for item     in expression\n      //   for key,item in expression\n      // Compile the expression.\n\n\n      token.expression = Twig.expression.compile.call(this, {\n        type: Twig.expression.type.expression,\n        value: expression\n      }).stack; // Compile the conditional (if available)\n\n      if (conditional) {\n        token.conditional = Twig.expression.compile.call(this, {\n          type: Twig.expression.type.expression,\n          value: conditional\n        }).stack;\n      }\n\n      delete token.match;\n      return token;\n    },\n    parse: function parse(token, context, continueChain) {\n      // Parse expression\n      var output = [];\n      var len;\n      var index = 0;\n      var keyset;\n      var state = this;\n      var conditional = token.conditional;\n\n      var buildLoop = function buildLoop(index, len) {\n        var isConditional = conditional !== undefined;\n        return {\n          index: index + 1,\n          index0: index,\n          revindex: isConditional ? undefined : len - index,\n          revindex0: isConditional ? undefined : len - index - 1,\n          first: index === 0,\n          last: isConditional ? undefined : index === len - 1,\n          length: isConditional ? undefined : len,\n          parent: context\n        };\n      }; // Run once for each iteration of the loop\n\n\n      var loop = function loop(key, value) {\n        var innerContext = _objectSpread({}, context);\n\n        innerContext[token.valueVar] = value;\n\n        if (token.keyVar) {\n          innerContext[token.keyVar] = key;\n        } // Loop object\n\n\n        innerContext.loop = buildLoop(index, len);\n        var promise = conditional === undefined ? Twig.Promise.resolve(true) : Twig.expression.parseAsync.call(state, conditional, innerContext);\n        return promise.then(function (condition) {\n          if (!condition) {\n            return;\n          }\n\n          return state.parseAsync(token.output, innerContext).then(function (tokenOutput) {\n            output.push(tokenOutput);\n            index += 1;\n          });\n        }).then(function () {\n          // Delete loop-related variables from the context\n          delete innerContext.loop;\n          delete innerContext[token.valueVar];\n          delete innerContext[token.keyVar]; // Merge in values that exist in context but have changed\n          // in inner_context.\n\n          Twig.merge(context, innerContext, true);\n        });\n      };\n\n      return Twig.expression.parseAsync.call(state, token.expression, context).then(function (result) {\n        if (Array.isArray(result)) {\n          len = result.length;\n          return Twig.async.forEach(result, function (value) {\n            var key = index;\n            return loop(key, value);\n          });\n        }\n\n        if (Twig.lib.is('Object', result)) {\n          if (result._keys === undefined) {\n            keyset = Object.keys(result);\n          } else {\n            keyset = result._keys;\n          }\n\n          len = keyset.length;\n          return Twig.async.forEach(keyset, function (key) {\n            // Ignore the _keys property, it's internal to twig.js\n            if (key === '_keys') {\n              return;\n            }\n\n            return loop(key, result[key]);\n          });\n        }\n      }).then(function () {\n        // Only allow else statements if no output was generated\n        continueChain = output.length === 0;\n        return {\n          chain: continueChain,\n          context: context,\n          output: Twig.output.call(state.template, output)\n        };\n      });\n    }\n  }, {\n    /**\n     * End for type logic tokens.\n     *\n     *  Format: {% endfor %}\n     */\n    type: Twig.logic.type.endfor,\n    regex: /^endfor$/,\n    next: [],\n    open: false\n  }, {\n    /**\n     * Set type logic tokens.\n     *\n     *  Format: {% set key = expression %}\n     */\n    type: Twig.logic.type.set,\n    regex: /^set\\s+([a-zA-Z0-9_,\\s]+)\\s*=\\s*([\\s\\S]+)$/,\n    next: [],\n    open: true,\n    compile: function compile(token) {\n      //\n      var key = token.match[1].trim();\n      var expression = token.match[2]; // Compile the expression.\n\n      var expressionStack = Twig.expression.compile.call(this, {\n        type: Twig.expression.type.expression,\n        value: expression\n      }).stack;\n      token.key = key;\n      token.expression = expressionStack;\n      delete token.match;\n      return token;\n    },\n    parse: function parse(token, context, continueChain) {\n      var key = token.key;\n      var state = this;\n      return Twig.expression.parseAsync.call(state, token.expression, context).then(function (value) {\n        if (value === context) {\n          /*  If storing the context in a variable, it needs to be a clone of the current state of context.\n              Otherwise we have a context with infinite recursion.\n              Fixes #341\n          */\n          value = _objectSpread({}, value);\n        }\n\n        context[key] = value;\n        return {\n          chain: continueChain,\n          context: context\n        };\n      });\n    }\n  }, {\n    /**\n     * Set capture type logic tokens.\n     *\n     *  Format: {% set key %}\n     */\n    type: Twig.logic.type.setcapture,\n    regex: /^set\\s+([a-zA-Z0-9_,\\s]+)$/,\n    next: [Twig.logic.type.endset],\n    open: true,\n    compile: function compile(token) {\n      var key = token.match[1].trim();\n      token.key = key;\n      delete token.match;\n      return token;\n    },\n    parse: function parse(token, context, continueChain) {\n      var state = this;\n      var key = token.key;\n      return state.parseAsync(token.output, context).then(function (output) {\n        // Set on both the global and local context\n        state.context[key] = output;\n        context[key] = output;\n        return {\n          chain: continueChain,\n          context: context\n        };\n      });\n    }\n  }, {\n    /**\n     * End set type block logic tokens.\n     *\n     *  Format: {% endset %}\n     */\n    type: Twig.logic.type.endset,\n    regex: /^endset$/,\n    next: [],\n    open: false\n  }, {\n    /**\n     * Filter logic tokens.\n     *\n     *  Format: {% filter upper %} or {% filter lower|escape %}\n     */\n    type: Twig.logic.type.filter,\n    regex: /^filter\\s+(.+)$/,\n    next: [Twig.logic.type.endfilter],\n    open: true,\n    compile: function compile(token) {\n      var expression = '|' + token.match[1].trim(); // Compile the expression.\n\n      token.stack = Twig.expression.compile.call(this, {\n        type: Twig.expression.type.expression,\n        value: expression\n      }).stack;\n      delete token.match;\n      return token;\n    },\n    parse: function parse(token, context, chain) {\n      var state = this;\n      return state.parseAsync(token.output, context).then(function (output) {\n        var stack = [{\n          type: Twig.expression.type.string,\n          value: output\n        }].concat(token.stack);\n        return Twig.expression.parseAsync.call(state, stack, context);\n      }).then(function (output) {\n        return {\n          chain: chain,\n          output: output\n        };\n      });\n    }\n  }, {\n    /**\n     * End filter logic tokens.\n     *\n     *  Format: {% endfilter %}\n     */\n    type: Twig.logic.type.endfilter,\n    regex: /^endfilter$/,\n    next: [],\n    open: false\n  }, {\n    /**\n     * Apply logic tokens.\n     *\n     *  Format: {% apply upper %} or {% apply lower|escape %}\n     */\n    type: Twig.logic.type.apply,\n    regex: /^apply\\s+(.+)$/,\n    next: [Twig.logic.type.endapply],\n    open: true,\n    compile: function compile(token) {\n      var expression = '|' + token.match[1].trim(); // Compile the expression.\n\n      token.stack = Twig.expression.compile.call(this, {\n        type: Twig.expression.type.expression,\n        value: expression\n      }).stack;\n      delete token.match;\n      return token;\n    },\n    parse: function parse(token, context, chain) {\n      var state = this;\n      return state.parseAsync(token.output, context).then(function (output) {\n        var stack = [{\n          type: Twig.expression.type.string,\n          value: output\n        }].concat(token.stack);\n        return Twig.expression.parseAsync.call(state, stack, context);\n      }).then(function (output) {\n        return {\n          chain: chain,\n          output: output\n        };\n      });\n    }\n  }, {\n    /**\n     * End apply logic tokens.\n     *\n     *  Format: {% endapply %}\n     */\n    type: Twig.logic.type.endapply,\n    regex: /^endapply$/,\n    next: [],\n    open: false\n  }, {\n    /**\n     * Set type logic tokens.\n     *\n     *  Format: {% do expression %}\n     */\n    type: Twig.logic.type[\"do\"],\n    regex: /^do\\s+([\\S\\s]+)$/,\n    next: [],\n    open: true,\n    compile: function compile(token) {\n      //\n      var expression = token.match[1]; // Compile the expression.\n\n      var expressionStack = Twig.expression.compile.call(this, {\n        type: Twig.expression.type.expression,\n        value: expression\n      }).stack;\n      token.expression = expressionStack;\n      delete token.match;\n      return token;\n    },\n    parse: function parse(token, context, continueChain) {\n      var state = this;\n      return Twig.expression.parseAsync.call(state, token.expression, context).then(function () {\n        return {\n          chain: continueChain,\n          context: context\n        };\n      });\n    }\n  }, {\n    /**\n     * Block logic tokens.\n     *\n     *  Format: {% block title %}\n     */\n    type: Twig.logic.type.block,\n    regex: /^block\\s+(\\w+)$/,\n    next: [Twig.logic.type.endblock],\n    open: true,\n    compile: function compile(token) {\n      token.blockName = token.match[1].trim();\n      delete token.match;\n      return token;\n    },\n    parse: function parse(token, context, chain) {\n      var state = this;\n      var promise = Twig.Promise.resolve();\n      state.template.blocks.defined[token.blockName] = new Twig.Block(state.template, token);\n\n      if (state.template.parentTemplate === null || state.template.parentTemplate instanceof Twig.Template) {\n        promise = state.getBlock(token.blockName).render(state, context);\n      }\n\n      return promise.then(function (output) {\n        return {\n          chain: chain,\n          output: output\n        };\n      });\n    }\n  }, {\n    /**\n     * Block shorthand logic tokens.\n     *\n     *  Format: {% block title expression %}\n     */\n    type: Twig.logic.type.shortblock,\n    regex: /^block\\s+(\\w+)\\s+(.+)$/,\n    next: [],\n    open: true,\n    compile: function compile(token) {\n      var template = this;\n      token.expression = token.match[2].trim();\n      token.output = Twig.expression.compile({\n        type: Twig.expression.type.expression,\n        value: token.expression\n      }).stack;\n      return Twig.logic.handler[Twig.logic.type.block].compile.apply(template, [token]);\n    },\n    parse: function parse() {\n      var state = this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return Twig.logic.handler[Twig.logic.type.block].parse.apply(state, args);\n    }\n  }, {\n    /**\n     * End block logic tokens.\n     *\n     *  Format: {% endblock %}\n     */\n    type: Twig.logic.type.endblock,\n    regex: /^endblock(?:\\s+(\\w+))?$/,\n    next: [],\n    open: false\n  }, {\n    /**\n     * Block logic tokens.\n     *\n     *  Format: {% extends \"template.twig\" %}\n     */\n    type: Twig.logic.type.extends_,\n    regex: /^extends\\s+(.+)$/,\n    next: [],\n    open: true,\n    compile: function compile(token) {\n      var expression = token.match[1].trim();\n      delete token.match;\n      token.stack = Twig.expression.compile.call(this, {\n        type: Twig.expression.type.expression,\n        value: expression\n      }).stack;\n      return token;\n    },\n    parse: function parse(token, context, chain) {\n      var state = this;\n      return Twig.expression.parseAsync.call(state, token.stack, context).then(function (fileName) {\n        state.template.parentTemplate = fileName;\n        return {\n          chain: chain,\n          output: ''\n        };\n      });\n    }\n  }, {\n    /**\n     * Block logic tokens.\n     *\n     *  Format: {% use \"template.twig\" %}\n     */\n    type: Twig.logic.type.use,\n    regex: /^use\\s+(.+)$/,\n    next: [],\n    open: true,\n    compile: function compile(token) {\n      var expression = token.match[1].trim();\n      delete token.match;\n      token.stack = Twig.expression.compile.call(this, {\n        type: Twig.expression.type.expression,\n        value: expression\n      }).stack;\n      return token;\n    },\n    parse: function parse(token, context, chain) {\n      var state = this;\n      return Twig.expression.parseAsync.call(state, token.stack, context).then(function (filePath) {\n        // Create a new state instead of using the current state\n        // any defined blocks will be created in isolation\n        var useTemplate = state.template.importFile(filePath);\n        var useState = new Twig.ParseState(useTemplate);\n        return useState.parseAsync(useTemplate.tokens).then(function () {\n          state.template.blocks.imported = _objectSpread({}, state.template.blocks.imported, {}, useState.getBlocks());\n        });\n      }).then(function () {\n        return {\n          chain: chain,\n          output: ''\n        };\n      });\n    }\n  }, {\n    /**\n     * Block logic tokens.\n     *\n     *  Format: {% includes \"template.twig\" [with {some: 'values'} only] %}\n     */\n    type: Twig.logic.type.include,\n    regex: /^include\\s+(.+?)(?:\\s|$)(ignore missing(?:\\s|$))?(?:with\\s+([\\S\\s]+?))?(?:\\s|$)(only)?$/,\n    next: [],\n    open: true,\n    compile: function compile(token) {\n      var match = token.match;\n      var expression = match[1].trim();\n      var ignoreMissing = match[2] !== undefined;\n      var withContext = match[3];\n      var only = match[4] !== undefined && match[4].length;\n      delete token.match;\n      token.only = only;\n      token.ignoreMissing = ignoreMissing;\n      token.stack = Twig.expression.compile.call(this, {\n        type: Twig.expression.type.expression,\n        value: expression\n      }).stack;\n\n      if (withContext !== undefined) {\n        token.withStack = Twig.expression.compile.call(this, {\n          type: Twig.expression.type.expression,\n          value: withContext.trim()\n        }).stack;\n      }\n\n      return token;\n    },\n    parse: function parse(token, context, chain) {\n      // Resolve filename\n      var innerContext = token.only ? {} : _objectSpread({}, context);\n      var ignoreMissing = token.ignoreMissing;\n      var state = this;\n      var promise = null;\n      var result = {\n        chain: chain,\n        output: ''\n      };\n\n      if (typeof token.withStack === 'undefined') {\n        promise = Twig.Promise.resolve();\n      } else {\n        promise = Twig.expression.parseAsync.call(state, token.withStack, context).then(function (withContext) {\n          innerContext = _objectSpread({}, innerContext, {}, withContext);\n        });\n      }\n\n      return promise.then(function () {\n        return Twig.expression.parseAsync.call(state, token.stack, context);\n      }).then(function (file) {\n        var files;\n\n        if (Array.isArray(file)) {\n          files = file;\n        } else {\n          files = [file];\n        }\n\n        var result = files.reduce(function (acc, file) {\n          if (acc.render === null) {\n            if (file instanceof Twig.Template) {\n              return {\n                render: file.renderAsync(innerContext, {\n                  isInclude: true\n                }),\n                lastError: null\n              };\n            }\n\n            try {\n              return {\n                render: state.template.importFile(file).renderAsync(innerContext, {\n                  isInclude: true\n                }),\n                lastError: null\n              };\n            } catch (error) {\n              return {\n                render: null,\n                lastError: error\n              };\n            }\n          }\n\n          return acc;\n        }, {\n          render: null,\n          lastError: null\n        });\n\n        if (result.render !== null) {\n          return result.render;\n        }\n\n        if (result.render === null && ignoreMissing) {\n          return '';\n        }\n\n        throw result.lastError;\n      }).then(function (output) {\n        if (output !== '') {\n          result.output = output;\n        }\n\n        return result;\n      });\n    }\n  }, {\n    type: Twig.logic.type.spaceless,\n    regex: /^spaceless$/,\n    next: [Twig.logic.type.endspaceless],\n    open: true,\n    // Parse the html and return it without any spaces between tags\n    parse: function parse(token, context, chain) {\n      var state = this; // Parse the output without any filter\n\n      return state.parseAsync(token.output, context).then(function (tokenOutput) {\n        var // A regular expression to find closing and opening tags with spaces between them\n        rBetweenTagSpaces = />\\s+</g; // Replace all space between closing and opening html tags\n\n        var output = tokenOutput.replace(rBetweenTagSpaces, '><').trim(); // Rewrap output as a Twig.Markup\n\n        output = new Twig.Markup(output);\n        return {\n          chain: chain,\n          output: output\n        };\n      });\n    }\n  }, // Add the {% endspaceless %} token\n  {\n    type: Twig.logic.type.endspaceless,\n    regex: /^endspaceless$/,\n    next: [],\n    open: false\n  }, {\n    /**\n     * Macro logic tokens.\n     *\n     * Format: {% macro input(name = default, value, type, size) %}\n     *\n     */\n    type: Twig.logic.type.macro,\n    regex: /^macro\\s+(\\w+)\\s*\\(\\s*((?:\\w+(?:\\s*=\\s*([\\s\\S]+))?(?:,\\s*)?)*)\\s*\\)$/,\n    next: [Twig.logic.type.endmacro],\n    open: true,\n    compile: function compile(token) {\n      var macroName = token.match[1];\n      var rawParameters = token.match[2].split(/\\s*,\\s*/);\n      var parameters = rawParameters.map(function (rawParameter) {\n        return rawParameter.split(/\\s*=\\s*/)[0];\n      });\n      var parametersCount = parameters.length; // Duplicate check\n\n      if (parametersCount > 1) {\n        var uniq = {};\n\n        for (var i = 0; i < parametersCount; i++) {\n          var parameter = parameters[i];\n\n          if (uniq[parameter]) {\n            throw new Twig.Error('Duplicate arguments for parameter: ' + parameter);\n          } else {\n            uniq[parameter] = 1;\n          }\n        }\n      }\n\n      token.macroName = macroName;\n      token.parameters = parameters;\n      token.defaults = rawParameters.reduce(function (defaults, rawParameter) {\n        var pair = rawParameter.split(/\\s*=\\s*/);\n        var key = pair[0];\n        var expression = pair[1];\n\n        if (expression) {\n          defaults[key] = Twig.expression.compile.call(this, {\n            type: Twig.expression.type.expression,\n            value: expression\n          }).stack;\n        } else {\n          defaults[key] = undefined;\n        }\n\n        return defaults;\n      }, {});\n      delete token.match;\n      return token;\n    },\n    parse: function parse(token, context, chain) {\n      var state = this;\n\n      state.macros[token.macroName] = function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        // Pass global context and other macros\n        var macroContext = {\n          _self: state.macros\n        }; // Save arguments\n\n        return Twig.async.forEach(token.parameters, function (prop, i) {\n          // Add parameters from context to macroContext\n          if (typeof args[i] !== 'undefined') {\n            macroContext[prop] = args[i];\n            return true;\n          }\n\n          if (typeof token.defaults[prop] !== 'undefined') {\n            return Twig.expression.parseAsync.call(this, token.defaults[prop], context).then(function (value) {\n              macroContext[prop] = value;\n              return Twig.Promise.resolve();\n            });\n          }\n\n          macroContext[prop] = undefined;\n          return true;\n        }).then(function () {\n          // Render\n          return state.parseAsync(token.output, macroContext);\n        });\n      };\n\n      return {\n        chain: chain,\n        output: ''\n      };\n    }\n  }, {\n    /**\n     * End macro logic tokens.\n     *\n     * Format: {% endmacro %}\n     */\n    type: Twig.logic.type.endmacro,\n    regex: /^endmacro$/,\n    next: [],\n    open: false\n  }, {\n    /*\n    * Import logic tokens.\n    *\n    * Format: {% import \"template.twig\" as form %}\n    */\n    type: Twig.logic.type.import_,\n    regex: /^import\\s+(.+)\\s+as\\s+(\\w+)$/,\n    next: [],\n    open: true,\n    compile: function compile(token) {\n      var expression = token.match[1].trim();\n      var contextName = token.match[2].trim();\n      delete token.match;\n      token.expression = expression;\n      token.contextName = contextName;\n      token.stack = Twig.expression.compile.call(this, {\n        type: Twig.expression.type.expression,\n        value: expression\n      }).stack;\n      return token;\n    },\n    parse: function parse(token, context, chain) {\n      var state = this;\n      var output = {\n        chain: chain,\n        output: ''\n      };\n\n      if (token.expression === '_self') {\n        context[token.contextName] = state.macros;\n        return output;\n      }\n\n      return Twig.expression.parseAsync.call(state, token.stack, context).then(function (filePath) {\n        return state.template.importFile(filePath || token.expression);\n      }).then(function (importTemplate) {\n        var importState = new Twig.ParseState(importTemplate);\n        return importState.parseAsync(importTemplate.tokens).then(function () {\n          context[token.contextName] = importState.macros;\n          return output;\n        });\n      });\n    }\n  }, {\n    /*\n    * From logic tokens.\n    *\n    * Format: {% from \"template.twig\" import func as form %}\n    */\n    type: Twig.logic.type.from,\n    regex: /^from\\s+(.+)\\s+import\\s+([a-zA-Z0-9_, ]+)$/,\n    next: [],\n    open: true,\n    compile: function compile(token) {\n      var expression = token.match[1].trim();\n      var macroExpressions = token.match[2].trim().split(/\\s*,\\s*/);\n      var macroNames = {};\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = macroExpressions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var res = _step.value;\n          // Match function as variable\n          var macroMatch = res.match(/^(\\w+)\\s+as\\s+(\\w+)$/);\n\n          if (macroMatch) {\n            macroNames[macroMatch[1].trim()] = macroMatch[2].trim();\n          } else if (res.match(/^(\\w+)$/)) {\n            macroNames[res] = res;\n          } else {// ignore import\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      delete token.match;\n      token.expression = expression;\n      token.macroNames = macroNames;\n      token.stack = Twig.expression.compile.call(this, {\n        type: Twig.expression.type.expression,\n        value: expression\n      }).stack;\n      return token;\n    },\n    parse: function parse(token, context, chain) {\n      var state = this;\n      var promise;\n\n      if (token.expression === '_self') {\n        promise = Twig.Promise.resolve(state.macros);\n      } else {\n        promise = Twig.expression.parseAsync.call(state, token.stack, context).then(function (filePath) {\n          return state.template.importFile(filePath || token.expression);\n        }).then(function (importTemplate) {\n          var importState = new Twig.ParseState(importTemplate);\n          return importState.parseAsync(importTemplate.tokens).then(function () {\n            return importState.macros;\n          });\n        });\n      }\n\n      return promise.then(function (macros) {\n        for (var macroName in token.macroNames) {\n          if (macros[macroName] !== undefined) {\n            context[token.macroNames[macroName]] = macros[macroName];\n          }\n        }\n\n        return {\n          chain: chain,\n          output: ''\n        };\n      });\n    }\n  }, {\n    /**\n     * The embed tag combines the behaviour of include and extends.\n     * It allows you to include another template's contents, just like include does.\n     *\n     *  Format: {% embed \"template.twig\" [with {some: 'values'} only] %}\n     */\n    type: Twig.logic.type.embed,\n    regex: /^embed\\s+(.+?)(?:\\s+(ignore missing))?(?:\\s+with\\s+([\\S\\s]+?))?(?:\\s+(only))?$/,\n    next: [Twig.logic.type.endembed],\n    open: true,\n    compile: function compile(token) {\n      var match = token.match;\n      var expression = match[1].trim();\n      var ignoreMissing = match[2] !== undefined;\n      var withContext = match[3];\n      var only = match[4] !== undefined && match[4].length;\n      delete token.match;\n      token.only = only;\n      token.ignoreMissing = ignoreMissing;\n      token.stack = Twig.expression.compile.call(this, {\n        type: Twig.expression.type.expression,\n        value: expression\n      }).stack;\n\n      if (withContext !== undefined) {\n        token.withStack = Twig.expression.compile.call(this, {\n          type: Twig.expression.type.expression,\n          value: withContext.trim()\n        }).stack;\n      }\n\n      return token;\n    },\n    parse: function parse(token, context, chain) {\n      var embedContext = {};\n      var promise = Twig.Promise.resolve();\n      var state = this;\n\n      if (!token.only) {\n        embedContext = _objectSpread({}, context);\n      }\n\n      if (token.withStack !== undefined) {\n        promise = Twig.expression.parseAsync.call(state, token.withStack, context).then(function (withContext) {\n          embedContext = _objectSpread({}, embedContext, {}, withContext);\n        });\n      }\n\n      return promise.then(function () {\n        return Twig.expression.parseAsync.call(state, token.stack, embedContext);\n      }).then(function (fileName) {\n        var embedOverrideTemplate = new Twig.Template({\n          data: token.output,\n          id: state.template.id,\n          base: state.template.base,\n          path: state.template.path,\n          url: state.template.url,\n          name: state.template.name,\n          method: state.template.method,\n          options: state.template.options\n        });\n\n        try {\n          embedOverrideTemplate.importFile(fileName);\n        } catch (error) {\n          if (token.ignoreMissing) {\n            return '';\n          } // Errors preserve references to variables in scope,\n          // this removes `this` from the scope.\n\n\n          state = null;\n          throw error;\n        }\n\n        embedOverrideTemplate.parentTemplate = fileName;\n        return embedOverrideTemplate.renderAsync(embedContext, {\n          isInclude: true\n        });\n      }).then(function (output) {\n        return {\n          chain: chain,\n          output: output\n        };\n      });\n    }\n  },\n  /* Add the {% endembed %} token\n   *\n   */\n  {\n    type: Twig.logic.type.endembed,\n    regex: /^endembed$/,\n    next: [],\n    open: false\n  }, {\n    /**\n     * Block logic tokens.\n     *\n     *  Format: {% with {some: 'values'} [only] %}\n     */\n    type: Twig.logic.type[\"with\"],\n    regex: /^(?:with\\s+([\\S\\s]+?))(?:\\s|$)(only)?$/,\n    next: [Twig.logic.type.endwith],\n    open: true,\n    compile: function compile(token) {\n      var match = token.match;\n      var withContext = match[1];\n      var only = match[2] !== undefined && match[2].length;\n      delete token.match;\n      token.only = only;\n\n      if (withContext !== undefined) {\n        token.withStack = Twig.expression.compile.call(this, {\n          type: Twig.expression.type.expression,\n          value: withContext.trim()\n        }).stack;\n      }\n\n      return token;\n    },\n    parse: function parse(token, context, chain) {\n      // Resolve filename\n      var innerContext = {};\n      var i;\n      var state = this;\n      var promise = Twig.Promise.resolve();\n\n      if (!token.only) {\n        innerContext = _objectSpread({}, context);\n      }\n\n      if (token.withStack !== undefined) {\n        promise = Twig.expression.parseAsync.call(state, token.withStack, context).then(function (withContext) {\n          for (i in withContext) {\n            if (Object.hasOwnProperty.call(withContext, i)) {\n              innerContext[i] = withContext[i];\n            }\n          }\n        });\n      }\n\n      return promise.then(function () {\n        return state.parseAsync(token.output, innerContext);\n      }).then(function (output) {\n        return {\n          chain: chain,\n          output: output\n        };\n      });\n    }\n  }, {\n    type: Twig.logic.type.endwith,\n    regex: /^endwith$/,\n    next: [],\n    open: false\n  }, {\n    /**\n     * Deprecated type logic tokens.\n     *\n     *  Format: {% deprecated 'Description' %}\n     */\n    type: Twig.logic.type.deprecated,\n    regex: /^deprecated\\s+(.+)$/,\n    next: [],\n    open: true,\n    compile: function compile(token) {\n      console.warn('Deprecation notice: ' + token.match[1]);\n      return token;\n    },\n    parse: function parse() {\n      return {};\n    }\n  }];\n  /**\n   * Registry for logic handlers.\n   */\n\n  Twig.logic.handler = {};\n  /**\n   * Define a new token type, available at Twig.logic.type.{type}\n   */\n\n  Twig.logic.extendType = function (type, value) {\n    value = value || 'Twig.logic.type' + type;\n    Twig.logic.type[type] = value;\n  };\n  /**\n   * Extend the logic parsing functionality with a new token definition.\n   *\n   * // Define a new tag\n   * Twig.logic.extend({\n   *     type: Twig.logic.type.{type},\n   *     // The pattern to match for this token\n   *     regex: ...,\n   *     // What token types can follow this token, leave blank if any.\n   *     next: [ ... ]\n   *     // Create and return compiled version of the token\n   *     compile: function(token) { ... }\n   *     // Parse the compiled token with the context provided by the render call\n   *     //   and whether this token chain is complete.\n   *     parse: function(token, context, chain) { ... }\n   * });\n   *\n   * @param {Object} definition The new logic expression.\n   */\n\n\n  Twig.logic.extend = function (definition) {\n    if (definition.type) {\n      Twig.logic.extendType(definition.type);\n    } else {\n      throw new Twig.Error('Unable to extend logic definition. No type provided for ' + definition);\n    }\n\n    Twig.logic.handler[definition.type] = definition;\n  }; // Extend with built-in expressions\n\n\n  while (Twig.logic.definitions.length > 0) {\n    Twig.logic.extend(Twig.logic.definitions.shift());\n  }\n  /**\n   * Compile a logic token into an object ready for parsing.\n   *\n   * @param {Object} rawToken An uncompiled logic token.\n   *\n   * @return {Object} A compiled logic token, ready for parsing.\n   */\n\n\n  Twig.logic.compile = function (rawToken) {\n    var expression = rawToken.value.trim();\n    var token = Twig.logic.tokenize.call(this, expression);\n    var tokenTemplate = Twig.logic.handler[token.type]; // Check if the token needs compiling\n\n    if (tokenTemplate.compile) {\n      token = tokenTemplate.compile.call(this, token);\n      Twig.log.trace('Twig.logic.compile: ', 'Compiled logic token to ', token);\n    }\n\n    return token;\n  };\n  /**\n   * Tokenize logic expressions. This function matches token expressions against regular\n   * expressions provided in token definitions provided with Twig.logic.extend.\n   *\n   * @param {string} expression the logic token expression to tokenize\n   *                (i.e. what's between {% and %})\n   *\n   * @return {Object} The matched token with type set to the token type and match to the regex match.\n   */\n\n\n  Twig.logic.tokenize = function (expression) {\n    var tokenTemplateType = null;\n    var tokenType = null;\n    var tokenRegex = null;\n    var regexArray = null;\n    var regexLen = null;\n    var regexI = null;\n    var match = null; // Ignore whitespace around expressions.\n\n    expression = expression.trim();\n\n    for (tokenTemplateType in Twig.logic.handler) {\n      if (Object.hasOwnProperty.call(Twig.logic.handler, tokenTemplateType)) {\n        // Get the type and regex for this template type\n        tokenType = Twig.logic.handler[tokenTemplateType].type;\n        tokenRegex = Twig.logic.handler[tokenTemplateType].regex; // Handle multiple regular expressions per type.\n\n        regexArray = tokenRegex;\n\n        if (!Array.isArray(tokenRegex)) {\n          regexArray = [tokenRegex];\n        }\n\n        regexLen = regexArray.length; // Check regular expressions in the order they were specified in the definition.\n\n        for (regexI = 0; regexI < regexLen; regexI++) {\n          match = regexArray[regexI].exec(expression);\n\n          if (match !== null) {\n            Twig.log.trace('Twig.logic.tokenize: ', 'Matched a ', tokenType, ' regular expression of ', match);\n            return {\n              type: tokenType,\n              match: match\n            };\n          }\n        }\n      }\n    } // No regex matches\n\n\n    throw new Twig.Error('Unable to parse \\'' + expression.trim() + '\\'');\n  };\n  /**\n   * Parse a logic token within a given context.\n   *\n   * What are logic chains?\n   *      Logic chains represent a series of tokens that are connected,\n   *          for example:\n   *          {% if ... %} {% else %} {% endif %}\n   *\n   *      The chain parameter is used to signify if a chain is open of closed.\n   *      open:\n   *          More tokens in this chain should be parsed.\n   *      closed:\n   *          This token chain has completed parsing and any additional\n   *          tokens (else, elseif, etc...) should be ignored.\n   *\n   * @param {Object} token The compiled token.\n   * @param {Object} context The render context.\n   * @param {boolean} chain Is this an open logic chain. If false, that means a\n   *                        chain is closed and no further cases should be parsed.\n   */\n\n\n  Twig.logic.parse = function (token, context, chain, allowAsync) {\n    return Twig.async.potentiallyAsync(this, allowAsync, function () {\n      Twig.log.debug('Twig.logic.parse: ', 'Parsing logic token ', token);\n      var tokenTemplate = Twig.logic.handler[token.type];\n      var result;\n      var state = this;\n\n      if (!tokenTemplate.parse) {\n        return '';\n      }\n\n      state.nestingStack.unshift(token);\n      result = tokenTemplate.parse.call(state, token, context || {}, chain);\n\n      if (Twig.isPromise(result)) {\n        result = result.then(function (result) {\n          state.nestingStack.shift();\n          return result;\n        });\n      } else {\n        state.nestingStack.shift();\n      }\n\n      return result;\n    });\n  };\n\n  return Twig;\n};\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = function (Twig) {\n  'use strict';\n\n  Twig.Templates.registerParser('source', function (params) {\n    return params.data || '';\n  });\n};\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = function (Twig) {\n  'use strict';\n\n  Twig.Templates.registerParser('twig', function (params) {\n    return new Twig.Template(params);\n  });\n};\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __webpack_require__(0);\n\nvar _typeof2 = _interopRequireDefault(__webpack_require__(1));\n\n// ## twig.path.js\n//\n// This file handles path parsing\nmodule.exports = function (Twig) {\n  'use strict';\n  /**\n   * Namespace for path handling.\n   */\n\n  Twig.path = {};\n  /**\n   * Generate the canonical version of a url based on the given base path and file path and in\n   * the previously registered namespaces.\n   *\n   * @param  {string} template The Twig Template\n   * @param  {string} _file    The file path, may be relative and may contain namespaces.\n   *\n   * @return {string}          The canonical version of the path\n   */\n\n  Twig.path.parsePath = function (template, _file) {\n    var k = null;\n    var namespaces = template.options.namespaces;\n    var file = _file || '';\n    var hasNamespaces = namespaces && (0, _typeof2[\"default\"])(namespaces) === 'object';\n\n    if (hasNamespaces) {\n      for (k in namespaces) {\n        if (!file.includes(k)) {\n          continue;\n        } // Check if keyed namespace exists at path's start\n\n\n        var colon = new RegExp('^' + k + '::');\n        var atSign = new RegExp('^@' + k + '/'); // Add slash to the end of path\n\n        var namespacePath = namespaces[k].replace(/([^/])$/, '$1/');\n\n        if (colon.test(file)) {\n          file = file.replace(colon, namespacePath);\n          return file;\n        }\n\n        if (atSign.test(file)) {\n          file = file.replace(atSign, namespacePath);\n          return file;\n        }\n      }\n    }\n\n    return Twig.path.relativePath(template, file);\n  };\n  /**\n   * Generate the relative canonical version of a url based on the given base path and file path.\n   *\n   * @param {Twig.Template} template The Twig.Template.\n   * @param {string} _file The file path, relative to the base path.\n   *\n   * @return {string} The canonical version of the path.\n   */\n\n\n  Twig.path.relativePath = function (template, _file) {\n    var base;\n    var basePath;\n    var sepChr = '/';\n    var newPath = [];\n    var file = _file || '';\n    var val;\n\n    if (template.url) {\n      if (typeof template.base === 'undefined') {\n        base = template.url;\n      } else {\n        // Add slash to the end of path\n        base = template.base.replace(/([^/])$/, '$1/');\n      }\n    } else if (template.path) {\n      // Get the system-specific path separator\n      var path = __webpack_require__(4);\n\n      var sep = path.sep || sepChr;\n      var relative = new RegExp('^\\\\.{1,2}' + sep.replace('\\\\', '\\\\\\\\'));\n      file = file.replace(/\\//g, sep);\n\n      if (template.base !== undefined && file.match(relative) === null) {\n        file = file.replace(template.base, '');\n        base = template.base + sep;\n      } else {\n        base = path.normalize(template.path);\n      }\n\n      base = base.replace(sep + sep, sep);\n      sepChr = sep;\n    } else if ((template.name || template.id) && template.method && template.method !== 'fs' && template.method !== 'ajax') {\n      // Custom registered loader\n      base = template.base || template.name || template.id;\n    } else {\n      throw new Twig.Error('Cannot extend an inline template.');\n    }\n\n    basePath = base.split(sepChr); // Remove file from url\n\n    basePath.pop();\n    basePath = basePath.concat(file.split(sepChr));\n\n    while (basePath.length > 0) {\n      val = basePath.shift();\n\n      if (val === '.') {// Ignore\n      } else if (val === '..' && newPath.length > 0 && newPath[newPath.length - 1] !== '..') {\n        newPath.pop();\n      } else {\n        newPath.push(val);\n      }\n    }\n\n    return newPath.join(sepChr);\n  };\n\n  return Twig;\n};\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// ## twig.tests.js\n//\n// This file handles expression tests. (is empty, is not defined, etc...)\nmodule.exports = function (Twig) {\n  'use strict';\n\n  Twig.tests = {\n    empty: function empty(value) {\n      if (value === null || value === undefined) {\n        return true;\n      } // Handler numbers\n\n\n      if (typeof value === 'number') {\n        return false;\n      } // Numbers are never \"empty\"\n      // Handle strings and arrays\n\n\n      if (value.length > 0) {\n        return false;\n      } // Handle objects\n\n\n      for (var key in value) {\n        if (Object.hasOwnProperty.call(value, key)) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    odd: function odd(value) {\n      return value % 2 === 1;\n    },\n    even: function even(value) {\n      return value % 2 === 0;\n    },\n    divisibleby: function divisibleby(value, params) {\n      return value % params[0] === 0;\n    },\n    defined: function defined(value) {\n      return value !== undefined;\n    },\n    none: function none(value) {\n      return value === null;\n    },\n    \"null\": function _null(value) {\n      return this.none(value); // Alias of none\n    },\n    'same as': function sameAs(value, params) {\n      return value === params[0];\n    },\n    sameas: function sameas(value, params) {\n      console.warn('`sameas` is deprecated use `same as`');\n      return Twig.tests['same as'](value, params);\n    },\n    iterable: function iterable(value) {\n      return value && (Twig.lib.is('Array', value) || Twig.lib.is('Object', value));\n    }\n    /*\n    Constant ?\n     */\n\n  };\n\n  Twig.test = function (test, value, params) {\n    if (!Twig.tests[test]) {\n      throw Twig.Error('Test ' + test + ' is not defined.');\n    }\n\n    return Twig.tests[test](value, params);\n  };\n\n  Twig.test.extend = function (test, definition) {\n    Twig.tests[test] = definition;\n  };\n\n  return Twig;\n};\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// ## twig.async.js\n//\n// This file handles asynchronous tasks within twig.\nmodule.exports = function (Twig) {\n  'use strict';\n\n  var STATE_UNKNOWN = 0;\n  var STATE_RESOLVED = 1;\n  var STATE_REJECTED = 2;\n\n  Twig.ParseState.prototype.parseAsync = function (tokens, context) {\n    return this.parse(tokens, context, true);\n  };\n\n  Twig.expression.parseAsync = function (tokens, context, tokensAreParameters) {\n    var state = this;\n    return Twig.expression.parse.call(state, tokens, context, tokensAreParameters, true);\n  };\n\n  Twig.logic.parseAsync = function (token, context, chain) {\n    var state = this;\n    return Twig.logic.parse.call(state, token, context, chain, true);\n  };\n\n  Twig.Template.prototype.renderAsync = function (context, params) {\n    return this.render(context, params, true);\n  };\n\n  Twig.async = {};\n  /**\n   * Checks for `thenable` objects\n   */\n\n  Twig.isPromise = function (obj) {\n    return obj && obj.then && typeof obj.then === 'function';\n  };\n  /**\n   * Handling of code paths that might either return a promise\n   * or a value depending on whether async code is used.\n   *\n   * @see https://github.com/twigjs/twig.js/blob/master/ASYNC.md#detecting-asynchronous-behaviour\n   */\n\n\n  function potentiallyAsyncSlow(that, allowAsync, action) {\n    var result = action.call(that);\n    var err = null;\n    var isAsync = true;\n\n    if (!Twig.isPromise(result)) {\n      return result;\n    }\n\n    result.then(function (res) {\n      result = res;\n      isAsync = false;\n    })[\"catch\"](function (error) {\n      err = error;\n    });\n\n    if (err !== null) {\n      throw err;\n    }\n\n    if (isAsync) {\n      throw new Twig.Error('You are using Twig.js in sync mode in combination with async extensions.');\n    }\n\n    return result;\n  }\n\n  Twig.async.potentiallyAsync = function (that, allowAsync, action) {\n    if (allowAsync) {\n      return Twig.Promise.resolve(action.call(that));\n    }\n\n    return potentiallyAsyncSlow(that, allowAsync, action);\n  };\n\n  function run(fn, resolve, reject) {\n    try {\n      fn(resolve, reject);\n    } catch (error) {\n      reject(error);\n    }\n  }\n\n  function pending(handlers, onResolved, onRejected) {\n    var h = [onResolved, onRejected, -2]; // The promise has yet to be rejected or resolved.\n\n    if (!handlers) {\n      handlers = h;\n    } else if (handlers[2] === -2) {\n      // Only allocate an array when there are multiple handlers\n      handlers = [handlers, h];\n    } else {\n      handlers.push(h);\n    }\n\n    return handlers;\n  }\n  /**\n   * Really small thenable to represent promises that resolve immediately.\n   *\n   */\n\n\n  Twig.Thenable = function (then, value, state) {\n    this.then = then;\n    this._value = state ? value : null;\n    this._state = state || STATE_UNKNOWN;\n  };\n\n  Twig.Thenable.prototype[\"catch\"] = function (onRejected) {\n    // THe promise will not throw, it has already resolved.\n    if (this._state === STATE_RESOLVED) {\n      return this;\n    }\n\n    return this.then(null, onRejected);\n  };\n  /**\n   * The `then` method attached to a Thenable when it has resolved.\n   *\n   */\n\n\n  Twig.Thenable.resolvedThen = function (onResolved) {\n    try {\n      return Twig.Promise.resolve(onResolved(this._value));\n    } catch (error) {\n      return Twig.Promise.reject(error);\n    }\n  };\n  /**\n   * The `then` method attached to a Thenable when it has rejected.\n   *\n   */\n\n\n  Twig.Thenable.rejectedThen = function (onResolved, onRejected) {\n    // Shortcut for rejected twig promises\n    if (!onRejected || typeof onRejected !== 'function') {\n      return this;\n    }\n\n    var value = this._value;\n    var result;\n\n    try {\n      result = onRejected(value);\n    } catch (error) {\n      result = Twig.Promise.reject(error);\n    }\n\n    return Twig.Promise.resolve(result);\n  };\n  /**\n   * An alternate implementation of a Promise that does not fully follow\n   * the spec, but instead works fully synchronous while still being\n   * thenable.\n   *\n   * These promises can be mixed with regular promises at which point\n   * the synchronous behaviour is lost.\n   */\n\n\n  Twig.Promise = function (executor) {\n    var state = STATE_UNKNOWN;\n    var value = null;\n\n    var changeState = function changeState(nextState, nextValue) {\n      state = nextState;\n      value = nextValue;\n    };\n\n    function onReady(v) {\n      changeState(STATE_RESOLVED, v);\n    }\n\n    function onReject(e) {\n      changeState(STATE_REJECTED, e);\n    }\n\n    run(executor, onReady, onReject); // If the promise settles right after running the executor we can\n    // return a Promise with it's state already set.\n    //\n    // Twig.Promise.resolve and Twig.Promise.reject both use the more\n    // efficient `Twig.Thenable` for this purpose.\n\n    if (state === STATE_RESOLVED) {\n      return Twig.Promise.resolve(value);\n    }\n\n    if (state === STATE_REJECTED) {\n      return Twig.Promise.reject(value);\n    } // If we managed to get here our promise is going to resolve asynchronous.\n\n\n    changeState = new Twig.FullPromise();\n    return changeState.promise;\n  };\n  /**\n   * Promise implementation that can handle being resolved at any later time.\n   *\n   */\n\n\n  Twig.FullPromise = function () {\n    var handlers = null; // The state has been changed to either resolve, or reject\n    // which means we should call the handler.\n\n    function resolved(onResolved) {\n      onResolved(p._value);\n    }\n\n    function rejected(onResolved, onRejected) {\n      onRejected(p._value);\n    }\n\n    var append = function append(onResolved, onRejected) {\n      handlers = pending(handlers, onResolved, onRejected);\n    };\n\n    function changeState(newState, v) {\n      if (p._state) {\n        return;\n      }\n\n      p._value = v;\n      p._state = newState;\n      append = newState === STATE_RESOLVED ? resolved : rejected;\n\n      if (!handlers) {\n        return;\n      }\n\n      if (handlers[2] === -2) {\n        append(handlers[0], handlers[1]);\n        handlers = null;\n        return;\n      }\n\n      handlers.forEach(function (h) {\n        append(h[0], h[1]);\n      });\n      handlers = null;\n    }\n\n    var p = new Twig.Thenable(function (onResolved, onRejected) {\n      var hasResolved = typeof onResolved === 'function'; // Shortcut for resolved twig promises\n\n      if (p._state === STATE_RESOLVED && !hasResolved) {\n        return Twig.Promise.resolve(p._value);\n      }\n\n      if (p._state === STATE_RESOLVED) {\n        try {\n          return Twig.Promise.resolve(onResolved(p._value));\n        } catch (error) {\n          return Twig.Promise.reject(error);\n        }\n      }\n\n      var hasRejected = typeof onRejected === 'function';\n      return new Twig.Promise(function (resolve, reject) {\n        append(hasResolved ? function (result) {\n          try {\n            resolve(onResolved(result));\n          } catch (error) {\n            reject(error);\n          }\n        } : resolve, hasRejected ? function (err) {\n          try {\n            resolve(onRejected(err));\n          } catch (error) {\n            reject(error);\n          }\n        } : reject);\n      });\n    });\n    changeState.promise = p;\n    return changeState;\n  };\n\n  Twig.Promise.defaultResolved = new Twig.Thenable(Twig.Thenable.resolvedThen, undefined, STATE_RESOLVED);\n  Twig.Promise.emptyStringResolved = new Twig.Thenable(Twig.Thenable.resolvedThen, '', STATE_RESOLVED);\n\n  Twig.Promise.resolve = function (value) {\n    if (arguments.length === 0 || typeof value === 'undefined') {\n      return Twig.Promise.defaultResolved;\n    }\n\n    if (Twig.isPromise(value)) {\n      return value;\n    } // Twig often resolves with an empty string, we optimize for this\n    // scenario by returning a fixed promise. This reduces the load on\n    // garbage collection.\n\n\n    if (value === '') {\n      return Twig.Promise.emptyStringResolved;\n    }\n\n    return new Twig.Thenable(Twig.Thenable.resolvedThen, value, STATE_RESOLVED);\n  };\n\n  Twig.Promise.reject = function (e) {\n    // `e` should never be a promise.\n    return new Twig.Thenable(Twig.Thenable.rejectedThen, e, STATE_REJECTED);\n  };\n\n  Twig.Promise.all = function (promises) {\n    var results = new Array(promises.length);\n    return Twig.async.forEach(promises, function (p, index) {\n      if (!Twig.isPromise(p)) {\n        results[index] = p;\n        return;\n      }\n\n      if (p._state === STATE_RESOLVED) {\n        results[index] = p._value;\n        return;\n      }\n\n      return p.then(function (v) {\n        results[index] = v;\n      });\n    }).then(function () {\n      return results;\n    });\n  };\n  /**\n  * Go over each item in a fashion compatible with Twig.forEach,\n  * allow the function to return a promise or call the third argument\n  * to signal it is finished.\n  *\n  * Each item in the array will be called sequentially.\n  */\n\n\n  Twig.async.forEach = function (arr, callback) {\n    var len = arr ? arr.length : 0;\n    var index = 0;\n\n    function next() {\n      var resp = null;\n\n      do {\n        if (index === len) {\n          return Twig.Promise.resolve();\n        }\n\n        resp = callback(arr[index], index);\n        index++; // While the result of the callback is not a promise or it is\n        // a promise that has settled we can use a regular loop which\n        // is much faster.\n      } while (!resp || !Twig.isPromise(resp) || resp._state === STATE_RESOLVED);\n\n      return resp.then(next);\n    }\n\n    return next();\n  };\n\n  return Twig;\n};\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// ## twig.exports.js\n//\n// This file provides extension points and other hooks into the twig functionality.\nmodule.exports = function (Twig) {\n  'use strict';\n\n  Twig.exports = {\n    VERSION: Twig.VERSION\n  };\n  /**\n   * Create and compile a twig.js template.\n   *\n   * @param {Object} param Paramteres for creating a Twig template.\n   *\n   * @return {Twig.Template} A Twig template ready for rendering.\n   */\n\n  Twig.exports.twig = function (params) {\n    'use strict';\n\n    var id = params.id;\n    var options = {\n      strictVariables: params.strict_variables || false,\n      // TODO: turn autoscape on in the next major version\n      autoescape: params.autoescape !== null && params.autoescape || false,\n      allowInlineIncludes: params.allowInlineIncludes || false,\n      rethrow: params.rethrow || false,\n      namespaces: params.namespaces\n    };\n\n    if (Twig.cache && id) {\n      Twig.validateId(id);\n    }\n\n    if (params.debug !== undefined) {\n      Twig.debug = params.debug;\n    }\n\n    if (params.trace !== undefined) {\n      Twig.trace = params.trace;\n    }\n\n    if (params.data !== undefined) {\n      return Twig.Templates.parsers.twig({\n        data: params.data,\n        path: Object.hasOwnProperty.call(params, 'path') ? params.path : undefined,\n        module: params.module,\n        id: id,\n        options: options\n      });\n    }\n\n    if (params.ref !== undefined) {\n      if (params.id !== undefined) {\n        throw new Twig.Error('Both ref and id cannot be set on a twig.js template.');\n      }\n\n      return Twig.Templates.load(params.ref);\n    }\n\n    if (params.method !== undefined) {\n      if (!Twig.Templates.isRegisteredLoader(params.method)) {\n        throw new Twig.Error('Loader for \"' + params.method + '\" is not defined.');\n      }\n\n      return Twig.Templates.loadRemote(params.name || params.href || params.path || id || undefined, {\n        id: id,\n        method: params.method,\n        parser: params.parser || 'twig',\n        base: params.base,\n        module: params.module,\n        precompiled: params.precompiled,\n        async: params.async,\n        options: options\n      }, params.load, params.error);\n    }\n\n    if (params.href !== undefined) {\n      return Twig.Templates.loadRemote(params.href, {\n        id: id,\n        method: 'ajax',\n        parser: params.parser || 'twig',\n        base: params.base,\n        module: params.module,\n        precompiled: params.precompiled,\n        async: params.async,\n        options: options\n      }, params.load, params.error);\n    }\n\n    if (params.path !== undefined) {\n      return Twig.Templates.loadRemote(params.path, {\n        id: id,\n        method: 'fs',\n        parser: params.parser || 'twig',\n        base: params.base,\n        module: params.module,\n        precompiled: params.precompiled,\n        async: params.async,\n        options: options\n      }, params.load, params.error);\n    }\n  }; // Extend Twig with a new filter.\n\n\n  Twig.exports.extendFilter = function (filter, definition) {\n    Twig.filter.extend(filter, definition);\n  }; // Extend Twig with a new function.\n\n\n  Twig.exports.extendFunction = function (fn, definition) {\n    Twig._function.extend(fn, definition);\n  }; // Extend Twig with a new test.\n\n\n  Twig.exports.extendTest = function (test, definition) {\n    Twig.test.extend(test, definition);\n  }; // Extend Twig with a new definition.\n\n\n  Twig.exports.extendTag = function (definition) {\n    Twig.logic.extend(definition);\n  }; // Provide an environment for extending Twig core.\n  // Calls fn with the internal Twig object.\n\n\n  Twig.exports.extend = function (fn) {\n    fn(Twig);\n  };\n  /**\n   * Provide an extension for use with express 2.\n   *\n   * @param {string} markup The template markup.\n   * @param {array} options The express options.\n   *\n   * @return {string} The rendered template.\n   */\n\n\n  Twig.exports.compile = function (markup, options) {\n    var id = options.filename;\n    var path = options.filename; // Try to load the template from the cache\n\n    var template = new Twig.Template({\n      data: markup,\n      path: path,\n      id: id,\n      options: options.settings['twig options']\n    }); // Twig.Templates.load(id) ||\n\n    return function (context) {\n      return template.render(context);\n    };\n  };\n  /**\n   * Provide an extension for use with express 3.\n   *\n   * @param {string} path The location of the template file on disk.\n   * @param {Object|Function} The options or callback.\n   * @param {Function} fn callback.\n   *\n   * @throws Twig.Error\n   */\n\n\n  Twig.exports.renderFile = function (path, options, fn) {\n    // Handle callback in options\n    if (typeof options === 'function') {\n      fn = options;\n      options = {};\n    }\n\n    options = options || {};\n    var settings = options.settings || {}; // Mixin any options provided to the express app.\n\n    var viewOptions = settings['twig options'];\n    var params = {\n      path: path,\n      base: settings.views,\n      load: function load(template) {\n        // Render and return template as a simple string, see https://github.com/twigjs/twig.js/pull/348 for more information\n        if (!viewOptions || !viewOptions.allowAsync) {\n          fn(null, String(template.render(options)));\n          return;\n        }\n\n        template.renderAsync(options).then(function (out) {\n          return fn(null, out);\n        }, fn);\n      },\n      error: function error(err) {\n        fn(err);\n      }\n    };\n\n    if (viewOptions) {\n      for (var option in viewOptions) {\n        if (Object.hasOwnProperty.call(viewOptions, option)) {\n          params[option] = viewOptions[option];\n        }\n      }\n    }\n\n    Twig.exports.twig(params);\n  }; // Express 3 handler\n\n\n  Twig.exports.__express = Twig.exports.renderFile;\n  /**\n   * Shoud Twig.js cache templates.\n   * Disable during development to see changes to templates without\n   * reloading, and disable in production to improve performance.\n   *\n   * @param {boolean} cache\n   */\n\n  Twig.exports.cache = function (cache) {\n    Twig.cache = cache;\n  }; // We need to export the path module so we can effectively test it\n\n\n  Twig.exports.path = Twig.path; // Export our filters.\n  // Resolves #307\n\n  Twig.exports.filters = Twig.filters; // Export our tests.\n\n  Twig.exports.tests = Twig.tests; // Export our functions.\n\n  Twig.exports.functions = Twig.functions;\n  Twig.exports.Promise = Twig.Promise;\n  return Twig;\n};\n\n/***/ })\n/******/ ]);\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/twig/twig.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n//# sourceURL=webpack:///(webpack)/buildin/module.js?");

/***/ }),

/***/ "./src/common/StandardChips.json":
/*!***************************************!*\
  !*** ./src/common/StandardChips.json ***!
  \***************************************/
/*! exports provided: +, -, *, ^, OR, NOR, AND, NAND, !, /, >, <, <=, >=, ==, !=, const, chip_const, var, split, min, rand, max, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"+\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"inputs\\\":[\\\"A\\\",\\\"B\\\"],\\\"outputs\\\":[\\\"R\\\"],\\\"code\\\":\\\"{{output_R}} = {{input_A}} + {{input_B}};\\\",\\\"type\\\":\\\"arithmatic\\\",\\\"description\\\":\\\"sums A and B\\\"},\\\"-\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"inputs\\\":[\\\"A\\\",\\\"B\\\"],\\\"outputs\\\":[\\\"R\\\"],\\\"code\\\":\\\"{{output_R}} = {{input_A}} - {{input_B}};\\\",\\\"type\\\":\\\"arithmatic\\\",\\\"description\\\":\\\"sums A and B\\\"},\\\"*\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"inputs\\\":[\\\"A\\\",\\\"B\\\"],\\\"outputs\\\":[\\\"R\\\"],\\\"code\\\":\\\"{{output_R}} = {{input_A}} * {{input_B}};\\\",\\\"type\\\":\\\"arithmatic\\\",\\\"description\\\":\\\"sums A and B\\\"},\\\"^\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"inputs\\\":[\\\"A\\\",\\\"B\\\"],\\\"outputs\\\":[\\\"R\\\"],\\\"code\\\":\\\"{{output_R}} = {{input_A}} ** {{input_B}};\\\",\\\"type\\\":\\\"arithmatic\\\",\\\"description\\\":\\\"sums A and B\\\"},\\\"OR\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"inputs\\\":[\\\"A\\\",\\\"B\\\"],\\\"outputs\\\":[\\\"R\\\"],\\\"code\\\":\\\"{{output_R}} = {{input_A}} || {{input_B}};\\\",\\\"type\\\":\\\"logic\\\",\\\"description\\\":\\\"sums A and B\\\"},\\\"NOR\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"inputs\\\":[\\\"A\\\",\\\"B\\\"],\\\"outputs\\\":[\\\"R\\\"],\\\"code\\\":\\\"{{output_R}} = !{{input_A}} && !{{input_B}};\\\",\\\"type\\\":\\\"logic\\\",\\\"description\\\":\\\"sums A and B\\\"},\\\"AND\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"inputs\\\":[\\\"A\\\",\\\"B\\\"],\\\"outputs\\\":[\\\"R\\\"],\\\"code\\\":\\\"{{output_R}} = {{input_A}} && {{input_B}};\\\",\\\"type\\\":\\\"logic\\\",\\\"description\\\":\\\"sums A and B\\\"},\\\"NAND\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"inputs\\\":[\\\"A\\\",\\\"B\\\"],\\\"outputs\\\":[\\\"R\\\"],\\\"code\\\":\\\"{{output_R}} = !({{input_A}} && {{input_B}});\\\",\\\"type\\\":\\\"logic\\\",\\\"description\\\":\\\"sums A and B\\\"},\\\"!\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"inputs\\\":[\\\"A\\\"],\\\"outputs\\\":[\\\"R\\\"],\\\"code\\\":\\\"{{output_R}} = !{{input_A}};\\\",\\\"type\\\":\\\"logic\\\",\\\"description\\\":\\\"sums A and B\\\"},\\\"/\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"inputs\\\":[\\\"A\\\",\\\"B\\\"],\\\"outputs\\\":[\\\"R\\\"],\\\"code\\\":\\\"{{output_R}} = {{input_A}} / {{input_B}};\\\",\\\"type\\\":\\\"arithmatic\\\",\\\"description\\\":\\\"sums A and B\\\"},\\\">\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"inputs\\\":[\\\"A\\\",\\\"B\\\"],\\\"outputs\\\":[\\\"R\\\"],\\\"code\\\":\\\"{{output_R}} = {{input_A}} > {{input_B}};\\\",\\\"type\\\":\\\"logic\\\",\\\"description\\\":\\\"sums A and B\\\"},\\\"<\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"inputs\\\":[\\\"A\\\",\\\"B\\\"],\\\"outputs\\\":[\\\"R\\\"],\\\"code\\\":\\\"{{output_R}} = {{input_A}} < {{input_B}};\\\",\\\"type\\\":\\\"logic\\\",\\\"description\\\":\\\"sums A and B\\\"},\\\"<=\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"inputs\\\":[\\\"A\\\",\\\"B\\\"],\\\"outputs\\\":[\\\"R\\\"],\\\"code\\\":\\\"{{output_R}} = {{input_A}} <= {{input_B}};\\\",\\\"type\\\":\\\"logic\\\",\\\"description\\\":\\\"sums A and B\\\"},\\\">=\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"inputs\\\":[\\\"A\\\",\\\"B\\\"],\\\"outputs\\\":[\\\"R\\\"],\\\"code\\\":\\\"{{output_R}} = {{input_A}} >= {{input_B}};\\\",\\\"type\\\":\\\"logic\\\",\\\"description\\\":\\\"checks a > B\\\"},\\\"==\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"inputs\\\":[\\\"A\\\",\\\"B\\\"],\\\"outputs\\\":[\\\"R\\\"],\\\"code\\\":\\\"{{output_R}} = {{input_A}} === {{input_B}};\\\",\\\"type\\\":\\\"logic\\\",\\\"description\\\":\\\"checks A is equal to B\\\"},\\\"!=\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"inputs\\\":[\\\"A\\\",\\\"B\\\"],\\\"outputs\\\":[\\\"R\\\"],\\\"code\\\":\\\"{{output_R}} = {{input_A}} !== {{input_B}};\\\",\\\"type\\\":\\\"logic\\\",\\\"description\\\":\\\"checks A is not equal to B\\\"},\\\"const\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"constants\\\":[\\\"VAL\\\"],\\\"inputs\\\":[],\\\"outputs\\\":[\\\"R\\\"],\\\"code\\\":\\\"{{output_R}} = {{constant_VAL|json_encode()}};\\\",\\\"type\\\":\\\"value\\\",\\\"description\\\":\\\"Outputs constant value\\\"},\\\"chip_const\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"constants\\\":[\\\"NAME\\\"],\\\"inputs\\\":[],\\\"outputs\\\":[\\\"R\\\"],\\\"code\\\":\\\"{{output_R}} = C_{{chipName}}_{{raw_constant_NAME}};\\\",\\\"type\\\":\\\"value\\\",\\\"description\\\":\\\"Outputs constant value\\\"},\\\"var\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"constants\\\":[\\\"VAL\\\"],\\\"inputs\\\":[\\\"SET\\\",\\\"VAL\\\"],\\\"outputs\\\":[\\\"VAL\\\"],\\\"code\\\":\\\"{{constant_VAL}} = {{input_SET}} ? {{input_VAL}} : {{constant_VAL}}; {{output_R}} = {{constant_VAL}};\\\",\\\"type\\\":\\\"value\\\",\\\"description\\\":\\\"sums A and B\\\"},\\\"split\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"inputs\\\":[\\\"VAL\\\"],\\\"outputs\\\":[\\\"A\\\",\\\"B\\\"],\\\"code\\\":\\\"{{output_A}} = {{input_VAL}};{{output_B}} = {{input_VAL}}\\\",\\\"type\\\":\\\"value\\\",\\\"description\\\":\\\"sums A and B\\\"},\\\"min\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"inputs\\\":[\\\"A\\\",\\\"B\\\"],\\\"outputs\\\":[\\\"R\\\"],\\\"code\\\":\\\"{{output_R}} = Math.min({{input_A}},{{input_B}});\\\",\\\"type\\\":\\\"arithmatic\\\",\\\"description\\\":\\\"sums A and B\\\"},\\\"rand\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"inputs\\\":[],\\\"outputs\\\":[\\\"R\\\"],\\\"code\\\":\\\"{{output_R}} = Math.random();\\\",\\\"type\\\":\\\"arithmatic\\\",\\\"description\\\":\\\"sums A and B\\\"},\\\"max\\\":{\\\"size\\\":{\\\"x\\\":1,\\\"y\\\":1},\\\"inputs\\\":[\\\"A\\\",\\\"B\\\"],\\\"outputs\\\":[\\\"R\\\"],\\\"code\\\":\\\"{{output_R}} = Math.max({{input_A}},{{input_B}});\\\",\\\"type\\\":\\\"arithmatic\\\",\\\"description\\\":\\\"sums A and B\\\"}}\");\n\n//# sourceURL=webpack:///./src/common/StandardChips.json?");

/***/ }),

/***/ "./src/common/Transform.ts":
/*!*********************************!*\
  !*** ./src/common/Transform.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Rect = exports.Vec2 = exports.Line = void 0;\nclass Line {\n    static Intersect(a, b) {\n        return Line.IntersectMathCheck(...Line.IntersectMath(a, b));\n    }\n    static IntersectPoint(a, b) {\n        const [uA, uB] = Line.IntersectMath(a, b);\n        if (Line.IntersectMathCheck(uA, uB)) {\n            return {\n                x: a.start.x + (uA * (a.end.x - a.start.x)),\n                y: a.start.y + (uB * (a.end.y - a.start.y)),\n            };\n        }\n        return null;\n    }\n    static IntersectMath(a, b) {\n        const x1 = a.start.x;\n        const y1 = a.start.y;\n        const x2 = a.end.x;\n        const y2 = a.end.y;\n        const x3 = b.start.x;\n        const y3 = b.start.y;\n        const x4 = b.end.x;\n        const y4 = b.end.y;\n        return [\n            ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1)),\n            ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1))\n        ];\n    }\n    static IntersectMathCheck(a, b) {\n        return a >= 0 && a <= 1 && b >= 0 && b <= 1;\n    }\n    static IntersectRect(line, rect) {\n        const lines = Rect.To4Lines(rect);\n        for (const l of lines) {\n            if (Line.Intersect(line, l))\n                return true;\n        }\n        return false;\n    }\n    static IntersectRectPoints(line, rect) {\n        const lines = Rect.To4Lines(rect);\n        return lines.map(l => Line.IntersectPoint(line, l)).filter((i) => i != null);\n    }\n}\nexports.Line = Line;\nclass Vec2 {\n    static MagnitudeSquared(vec) {\n        return (vec.x * vec.x) + (vec.y * vec.y);\n    }\n    static Magnitude(vec) {\n        return Math.sqrt(Vec2.MagnitudeSquared(vec));\n    }\n    static Swap(vec) {\n        return {\n            x: vec.y,\n            y: vec.x,\n        };\n    }\n    static Sum(a, b) {\n        return { x: a.x + b.x, y: a.y + b.y };\n    }\n    static Multiply(vec, by) {\n        return { x: vec.x * by, y: vec.y * by };\n    }\n    static DistanceSquared(a, b) {\n        const x = a.x - b.x;\n        const y = a.y - b.y;\n        return (x * x) + (y * y);\n    }\n    static Distance(a, b) {\n        return Math.sqrt(Vec2.DistanceSquared(a, b));\n    }\n    static Clamp(vec, min, max) {\n        return {\n            x: Math.min(Math.max(vec.x, min), max),\n            y: Math.min(Math.max(vec.y, min), max),\n        };\n    }\n    static ClampVec(vec, min, max) {\n        return {\n            x: Math.min(Math.max(vec.x, min.x), max.x),\n            y: Math.min(Math.max(vec.y, min.y), max.y),\n        };\n    }\n    static Equal(a, b) {\n        return a.x == b.x && a.y == b.y;\n    }\n}\nexports.Vec2 = Vec2;\nclass Rect {\n    static FromVec2(vec) {\n        return { top: vec.y, bottom: vec.y, left: vec.x, right: vec.x };\n    }\n    static FromPosAndSize(pos, size) {\n        return Rect.FromTLAndBR(pos, Vec2.Sum(pos, size));\n    }\n    static FromPosAndPad(pos, pad) {\n        return Rect.Pad(Rect.FromVec2(pos), pad);\n    }\n    static FromTLAndBR(tl, br) {\n        return {\n            top: tl.y,\n            bottom: br.y,\n            left: tl.x,\n            right: br.x,\n        };\n    }\n    static Pad(rect, pad) {\n        return {\n            top: rect.top - pad,\n            bottom: rect.bottom + pad,\n            left: rect.left - pad,\n            right: rect.right + pad,\n        };\n    }\n    static Intersect(rectA, rectB) {\n        const x_overlap = Math.max(0, Math.min(rectA.right, rectB.right) - Math.max(rectA.left, rectB.left));\n        const y_overlap = Math.max(0, Math.min(rectA.bottom, rectB.bottom) - Math.max(rectA.top, rectB.top));\n        return x_overlap * y_overlap;\n    }\n    static To4Lines(rect) {\n        return [\n            { start: { x: rect.left, y: rect.top }, end: { x: rect.right, y: rect.top } },\n            { start: { x: rect.right, y: rect.top }, end: { x: rect.right, y: rect.bottom } },\n            { start: { x: rect.right, y: rect.bottom }, end: { x: rect.left, y: rect.bottom } },\n            { start: { x: rect.left, y: rect.bottom }, end: { x: rect.left, y: rect.top } },\n        ];\n    }\n}\nexports.Rect = Rect;\n\n\n//# sourceURL=webpack:///./src/common/Transform.ts?");

/***/ }),

/***/ "./src/designer/ChipDetails.ts":
/*!*************************************!*\
  !*** ./src/designer/ChipDetails.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ChipType_1 = __importDefault(__webpack_require__(/*! ./chip/ChipType */ \"./src/designer/chip/ChipType.ts\"));\nconst chipDetails_twig_1 = __importDefault(__webpack_require__(/*! ./views/chipDetails.twig */ \"./src/designer/views/chipDetails.twig\"));\nconst twig_1 = __webpack_require__(/*! twig */ \"./node_modules/twig/twig.js\");\nclass ChipDetails {\n    constructor(designer) {\n        this.chip = null;\n        this.designer = designer;\n        this.template = twig_1.twig({ data: chipDetails_twig_1.default });\n        this.setupHtml();\n        this.hide();\n    }\n    static Factory(designer) {\n        return new ChipDetails(designer);\n    }\n    get style() { return this.container.style; }\n    setupHtml() {\n        this.container = document.createElement(\"div\");\n        this.container.classList.add(\"card\", \"chipDetailsContainer\", \"shadow-sm\");\n        this.container.addEventListener(\"change\", e => this.contentChanged(e));\n        this.container.addEventListener(\"mouseup\", e => this.mouseUp(e));\n        document.body.appendChild(this.container);\n    }\n    contentChanged(event) {\n        var _a, _b, _c;\n        if (this.chip == null)\n            return;\n        if (event.target instanceof HTMLInputElement || event.target instanceof HTMLSelectElement) {\n            const elem = event.target;\n            const data = elem.dataset;\n            switch (data.type) {\n                case \"name\":\n                    this.chip.name = elem.value;\n                    break;\n                case \"constant\":\n                    let v = null;\n                    try {\n                        v = JSON.parse(elem.value);\n                    }\n                    catch (e) {\n                        v = elem.value;\n                    }\n                    this.chip.setConstant((_a = data.index) !== null && _a !== void 0 ? _a : \"\", v);\n                    break;\n                case \"input\":\n                    this.chip.setInput(parseInt((_b = data.index) !== null && _b !== void 0 ? _b : \"\"), elem.value);\n                    break;\n                case \"output\":\n                    this.chip.setOutput(parseInt((_c = data.index) !== null && _c !== void 0 ? _c : \"\"), elem.value);\n                    break;\n                case \"type\":\n                    this.chip.type = elem.value;\n                    break;\n                case \"size\":\n                    const size = this.chip.size;\n                    if (data.index == \"x\")\n                        size.x = parseInt(elem.value);\n                    if (data.index == \"y\")\n                        size.y = parseInt(elem.value);\n                    this.chip.setSize(size);\n                    break;\n                default:\n                    break;\n            }\n        }\n        this.designer.chipChange(this.chip);\n        window.setTimeout(() => this.render(), 10);\n    }\n    hide() {\n        if (this.container) {\n            this.container.style.display = \"none\";\n        }\n        return this;\n    }\n    show() {\n        if (this.container) {\n            this.container.style.display = \"\";\n            this.container.classList.remove(\"closed\");\n        }\n        return this;\n    }\n    setChip(chip) {\n        this.chip = chip;\n        this.render();\n        return this;\n    }\n    render() {\n        if (this.chip == null)\n            return;\n        const active = document.activeElement;\n        let activeID = \"\";\n        if (active instanceof HTMLInputElement || active instanceof HTMLSelectElement) {\n            activeID = active.id;\n        }\n        this.container.innerHTML = this.template.render({ chip: this.chip, types: { standard: ChipType_1.default.StandardTypeList(), custom: ChipType_1.default.CustomTypeList() }, base: ChipType_1.default.BaseChip == this.chip.type });\n        if (activeID.length) {\n            const elem = document.getElementById(activeID);\n            if (elem)\n                elem.focus();\n        }\n    }\n    mouseUp(event) {\n        var _a, _b, _c, _d, _e;\n        if (event.target instanceof HTMLSpanElement) {\n            if (event.target.dataset.toggle == \"details\") {\n                this.container.classList.toggle(\"closed\");\n            }\n        }\n        if (event.target instanceof HTMLButtonElement) {\n            const action = ((_a = event.target.dataset.action) !== null && _a !== void 0 ? _a : \"\").toLowerCase();\n            switch (action) {\n                case \"new const\":\n                    (_b = this.chip) === null || _b === void 0 ? void 0 : _b.addConst((_c = window.prompt(\"New constant name\")) !== null && _c !== void 0 ? _c : \"\");\n                    break;\n                case \"remove const\":\n                    (_d = this.chip) === null || _d === void 0 ? void 0 : _d.removeConst((_e = event.target.dataset.index) !== null && _e !== void 0 ? _e : \"\");\n                    break;\n                default:\n                    return;\n            }\n            this.render();\n        }\n    }\n}\nexports.default = ChipDetails;\n\n\n//# sourceURL=webpack:///./src/designer/ChipDetails.ts?");

/***/ }),

/***/ "./src/designer/Designer.ts":
/*!**********************************!*\
  !*** ./src/designer/Designer.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst chip_1 = __webpack_require__(/*! ./chip */ \"./src/designer/chip/index.ts\");\nconst ChipDetails_1 = __importDefault(__webpack_require__(/*! ./ChipDetails */ \"./src/designer/ChipDetails.ts\"));\nconst RightClickMenu_1 = __importDefault(__webpack_require__(/*! ./RightClickMenu */ \"./src/designer/RightClickMenu.ts\"));\nconst RightClick_json_1 = __importDefault(__webpack_require__(/*! ./data/RightClick.json */ \"./src/designer/data/RightClick.json\"));\nconst StandardChips_json_1 = __importDefault(__webpack_require__(/*! ../common/StandardChips.json */ \"./src/common/StandardChips.json\"));\nconst Renderer_1 = __importDefault(__webpack_require__(/*! ./Renderer */ \"./src/designer/Renderer.ts\"));\nclass Designer {\n    constructor(chipType) {\n        this._zoom = 1;\n        this._topLeft = { x: -25, y: -25 };\n        this.running = false;\n        this._time = {\n            last: 0,\n            delta: 0,\n            total: 0,\n        };\n        this._selectedChip = null;\n        this.draggingChip = false;\n        this.draggingChipOffset = { x: 0, y: 0 };\n        this.draggingWindow = false;\n        this.draggingWindowOffset = { x: 0, y: 0 };\n        this._connectingPin = null;\n        this._draggingPin = false;\n        this._mousePos = { x: 0, y: 0 };\n        this._mouseGridPos = { x: 0, y: 0 };\n        this.rightClickPos = { x: 0, y: 0 };\n        this.copyChip = null;\n        this._debug = false;\n        this.konami = [\"ArrowUp\", \"ArrowUp\", \"ArrowDown\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\", \"ArrowLeft\", \"ArrowRight\", \"b\", \"a\", \"Enter\"];\n        this.konamiProgress = 0;\n        if (window.ChipDesigner) {\n            throw \"CHIP DESIGNER ALREADY RUN\";\n        }\n        window.ChipDesigner = this;\n        chip_1.ChipType.BaseChip = chipType;\n        chip_1.ChipType.Load();\n        this.baseChip = new chip_1.Chip(chipType, chipType);\n        this.baseChip.content.setParentChip(this.baseChip);\n        this.load();\n        this.selectedChipDetails = new ChipDetails_1.default(this);\n        this.selectedChipDetails.style.top = \"20px\";\n        this.selectedChipDetails.style.right = \"20px\";\n        this.baseChipDetails = new ChipDetails_1.default(this);\n        this.baseChipDetails.style.bottom = \"20px\";\n        this.baseChipDetails.style.right = \"20px\";\n        this.baseChipDetails.setChip(this.baseChip).show();\n        this.setupContextMenu();\n        this.setupRenderer();\n        window.addEventListener(\"beforeunload\", () => this.save());\n        this.chipChange(null);\n    }\n    static get SaveString() { return \"CHIP_DESIGNER\"; }\n    static get ChipSaveString() { return \"CHIP_DESIGNER_CHIP\"; }\n    static Factory(chipType) {\n        return new Designer(chipType);\n    }\n    get selectedChip() { return this._selectedChip; }\n    get selectedChipID() { var _a, _b; return (_b = (_a = this._selectedChip) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : \"\"; }\n    get zoom() { return this._zoom; }\n    get time() { return { ...this._time }; }\n    get debug() { return this._debug; }\n    get topLeft() { return { ...this._topLeft }; }\n    get ChipType() { return chip_1.ChipType; }\n    get connectingPin() { return this._connectingPin; }\n    get mouseState() {\n        return {\n            pos: this._mousePos,\n            gridPos: this._mouseGridPos,\n            draggingChip: this.draggingChip,\n            draggingPin: this._draggingPin,\n            draggingWindow: this.draggingWindow,\n            draggingChipOffset: this.draggingChipOffset,\n        };\n    }\n    get mouse() {\n        return this.mouseState;\n    }\n    get content() {\n        return this.baseChip.content;\n    }\n    save() {\n        window.localStorage.setItem(Designer.SaveString, JSON.stringify({\n            zoom: this._zoom,\n            topLeft: { ...this._topLeft },\n            debug: this._debug,\n        }));\n        window.localStorage.setItem(Designer.ChipSaveString, JSON.stringify(this.baseChip));\n    }\n    load() {\n        var _a, _b;\n        const json = window.localStorage.getItem(Designer.SaveString);\n        if (json) {\n            const data = JSON.parse(json);\n            if (data) {\n                this._zoom = parseInt(data.zoom || this._zoom);\n                this._topLeft = { ...((_a = data.topLeft) !== null && _a !== void 0 ? _a : this._topLeft) };\n                this._debug = (_b = data.debug) !== null && _b !== void 0 ? _b : this._debug;\n                this._zoom = this.clamp(this._zoom, 0.1, 4.0);\n            }\n        }\n        const cJson = window.localStorage.getItem(Designer.ChipSaveString);\n        if (cJson) {\n            const data = JSON.parse(cJson);\n            if (data) {\n                this.baseChip.fromJSON(data);\n            }\n        }\n    }\n    setupContextMenu() {\n        if (this.rightClick)\n            this.rightClick.destroy();\n        const chipMenus = Object.entries(StandardChips_json_1.default).reduce((p, [name, chip]) => {\n            const type = chip.type || \"logic\";\n            if (!p.hasOwnProperty(type))\n                p[type] = { data: {} };\n            p[type][\"data\"][name] = [\"add chip\", name];\n            return p;\n        }, { \"custom\": { data: { \"new ...\": [\"new custom chip\"] } } });\n        if (chip_1.ChipType.CustomTypeList().length > 0) {\n            chipMenus[\"custom\"][\"data\"][\"br1\"] = null;\n        }\n        chip_1.ChipType.CustomTypeList().forEach(type => {\n            chipMenus[\"custom\"][\"data\"][type] = [\"add chip\", type];\n        });\n        RightClick_json_1.default[\"Add Chip\"] = {\n            data: chipMenus\n        };\n        this.rightClick = new RightClickMenu_1.default(document.body, action => this.rightClickAction(action), \"root\", RightClick_json_1.default);\n    }\n    get gridSize() { return this.baseChip.content.size; }\n    setChipSize(gridSize) {\n        this.baseChip.setSize(gridSize);\n        this.content.chips.forEach(chip => chip.clamp2Grid(this.gridSize));\n        this.baseChipDetails.setChip(this.baseChip);\n        return this;\n    }\n    setupRenderer() {\n        this.renderer = new Renderer_1.default(this);\n        const canvas = this.renderer.canvas;\n        canvas.addEventListener('mousedown', e => this.mouseDown(e));\n        canvas.addEventListener('mousemove', e => this.mouseMove(e));\n        canvas.addEventListener('mouseup', e => this.mouseUp(e));\n        canvas.addEventListener('mouseleave', e => this.mouseLeave(e));\n        canvas.addEventListener('wheel', e => this.mouseWheel(e));\n        canvas.addEventListener(\"contextmenu\", e => this.mouseRightClick(e));\n        window.addEventListener(\"keyup\", e => this.keyUp(e));\n    }\n    keyUp(event) {\n        if (event.altKey && event.shiftKey && event.ctrlKey && event.key === \"D\") {\n            this._debug = !this._debug;\n        }\n        if (event.key == \"r\" && this.draggingChip && this.selectedChip) {\n            this.selectedChip.rotate();\n        }\n        if (event.key == \"Delete\") {\n            if (this.selectedChip) {\n                this.draggingChip = false;\n                this.content.removeChip(this.selectedChip);\n                this._selectedChip = null;\n            }\n        }\n        if (event.key == \"c\" && event.ctrlKey) {\n            this.copyChip = this.selectedChip;\n        }\n        if (event.key == \"v\" && event.ctrlKey && this.copyChip) {\n            this.insertChipAtPos(this.copyChip.clone(), this._mouseGridPos);\n        }\n        if (event.target instanceof HTMLElement && event.target.tagName.toUpperCase() == \"BODY\") {\n            if (event.key == this.konami[this.konamiProgress]) {\n                this.konamiProgress++;\n                if (this.konamiProgress >= this.konami.length) {\n                    this.konamiProgress = 0;\n                    this.renderer.doKonami();\n                    console.log(\"KONAMI\");\n                }\n            }\n            else\n                this.konamiProgress = 0;\n        }\n        else\n            this.konamiProgress = 0;\n        if (this.debug)\n            console.log(event.key);\n    }\n    clamp(val, min, max) {\n        return Math.min(Math.max(val, min), max);\n    }\n    pos2GridScale(pos) {\n        const scale = this.renderer.gridScale;\n        return { x: pos.x / scale, y: pos.y / scale };\n    }\n    snapPos2Grid(pos) {\n        pos = this.pos2GridScale(pos);\n        return {\n            x: this.clamp(Math.round(pos.x), 0, this.gridSize.x - 1),\n            y: this.clamp(Math.round(pos.y), 0, this.gridSize.y - 1)\n        };\n    }\n    updateMousePos(event) {\n        const rect = this.renderer.canvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        this._mousePos.x = x;\n        this._mousePos.y = y;\n        this._mouseGridPos.x = x + this._topLeft.x;\n        this._mouseGridPos.y = y + this._topLeft.y;\n    }\n    getConnectionAtPos(pos) {\n        const gPos = this.pos2GridScale(pos);\n        return this.content.connectionAtPos(gPos);\n    }\n    getPinAtPos(pos) {\n        const gPos = this.pos2GridScale(pos);\n        if (gPos.y < -0.5 || gPos.y > (this.gridSize.y + 0.5)) {\n            console.log(\"BASECHIP PIN LOOKUP\", gPos);\n            return this.baseChip.getPinAtPos(gPos);\n        }\n        else {\n            const chip = this.getChipAtPos(pos, 0.25);\n            if (chip) {\n                return chip.getPinAtPos(gPos);\n            }\n        }\n        return null;\n    }\n    getChipAtPos(pos, pad = null) {\n        pad !== null && pad !== void 0 ? pad : (pad = this.chipEdge * 0.5);\n        const gPos = this.pos2GridScale(pos);\n        const chips = this.content.chips;\n        for (const chip of chips) {\n            if (chip.intersects({ top: gPos.y, left: gPos.x, bottom: gPos.y, right: gPos.x }, pad)) {\n                return chip;\n            }\n        }\n        return null;\n    }\n    compileData() {\n        return JSON.parse(JSON.stringify({ chip: this.baseChip.toJSON(), chipData: chip_1.ChipType.toJSON() }));\n    }\n    chipChange(chip) {\n        this.content.updateConnectionsForChip(chip);\n        this.baseChipDetails.render();\n        if (this.baseChip.errors.length < 1) {\n            const comp = new window.ChipCompiler();\n            comp.loadSource(JSON.stringify(this.compileData()));\n            comp.run();\n        }\n    }\n    mouseDown(event) {\n        this.updateMousePos(event);\n        this.rightClick.hide();\n        this._draggingPin = false;\n        this.draggingChip = false;\n        this.draggingWindow = false;\n        this._selectedChip = null;\n        this.selectedChipDetails.hide();\n        if (event.button == 0) {\n            const chip = this.getChipAtPos(this._mouseGridPos);\n            if (chip != null) {\n                const chipPos = chip.gridPos(this.renderer.gridScale);\n                const chipSize = chip.gridSize(this.renderer.gridScale);\n                chipPos.x += chipSize.x * 0.5;\n                chipPos.y += chipSize.y * 0.5;\n                this.draggingChipOffset.x = chipPos.x - this._mouseGridPos.x;\n                this.draggingChipOffset.y = chipPos.y - this._mouseGridPos.y;\n                this._selectedChip = chip;\n                this.draggingChip = true;\n                this.selectedChipDetails.setChip(chip);\n            }\n            else {\n                const pin = this.getPinAtPos(this._mouseGridPos);\n                if (pin) {\n                    this._connectingPin = pin;\n                    this._draggingPin = true;\n                }\n                else {\n                    const con = this.getConnectionAtPos(this._mouseGridPos);\n                    if (con)\n                        console.log(con.id);\n                }\n            }\n        }\n        else if (event.button == 1) {\n            this.draggingWindow = true;\n            this.draggingWindowOffset = { ...this._mousePos };\n            this.draggingWindowOffset.x += this._topLeft.x;\n            this.draggingWindowOffset.y += this._topLeft.y;\n        }\n    }\n    mouseMove(event) {\n        this.updateMousePos(event);\n        if (this.draggingWindow) {\n            this._topLeft = { ...this.draggingWindowOffset };\n            this._topLeft.x -= this._mousePos.x;\n            this._topLeft.y -= this._mousePos.y;\n            this._topLeft.x = this.clamp(this._topLeft.x, 200 - this.renderer.canvas.width, 200);\n            this._topLeft.y = this.clamp(this._topLeft.y, 200 - this.renderer.canvas.height, 200);\n        }\n    }\n    mouseUp(event) {\n        this.updateMousePos(event);\n        if (event.button == 0) {\n            if (this.draggingChip) {\n                const sChip = this._selectedChip;\n                if (sChip != null) {\n                    const orgPos = { ...sChip.pos };\n                    const pos = { ...this._mouseGridPos };\n                    pos.x += this.draggingChipOffset.x;\n                    pos.y += this.draggingChipOffset.y;\n                    const size = sChip.gridSize(this.renderer.gridScale);\n                    pos.x -= size.x * 0.5;\n                    pos.y -= size.y * 0.5;\n                    const gridPos = this.snapPos2Grid(pos);\n                    sChip.setPos(gridPos, this.gridSize);\n                    for (const oChip of this.content.chips) {\n                        if (oChip.id == sChip.id)\n                            continue;\n                        if (oChip.intersectsChip(sChip)) {\n                            sChip.setPos(orgPos, this.gridSize);\n                            break;\n                        }\n                    }\n                    this.chipChange(sChip);\n                }\n            }\n            else if (this._draggingPin) {\n                const pin = this.getPinAtPos(this._mouseGridPos);\n                if (this._connectingPin && pin) {\n                    if (pin.isEqualTo(this._connectingPin)) {\n                        this.content.disconnect(pin);\n                    }\n                    else\n                        this.content.connect(this._connectingPin, pin);\n                    this.chipChange(null);\n                }\n            }\n        }\n        this.draggingChip = false;\n        this.draggingWindow = false;\n        this._draggingPin = false;\n        this._connectingPin = null;\n        if (this._selectedChip != null) {\n            this.selectedChipDetails.show();\n        }\n    }\n    mouseLeave(event) {\n        this.updateMousePos(event);\n        this.draggingChip = false;\n        this.draggingWindow = false;\n        this._draggingPin = false;\n    }\n    mouseRightClick(event) {\n        this.updateMousePos(event);\n        event.preventDefault();\n        this.rightClickPos = { ...this._mouseGridPos };\n        const chip = this.getChipAtPos(this.rightClickPos);\n        const reqs = [];\n        if (chip)\n            reqs.push(\"target-chip\");\n        this.rightClick.show(this._mousePos, reqs);\n    }\n    rightClickAction(action) {\n        var _a, _b, _c;\n        switch ((_a = action[0]) !== null && _a !== void 0 ? _a : \"\") {\n            case \"add chip\":\n                this.insertChipTypeAtRightClick((_b = action[1]) !== null && _b !== void 0 ? _b : \"+\");\n                break;\n            case \"remove\":\n                const chip = this.getChipAtPos(this.rightClickPos);\n                if (chip) {\n                    this.content.removeChip(chip);\n                    this.chipChange(chip);\n                }\n                break;\n            case \"new custom chip\":\n                const type = chip_1.ChipType.New((_c = window.prompt(\"New chip type name:\")) !== null && _c !== void 0 ? _c : \"\");\n                this.setupContextMenu();\n                if (type)\n                    this.insertChipTypeAtRightClick(type);\n                break;\n            default:\n                console.error(\"Unhandler Right Click\", action);\n                break;\n        }\n    }\n    insertChipTypeAtRightClick(type) {\n        const chip = new chip_1.Chip(`${type}_${Date.now()}`, type);\n        this.insertChipAtRightClick(chip);\n    }\n    insertChipAtRightClick(chip) {\n        this.insertChipAtPos(chip, this.rightClickPos);\n    }\n    insertChipAtPos(chip, pos) {\n        chip.setPos(this.snapPos2Grid(pos), this.gridSize);\n        this.content.addChip(chip);\n        this.chipChange(chip);\n    }\n    mouseWheel(e) {\n        this._zoom -= e.deltaY * 0.1;\n        this._zoom = this.clamp(this._zoom, 0.1, 4.0);\n    }\n    get chipEdge() { return 0.28; }\n    run() {\n        this.selectedChipDetails.hide();\n        if (this.running)\n            return this;\n        this.running = true;\n        this.update(0);\n        return this;\n    }\n    stop() {\n        this.running = false;\n        return this;\n    }\n    update(time) {\n        const delta = time - this._time.last;\n        this._time.total = time;\n        this._time.delta = delta;\n        this.renderer.draw(delta, this.baseChip, this.content);\n        this._time.last = time;\n        if (this.running) {\n            window.requestAnimationFrame(time => this.update(time));\n        }\n    }\n}\nexports.default = Designer;\n\n\n//# sourceURL=webpack:///./src/designer/Designer.ts?");

/***/ }),

/***/ "./src/designer/Renderer.ts":
/*!**********************************!*\
  !*** ./src/designer/Renderer.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Transform_1 = __webpack_require__(/*! ../common/Transform */ \"./src/common/Transform.ts\");\nconst chip_1 = __webpack_require__(/*! ./chip */ \"./src/designer/chip/index.ts\");\nclass Renderer {\n    constructor(designer) {\n        this.style = {\n            colours: {\n                background: \"#FFF\",\n                grid: {\n                    border: \"#333\",\n                    lines: \"#DDD8\",\n                },\n                wire: [\"#900\", \"#090\", \"#009\"],\n                chip: {\n                    base: \"#333\",\n                    back: \"#222\",\n                    fore: \"#444\",\n                    pin: \"#888\",\n                    text: \"#DDD\",\n                    pinText: \"#333\",\n                },\n                highlight: \"#F00\",\n            },\n            chipEdge: 0.28,\n            font: {\n                size: 12,\n                text: \"normal bold sans-serif\",\n            },\n            grid: {\n                size: 40,\n            }\n        };\n        this.fontSize = 12;\n        this.frameTimes = [];\n        this.designer = designer;\n        this._canvas = document.createElement(\"canvas\");\n        this.canvas.classList.add(\"designer\");\n        document.body.prepend(this.canvas);\n        const context = this.canvas.getContext(\"2d\");\n        if (context == null)\n            throw \"Failed to get 2d rendering context for canvas\";\n        else\n            this.context = context;\n    }\n    get canvas() { return this._canvas; }\n    get colours() { return this.style.colours; }\n    get chipEdge() { return this.style.chipEdge; }\n    get topLeft() { return this.designer.topLeft; }\n    get zoom() { return this.designer.zoom; }\n    get gridScale() { return this.style.grid.size * this.zoom; }\n    get mouse() { return this.designer.mouse; }\n    get gridSize() { return this.designer.gridSize; }\n    doKonami() {\n        let h = 0;\n        const background = this.colours.background;\n        const int = window.setInterval(() => {\n            h++;\n            if (h > 360) {\n                this.colours.background = background;\n                window.clearInterval(int);\n            }\n            else {\n                const rgb = this.HSVtoRGB(h / 360, 1, 1);\n                this.colours.background = `#${rgb.r.toString(16).padStart(2, \"0\")}${rgb.g.toString(16).padStart(2, \"0\")}${rgb.b.toString(16).padStart(2, \"0\")}`;\n            }\n        }, 10);\n    }\n    HSVtoRGB(h, s, v) {\n        var r = 0, g = 0, b = 0, i, f, p, q, t;\n        i = Math.floor(h * 6);\n        f = h * 6 - i;\n        p = v * (1 - s);\n        q = v * (1 - f * s);\n        t = v * (1 - (1 - f) * s);\n        switch (i % 6) {\n            case 0:\n                r = v, g = t, b = p;\n                break;\n            case 1:\n                r = q, g = v, b = p;\n                break;\n            case 2:\n                r = p, g = v, b = t;\n                break;\n            case 3:\n                r = p, g = q, b = v;\n                break;\n            case 4:\n                r = t, g = p, b = v;\n                break;\n            case 5:\n                r = v, g = p, b = q;\n                break;\n        }\n        return {\n            r: Math.round(r * 255),\n            g: Math.round(g * 255),\n            b: Math.round(b * 255)\n        };\n    }\n    draw(delta, chip, content) {\n        this.canvas.width = window.innerWidth;\n        this.canvas.height = window.innerHeight;\n        this.context.fillStyle = this.colours.background;\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        this.context.textBaseline = \"top\";\n        this.context.textAlign = \"left\";\n        this.fontSize = Math.round(this.style.font.size * this.zoom);\n        this.context.font = `${this.style.font.text} ${this.fontSize}px`;\n        const gridScale = this.gridScale;\n        const VX = -this.topLeft.x;\n        const VY = -this.topLeft.y;\n        this.drawGrid(chip, VX, VY, gridScale);\n        this.drawChips(content, VX, VY, gridScale);\n        this.drawConnections(content, VX, VY, gridScale);\n        if (this.designer.debug) {\n            this.drawFPSGraph(delta, { x: 0, y: this.canvas.height - 120 }, { x: 520, y: 120 });\n            this.context.fillText([Object.values(this.mouse.gridPos), Object.values(this.designer.snapPos2Grid(this.mouse.gridPos))].toString(), 0, 0);\n            const grid = content.getGridMatrix(null);\n            this.context.textBaseline = \"middle\";\n            this.context.textAlign = \"center\";\n            for (let y = 0; y < grid.length; y++) {\n                const line = grid[y];\n                for (let x = 0; x < line.length; x++) {\n                    this.context.fillText(line[x].toString(), VX + (x * gridScale), VY + (y * gridScale));\n                }\n            }\n            this.context.fillStyle = \"#00F\";\n            this.context.textBaseline = \"top\";\n            this.context.textAlign = \"left\";\n            this.context.fillText(this.zoom.toString(), 0, this.fontSize * 2);\n        }\n    }\n    drawConnections(content, VX, VY, gridScale) {\n        content.connections.forEach(con => {\n            this.drawConnection(con, content, VX, VY, gridScale);\n        });\n        if (this.mouse.draggingPin && this.designer.connectingPin) {\n            const pin = this.designer.connectingPin;\n            const chip = content.getChip(pin.chip);\n            if (chip) {\n                const pinPos = this.getPinRenderPos(pin, chip, gridScale);\n                if (chip.isBaseChip)\n                    pinPos.y += (pin.output ? 0.5 : -0.5) * gridScale;\n                this.context.strokeStyle = this.colours.highlight;\n                this.context.beginPath();\n                this.context.moveTo(VX + pinPos.x, VY + pinPos.y);\n                this.context.lineTo(this.mouse.pos.x, this.mouse.pos.y);\n                this.context.stroke();\n            }\n        }\n    }\n    getPinRenderPos(pin, chip, gridScale) {\n        const pos = Transform_1.Vec2.Sum(chip.getPinPos(pin), Transform_1.Vec2.Multiply(chip.getPinPosOutOffset(pin), 0.4));\n        return Transform_1.Vec2.Multiply(pos, gridScale);\n    }\n    drawConnection(con, content, VX, VY, gridScale) {\n        var _a;\n        const sChip = content.getChip(con.source.chip);\n        const tChip = content.getChip(con.target.chip);\n        if (sChip == null || tChip == null)\n            return;\n        if (this.mouse.draggingChip) {\n            if (sChip.id == this.designer.selectedChipID || tChip.id == this.designer.selectedChipID)\n                return;\n        }\n        const src = this.getPinRenderPos(con.source, sChip, gridScale);\n        const trg = this.getPinRenderPos(con.target, tChip, gridScale);\n        if (sChip.isBaseChip)\n            src.y += (con.source.output ? 0.5 : -0.5) * gridScale;\n        if (tChip.isBaseChip)\n            trg.y += (con.target.output ? 0.5 : -0.5) * gridScale;\n        this.context.setLineDash(([\n            [3, 0, 0, 3, 0, 3],\n            [0, 3, 3, 0, 0, 3],\n            [0, 3, 0, 3, 3, 0],\n        ])[Math.floor(this.designer.time.total / 50) % 3]);\n        this.context.beginPath();\n        this.context.moveTo(VX + src.x, VY + src.y);\n        con.path.forEach(point => this.context.lineTo(VX + (point.x * gridScale), VY + (point.y * gridScale)));\n        this.context.lineTo(VX + trg.x, VY + trg.y);\n        this.context.strokeStyle = con.validPath ? ((_a = this.colours.wire[con.layer]) !== null && _a !== void 0 ? _a : \"#333\") : this.colours.highlight;\n        this.context.stroke();\n        this.context.setLineDash([]);\n    }\n    drawChips(content, VX, VY, gridScale) {\n        content.chips.forEach(chip => {\n            if (this.mouse.draggingChip && chip.id == this.designer.selectedChipID)\n                return;\n            const chipTl = chip.gridPos(gridScale);\n            chipTl.x += VX;\n            chipTl.y += VY;\n            this.drawChip(chip, gridScale, chipTl);\n        });\n        if (this.mouse.draggingChip && this.designer.selectedChip) {\n            const sChip = this.designer.selectedChip;\n            const chipSize = sChip.gridSize(gridScale);\n            this.drawChip(sChip, gridScale, { x: this.mouse.gridPos.x + this.mouse.draggingChipOffset.x + VX - (chipSize.x * 0.5), y: this.mouse.gridPos.y + this.mouse.draggingChipOffset.y + VY - (chipSize.y * 0.5) });\n        }\n    }\n    drawGrid(chip, VX, VY, gridScale) {\n        this.context.strokeStyle = this.colours.grid.lines;\n        this.context.setLineDash([5, 3, 9, 3, 0, 0, 5, 0]);\n        for (let x = 0; x <= this.gridSize.x; x++) {\n            this.context.beginPath();\n            this.context.moveTo(VX + (gridScale * x), VY);\n            this.context.lineTo(VX + (gridScale * x), VY + (gridScale * this.gridSize.y));\n            this.context.stroke();\n        }\n        for (let y = 0; y <= this.gridSize.y; y++) {\n            this.context.beginPath();\n            this.context.moveTo(VX, VY + (gridScale * y));\n            this.context.lineTo(VX + (gridScale * this.gridSize.x), VY + (gridScale * y));\n            this.context.stroke();\n        }\n        this.context.moveTo(0, 0);\n        this.context.setLineDash([]);\n        this.context.strokeStyle = this.colours.grid.border;\n        this.context.beginPath();\n        this.context.moveTo(VX - gridScale, VY - gridScale);\n        this.context.lineTo(VX + (gridScale * this.gridSize.x) + gridScale, VY - gridScale);\n        this.context.lineTo(VX + (gridScale * this.gridSize.x) + gridScale, VY + (gridScale * this.gridSize.y) + gridScale);\n        this.context.lineTo(VX - gridScale, VY + (gridScale * this.gridSize.y) + gridScale);\n        this.context.closePath();\n        this.context.stroke();\n        this.context.textAlign = \"center\";\n        this.context.textBaseline = \"middle\";\n        chip.inputs.forEach((input, i) => {\n            if (input && input.length) {\n                const x = VX + ((i * chip_1.ChipType.ChipScaleFactor) * gridScale) - (gridScale * 0.25);\n                const y = VY - (gridScale * 1.6);\n                this.context.fillStyle = this.colours.chip.pin;\n                this.context.fillRect(x, y, gridScale * 0.5, gridScale);\n                this.context.fillStyle = this.colours.chip.pinText;\n                this.context.fillText(input, x + gridScale * 0.25, y - this.fontSize * 0.6);\n            }\n        });\n        chip.outputs.forEach((output, i) => {\n            if (output && output.length) {\n                const x = VX + ((i * chip_1.ChipType.ChipScaleFactor) * gridScale) - (gridScale * 0.25);\n                const y = VY + (gridScale * this.gridSize.y) + (gridScale * 0.6);\n                this.context.fillStyle = this.colours.chip.pin;\n                this.context.fillRect(x, y, gridScale * 0.5, gridScale);\n                this.context.fillStyle = this.colours.chip.pinText;\n                this.context.fillText(output, x + gridScale * 0.25, y + gridScale + this.fontSize * 0.6);\n            }\n        });\n    }\n    drawChip(chip, gridScale, chipTL) {\n        const chipSize = chip.gridSize(gridScale);\n        this.context.save();\n        this.context.translate(chipTL.x, chipTL.y);\n        const offset = { x: 0, y: 0 };\n        switch (chip.rotation) {\n            case 1:\n                offset.y -= chipSize.y;\n                this.context.rotate(Math.PI * 0.5 * chip.rotation);\n                break;\n            case 2:\n                offset.x -= chipSize.x;\n                offset.y -= chipSize.y;\n                this.context.rotate(Math.PI * 0.5 * chip.rotation);\n                break;\n            case 3:\n                offset.x -= chipSize.x;\n                this.context.rotate(Math.PI * 0.5 * chip.rotation);\n                break;\n            case 0:\n            default:\n                break;\n        }\n        const edge = Math.floor(gridScale * this.chipEdge);\n        const rim = Math.floor(gridScale * (this.chipEdge * this.chipEdge));\n        const tl = { x: offset.x - edge, y: offset.y - edge };\n        const size = { x: chipSize.x + (edge * 2), y: chipSize.y + (edge * 2) };\n        this.context.fillStyle = this.colours.chip.pin;\n        for (let i = 0; i < chip.inputs.length; i++) {\n            if (typeof chip.inputs[i] !== \"string\" || chip.inputs[i].length < 1)\n                continue;\n            this.context.fillRect(offset.x + (i * gridScale) - rim, offset.y - Math.floor(gridScale * 0.5), rim * 2, Math.floor(gridScale * 0.5));\n        }\n        for (let i = 0; i < chip.outputs.length; i++) {\n            if (typeof chip.outputs[i] !== \"string\" || chip.outputs[i].length < 1)\n                continue;\n            this.context.fillRect(offset.x + (i * gridScale) - rim, offset.y + chipSize.y, rim * 2, Math.floor(gridScale * 0.5));\n        }\n        this.context.fillStyle = chip.id == this.designer.selectedChipID ? this.colours.highlight : this.colours.chip.fore;\n        this.context.beginPath();\n        this.context.moveTo(tl.x, tl.y);\n        this.context.lineTo(tl.x + size.x, tl.y);\n        this.context.lineTo(tl.x + size.x, tl.y + size.y);\n        this.context.closePath();\n        this.context.fill();\n        this.context.fillStyle = chip.id == this.designer.selectedChipID ? \"#F00\" : this.colours.chip.back;\n        this.context.beginPath();\n        this.context.moveTo(tl.x, tl.y);\n        this.context.lineTo(tl.x + size.x, tl.y + size.y);\n        this.context.lineTo(tl.x, tl.y + size.y);\n        this.context.closePath();\n        this.context.fill();\n        this.context.fillStyle = this.colours.chip.base;\n        this.context.fillRect(tl.x + (rim * 2), tl.y + (rim * 2), size.x - (rim * 4), size.y - (rim * 4));\n        this.context.beginPath();\n        this.context.arc(offset.x + chipSize.x - rim, offset.y + chipSize.y - rim, edge * 0.5, 0, 2 * Math.PI, false);\n        this.context.fillStyle = \"#777\";\n        this.context.fill();\n        this.context.fillStyle = this.colours.chip.text;\n        this.context.textBaseline = \"middle\";\n        this.context.textAlign = \"center\";\n        this.context.fillText(chip.name, tl.x + (size.x * 0.5), tl.y + (size.y * 0.5));\n        if (this.designer.debug) {\n            this.context.textBaseline = \"top\";\n            this.context.textAlign = \"left\";\n            this.context.fillText(Object.values(chip.pos).toString() + \" \" + chip.type, offset.x, offset.y);\n        }\n        this.context.restore();\n    }\n    drawFPSGraph(delta, pos, size) {\n        if (this.designer.time.last < 1)\n            return;\n        this.frameTimes.push(delta);\n        const max = this.frameTimes.reduce((m, c) => { return c > m ? c : m; }, 0);\n        let frameTimes = [];\n        this.context.fillStyle = \"#0F0\";\n        this.context.beginPath();\n        this.context.moveTo(pos.x + 20, pos.y + size.y - 20);\n        this.context.lineTo(pos.x + size.x, pos.y + size.y - 20);\n        let total = 0;\n        const rAnchor = pos.x + size.x;\n        const bAnchor = pos.y + size.y - 20;\n        while (total < (size.x - 20)) {\n            const val = this.frameTimes.pop();\n            if (val) {\n                frameTimes.push(val);\n                this.context.lineTo(Math.round(rAnchor - total), bAnchor - Math.round((val / max) * (size.y - 20)));\n                total += val * 0.1;\n            }\n            else {\n                total = size.x;\n            }\n        }\n        this.context.closePath();\n        this.context.fill();\n        this.context.strokeStyle = \"#000\";\n        this.context.beginPath();\n        this.context.moveTo(pos.x + 20, pos.y);\n        this.context.lineTo(pos.x + 20, pos.y + size.y - 20);\n        this.context.lineTo(pos.x + size.x, pos.y + size.y - 20);\n        this.context.stroke();\n        frameTimes.reverse();\n        this.frameTimes = frameTimes;\n        this.context.fillStyle = \"#F00\";\n        this.context.textBaseline = \"top\";\n        this.context.textAlign = \"left\";\n        this.context.fillText(delta.toFixed(2).toString(), pos.x, pos.y + size.y - 20);\n        this.context.fillText(max.toFixed(2).toString(), pos.x, pos.y);\n    }\n}\n;\nexports.default = Renderer;\n\n\n//# sourceURL=webpack:///./src/designer/Renderer.ts?");

/***/ }),

/***/ "./src/designer/RightClickMenu.ts":
/*!****************************************!*\
  !*** ./src/designer/RightClickMenu.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst rightClickMenu_twig_1 = __importDefault(__webpack_require__(/*! ./views/rightClickMenu.twig */ \"./src/designer/views/rightClickMenu.twig\"));\nconst twig_1 = __webpack_require__(/*! twig */ \"./node_modules/twig/twig.js\");\nclass RightClickMenu {\n    constructor(htmlParent, action, id = \"root\", data, parent = null) {\n        this.children = {};\n        this.queuedHide = 0;\n        this.id = id;\n        this.action = action;\n        this.container = document.createElement(\"div\");\n        this.container.style.position = \"fixed\";\n        this.container.style.display = \"none\";\n        this.container.className = \"card right-click-menu\";\n        this.container.style.minWidth = \"200px\";\n        this.content = document.createElement(\"div\");\n        this.container.appendChild(this.content);\n        htmlParent.appendChild(this.container);\n        this.container.addEventListener(\"mouseleave\", e => this.queueHide(e));\n        this.container.addEventListener(\"mouseover\", e => this.mouseOver(e));\n        this.container.addEventListener(\"mouseup\", e => this.click(e));\n        this.buildMenu(data);\n        this.parent = parent;\n    }\n    destroy() {\n        Object.values(this.children).forEach(child => child.destroy());\n        this.container.remove();\n    }\n    buildMenu(structure) {\n        const template = twig_1.twig({ data: rightClickMenu_twig_1.default });\n        const items = Object.entries(structure).map(([name, value]) => this.buildMenuItem(name, value));\n        const data = {\n            items,\n        };\n        const render = template.render(data);\n        this.content.innerHTML = render;\n    }\n    buildMenuItem(name, data) {\n        var _a;\n        const value = data == null ? null : ((_a = data.data) !== null && _a !== void 0 ? _a : data);\n        const result = {\n            text: name.charAt(0).toUpperCase() + name.slice(1),\n            type: value === null ? \"break\" : (value instanceof Array ? \"action\" : \"menu\"),\n            value: value instanceof Array ? value : name,\n            class: \"\",\n        };\n        if (data != null) {\n            if (data.hasOwnProperty(\"requirements\")) {\n                result.class = [\"has-reqs\", ...data.requirements].join(\" \");\n            }\n        }\n        if (result.type == \"menu\") {\n            this.children[name] = new RightClickMenu(this.container, this.action, `${this.id}>${name}`, value, this);\n        }\n        return result;\n    }\n    show(pos, reqs = []) {\n        pos = { ...pos };\n        pos.x -= 2;\n        pos.y -= 2;\n        Object.values(this.children).forEach(child => child.hide());\n        this.container.style.left = `${pos.x}px`;\n        this.container.style.top = `${pos.y}px`;\n        this.container.style.display = \"\";\n        if (this.parent == null) {\n            this.container.querySelectorAll(\".has-reqs\").forEach(e => {\n                if (e instanceof HTMLElement)\n                    e.classList.add(\"disabled\");\n            });\n            if (reqs.length > 0) {\n                this.container.querySelectorAll(`.has-reqs.${reqs.join(\", .has-reqs.\")}`).forEach(e => {\n                    if (e instanceof HTMLElement)\n                        e.classList.remove(\"disabled\");\n                });\n            }\n        }\n    }\n    queueHide(_event) {\n        this.queuedHide = window.setTimeout(() => this.hide(), 250);\n    }\n    hide() {\n        this.container.style.display = \"none\";\n        this.hideChildren();\n    }\n    hideChildren() {\n        Object.values(this.children).forEach(child => child.hide());\n    }\n    hideParent() {\n        if (this.parent)\n            this.parent.hideParent();\n        else\n            this.hide();\n    }\n    stopQueuedHide() {\n        var _a;\n        window.clearTimeout(this.queuedHide);\n        (_a = this.parent) === null || _a === void 0 ? void 0 : _a.stopQueuedHide();\n    }\n    click(event) {\n        var _a;\n        if (event.button != 0)\n            return;\n        event.stopImmediatePropagation();\n        event.stopPropagation();\n        const elem = event.target;\n        if (elem instanceof HTMLElement) {\n            if (elem.classList.contains(\"disabled\"))\n                return;\n            const data = elem.dataset;\n            if (data.type == \"action\") {\n                const value = JSON.parse((_a = data.value) !== null && _a !== void 0 ? _a : \"[]\");\n                if (value instanceof Array)\n                    this.action(value);\n                this.hideParent();\n            }\n        }\n    }\n    mouseOver(event) {\n        var _a;\n        this.hideChildren();\n        this.stopQueuedHide();\n        event.stopImmediatePropagation();\n        event.stopPropagation();\n        let elem = (event.target instanceof HTMLElement) ? event.target : null;\n        if (elem instanceof HTMLElement) {\n            let data = elem.dataset;\n            if (data.child == \"child\") {\n                elem = elem.parentElement;\n                if (elem == null)\n                    return;\n                data = elem.dataset;\n            }\n            if (data.type == \"menu\") {\n                const value = JSON.parse((_a = data.value) !== null && _a !== void 0 ? _a : \"null\");\n                if (this.children.hasOwnProperty(value)) {\n                    const rect = elem.getBoundingClientRect();\n                    this.children[value].show({ x: rect.right, y: rect.top + 6 });\n                }\n            }\n        }\n    }\n}\nexports.default = RightClickMenu;\n\n\n//# sourceURL=webpack:///./src/designer/RightClickMenu.ts?");

/***/ }),

/***/ "./src/designer/chip/Chip.ts":
/*!***********************************!*\
  !*** ./src/designer/chip/Chip.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Transform_1 = __webpack_require__(/*! ../../common/Transform */ \"./src/common/Transform.ts\");\nconst index_1 = __webpack_require__(/*! ./index */ \"./src/designer/chip/index.ts\");\nclass Chip {\n    constructor(id, type, pos = { x: 1, y: 1 }) {\n        this._pos = { x: 0, y: 0 };\n        this._type = \"AND\";\n        this._name = \"\";\n        this._rotation = 0;\n        this._constants = {};\n        this.type = type;\n        index_1.ChipType.New(type);\n        this._id = id.toLowerCase();\n        this._pos = { ...pos };\n    }\n    static Factory(id, type, pos = { x: 1, y: 1 }) {\n        return new Chip(id, type, pos);\n    }\n    get id() { return this._id; }\n    get name() { return this._name.length < 1 ? (this.isStandard ? this.type.toUpperCase() : this.type) : this._name; }\n    set name(name) { this._name = name; }\n    get type() { return this._type; }\n    set type(type) { this._type = type.toLowerCase(); }\n    get isStandard() { return index_1.ChipType.IsStandard(this.type); }\n    get content() { return this.getData().content; }\n    get inputs() { return [...this.getData().inputs]; }\n    get outputs() { return [...this.getData().outputs]; }\n    get size() { return { ...this.getData().size }; }\n    get pos() { return { ...this._pos }; }\n    get description() { return this.getData().description; }\n    get constants() {\n        const consts = {};\n        this.getData().constants.forEach(key => { var _a; return consts[key] = (_a = this._constants[key]) !== null && _a !== void 0 ? _a : \"\"; });\n        return consts;\n    }\n    ;\n    get rotation() { return this._rotation; }\n    set rotation(rot) {\n        while (rot < 0)\n            rot += 4;\n        while (rot > 3)\n            rot -= 4;\n        this._rotation = rot;\n    }\n    rotate(rot = 1) {\n        this.rotation = this.rotation + Math.round(rot);\n    }\n    get isBaseChip() { return this.type == index_1.ChipType.BaseChip; }\n    get errors() {\n        return [\n            ...this.content.errors\n        ];\n    }\n    get rect() {\n        const size = this.size;\n        const isRot = this.rotation % 2;\n        return {\n            left: this.pos.x,\n            right: this.pos.x + (isRot ? size.y : size.x),\n            top: this.pos.y,\n            bottom: this.pos.y + (isRot ? size.x : size.y),\n        };\n    }\n    rectGridScale(gridScale) {\n        const rect = this.rect;\n        rect.left *= gridScale;\n        rect.right *= gridScale;\n        rect.top *= gridScale;\n        rect.bottom *= gridScale;\n        return rect;\n    }\n    fromJSON(data) {\n        var _a, _b, _c, _d, _e, _f;\n        this._id = ((_a = data.id) !== null && _a !== void 0 ? _a : this.id).toLowerCase();\n        this._pos = { ...((_b = data.pos) !== null && _b !== void 0 ? _b : this.pos) };\n        this.name = (_c = data.name) !== null && _c !== void 0 ? _c : this.name;\n        this._type = (_d = data.type) !== null && _d !== void 0 ? _d : this.type;\n        this._constants = { ...((_e = data.constants) !== null && _e !== void 0 ? _e : this.constants) };\n        this._rotation = (_f = data.rotation) !== null && _f !== void 0 ? _f : 0;\n        return this;\n    }\n    toJSON() {\n        return {\n            id: this.id,\n            name: this.name,\n            type: this.type,\n            pos: this.pos,\n            constants: this.constants,\n            rotation: this.rotation,\n        };\n    }\n    intersects(other, pad = 0.5) {\n        return Transform_1.Rect.Intersect(Transform_1.Rect.Pad(other, pad), Transform_1.Rect.Pad(this.rect, pad));\n    }\n    intersectsChip(chip, pad = 0.5) {\n        return this.intersects(chip.rect, pad);\n    }\n    getData() {\n        return index_1.ChipType.GetData(this.type);\n    }\n    setPos(pos, gridSize) {\n        this._pos = { ...pos };\n        this.clamp2Grid(gridSize);\n        return this;\n    }\n    setInput(index, name) {\n        index_1.ChipType.SetInput(this.type, index, name);\n        return this;\n    }\n    setOutput(index, name) {\n        index_1.ChipType.SetOutput(this.type, index, name);\n        return this;\n    }\n    setSize(size) {\n        index_1.ChipType.SetSize(this.type, size);\n        return this;\n    }\n    setConstant(key, value) {\n        if (this.getData().constants.indexOf(key) >= 0) {\n            this._constants[key] = value;\n        }\n    }\n    addConst(constant) {\n        index_1.ChipType.AddConst(this.type, constant);\n    }\n    removeConst(constant) {\n        index_1.ChipType.RemoveConst(this.type, constant);\n    }\n    gridPos(gridScale) {\n        return Transform_1.Vec2.Multiply(this._pos, gridScale);\n    }\n    gridSize(gridScale) {\n        return Transform_1.Vec2.Multiply(this.size, gridScale);\n    }\n    clamp2Grid(gridSize) {\n        this._pos = Transform_1.Vec2.ClampVec(this.pos, { x: 0, y: 0 }, { x: gridSize.x - this.size.x, y: gridSize.y - this.size.y });\n    }\n    getPinAtPos(pos) {\n        const pRect = Transform_1.Rect.Pad(Transform_1.Rect.FromVec2(pos), 0.1);\n        for (const input of this.inputs) {\n            const pin = this.getInputPin(input);\n            if (pin) {\n                const pinPos = this.getPinPosOut(pin, this.isBaseChip ? 1 : 0.375);\n                console.log(pin, pinPos);\n                const rect = Transform_1.Rect.Pad(Transform_1.Rect.FromVec2(pinPos), this.isBaseChip ? 0.25 : 0.1);\n                if (Transform_1.Rect.Intersect(pRect, rect))\n                    return pin;\n            }\n        }\n        for (const output of this.outputs) {\n            const pin = this.getOutputPin(output);\n            if (pin) {\n                const pinPos = this.getPinPosOut(pin, this.isBaseChip ? 1 : 0.375);\n                const rect = Transform_1.Rect.Pad(Transform_1.Rect.FromVec2(pinPos), this.isBaseChip ? 0.25 : 0.1);\n                if (Transform_1.Rect.Intersect(pRect, rect))\n                    return pin;\n            }\n        }\n        return null;\n    }\n    clone() {\n        const chip = new Chip(`${this.type}_${Date.now()}`, this.type, this.pos);\n        chip.rotation = this.rotation;\n        Object.entries(this.constants).forEach(([name, val]) => {\n            chip.setConstant(name, val);\n        });\n        chip.name = this._name;\n        return chip;\n    }\n    getPinPos(pin) {\n        const pos = { x: 0, y: 0 };\n        const index = pin.output ? this.outputs.indexOf(pin.name) : this.inputs.indexOf(pin.name);\n        if (index >= 0) {\n            if (this.isBaseChip) {\n                pos.y = pin.output ? this.content.size.y : 0;\n                pos.x = index * index_1.ChipType.ChipScaleFactor;\n            }\n            else {\n                const rect = this.rect;\n                switch (this.rotation) {\n                    case 1:\n                        pos.x = pin.output ? rect.left : rect.right;\n                        pos.y = rect.top + index;\n                        break;\n                    case 2:\n                        pos.x = rect.right - index;\n                        pos.y = pin.output ? rect.top : rect.bottom;\n                        break;\n                    case 3:\n                        pos.x = pin.output ? rect.right : rect.left;\n                        pos.y = rect.bottom - index;\n                        break;\n                    default:\n                        pos.y = pin.output ? rect.bottom : rect.top;\n                        pos.x = rect.left + index;\n                        break;\n                }\n            }\n        }\n        return pos;\n    }\n    getPinPosOutOffset(pin, multiplier = 1) {\n        const pos = { x: 0, y: 0 };\n        if (this.isBaseChip) {\n            pos.y = pin.output ? 1 : -1;\n            return pos;\n        }\n        switch (this.rotation) {\n            case 1:\n                pos.x -= pin.output ? 1 : -1;\n                break;\n            case 2:\n                pos.y -= pin.output ? 1 : -1;\n                break;\n            case 3:\n                pos.x += pin.output ? 1 : -1;\n                break;\n            default:\n                pos.y += pin.output ? 1 : -1;\n                break;\n        }\n        return Transform_1.Vec2.Multiply(pos, multiplier);\n    }\n    getPinPosOut(pin, multiplier = 1) {\n        return Transform_1.Vec2.Sum(this.getPinPosOutOffset(pin, multiplier), this.getPinPos(pin));\n    }\n    getOutputPin(pin) {\n        return this.getPin(pin, true);\n    }\n    getInputPin(pin) {\n        return this.getPin(pin, false);\n    }\n    getPin(pin, output) {\n        if (pin.length < 1)\n            return null;\n        if (output) {\n            if (this.outputs.indexOf(pin) < 0)\n                return null;\n        }\n        else {\n            if (this.inputs.indexOf(pin) < 0)\n                return null;\n        }\n        return new index_1.Pin(this.id, output, pin);\n    }\n}\nexports.default = Chip;\n\n\n//# sourceURL=webpack:///./src/designer/chip/Chip.ts?");

/***/ }),

/***/ "./src/designer/chip/ChipContent.ts":
/*!******************************************!*\
  !*** ./src/designer/chip/ChipContent.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Transform_1 = __webpack_require__(/*! ../../common/Transform */ \"./src/common/Transform.ts\");\nconst Connection_1 = __importDefault(__webpack_require__(/*! ./Connection */ \"./src/designer/chip/Connection.ts\"));\nconst Chip_1 = __importDefault(__webpack_require__(/*! ./Chip */ \"./src/designer/chip/Chip.ts\"));\nconst ChipType_1 = __importDefault(__webpack_require__(/*! ./ChipType */ \"./src/designer/chip/ChipType.ts\"));\nconst astar_typescript_cost_1 = __webpack_require__(/*! astar-typescript-cost */ \"./node_modules/astar-typescript-cost/dist/astar.js\");\nclass ChipContent {\n    constructor(size) {\n        this._chips = {};\n        this._connections = [];\n        this.parentChip = null;\n        this.setSize(size);\n    }\n    get connections() { return [...this._connections]; }\n    get chips() { return Object.values(this._chips); }\n    get size() { return { x: this._size.x * ChipType_1.default.ChipScaleFactor, y: this._size.y * ChipType_1.default.ChipScaleFactor }; }\n    static Factory(size) {\n        return new ChipContent(size);\n    }\n    get errors() {\n        return [\n            ...this._connections.filter(con => !con.validPath).map(con => `Invalid Connection ${con.id}`),\n            ...this.chipErrors,\n            ...this.childErrors,\n        ];\n    }\n    get childErrors() {\n        const chips = this.chips.filter(chip => (!chip.isStandard && chip.size.x < this._size.x && chip.size.y < this._size.y));\n        return [...chips.map(chip => chip.errors).reduce((p, c) => [...p, ...c], [])];\n    }\n    get chipErrors() {\n        return [\n            ...this.chips.filter(chip => {\n                return (chip.size.x >= this._size.x || chip.size.y >= this._size.y) && !chip.isStandard;\n            }).map(chip => `Chip Too Large ${chip.id}`)\n        ];\n    }\n    setParentChip(chip) {\n        this.parentChip = chip;\n    }\n    fromJSON(data) {\n        var _a, _b;\n        ((_a = data.chips) !== null && _a !== void 0 ? _a : []).forEach((chip) => {\n            this._chips[chip.id] = Chip_1.default.Factory(chip.id, chip.type, chip.pos).fromJSON(chip);\n        });\n        ((_b = data.connections) !== null && _b !== void 0 ? _b : []).forEach((con) => {\n            this._connections.push(Connection_1.default.Factory().fromJSON(con));\n        });\n        return this;\n    }\n    toJSON() {\n        return {\n            chips: this.chips,\n            connections: this.connections,\n        };\n    }\n    setSize(size) {\n        this._size = { ...size };\n        this.chips.forEach(chip => chip.clamp2Grid(this.size));\n        this.updateConnectionsForChip(null);\n    }\n    getChip(id) {\n        var _a;\n        if (this.parentChip && id == this.parentChip.id)\n            return this.parentChip;\n        return (_a = this._chips[id]) !== null && _a !== void 0 ? _a : null;\n    }\n    addChip(chip) {\n        if (Transform_1.Vec2.Magnitude(chip.size) >= Transform_1.Vec2.Magnitude(this._size) && !chip.isStandard) {\n            alert(\"Chip too large\" + JSON.stringify([this._size, chip.size]));\n            return false;\n        }\n        if (this._chips.hasOwnProperty(chip.id))\n            return false;\n        this._chips[chip.id] = chip;\n        ChipType_1.default.Save();\n        return true;\n    }\n    removeChip(chip) {\n        if (this._chips.hasOwnProperty(chip.id)) {\n            this.disconnectChip(chip);\n            delete this._chips[chip.id];\n            ChipType_1.default.Save();\n        }\n    }\n    updateConnectionsForChip(chip) {\n        let connections = this.connections.filter(con => (chip == null || con.usesChip(chip)) || !con.customPath);\n        connections.forEach(con => con.clearPath());\n        connections.sort((a, b) => a.distance(this) - b.distance(this));\n        connections.forEach(con => this.updatePathForConnection(con));\n    }\n    updatePathForConnection(con) {\n        const sChip = this.getChip(con.source.chip);\n        const eChip = this.getChip(con.target.chip);\n        let start = sChip === null || sChip === void 0 ? void 0 : sChip.getPinPos(con.source);\n        let end = eChip === null || eChip === void 0 ? void 0 : eChip.getPinPos(con.target);\n        if (start && end && sChip && eChip) {\n            const oStart = { ...start };\n            start = Transform_1.Vec2.Sum(start, sChip.getPinPosOutOffset(con.source));\n            end = Transform_1.Vec2.Sum(end, eChip.getPinPosOutOffset(con.target));\n            if (Transform_1.Vec2.Equal(start, end)) {\n                con.setPath([start]);\n                con.validPath = true;\n            }\n            else if (start.x == end.x) {\n                if (oStart.y == end.y) {\n                    con.validPath = true;\n                    return;\n                }\n            }\n            else if (start.y == end.y) {\n                if (oStart.x == end.x) {\n                    con.validPath = true;\n                    return;\n                }\n            }\n            const grid = this.getGridMatrix(con);\n            const AStar = new astar_typescript_cost_1.AStarFinder({\n                grid: {\n                    matrix: grid,\n                    maxCost: 10,\n                },\n                diagonalAllowed: false,\n            });\n            if (sChip.isBaseChip)\n                start.y = Math.max(Math.min(start.y, this.size.y), 0);\n            if (eChip.isBaseChip)\n                end.y = Math.max(Math.min(end.y, this.size.y), 0);\n            try {\n                const path = AStar.findPath(start, end).map(p => { return { x: p[0], y: p[1] }; });\n                con.setPath(path);\n                con.validPath = path.length > 0;\n            }\n            catch (e) {\n                con.validPath = false;\n            }\n        }\n    }\n    pinIsConnected(pin) {\n        return this.connections.find(con => con.usesPin(pin)) !== undefined;\n    }\n    disconnect(pin) {\n        this._connections = this._connections.filter(con => !con.usesPin(pin));\n    }\n    disconnectChip(chip) {\n        this._connections = this._connections.filter(con => !con.usesChip(chip));\n    }\n    connect(pinA, pinB, layer = 0) {\n        const chipA = this.getChip(pinA.chip);\n        const chipB = this.getChip(pinB.chip);\n        if (chipA == null || chipB == null)\n            return false;\n        for (const con of this.connections) {\n            if (con.usesPin(pinA)) {\n                if (chipA.isBaseChip) {\n                    if (pinA.output)\n                        return false;\n                }\n                else {\n                    if (!pinA.output)\n                        return false;\n                }\n            }\n            if (con.usesPin(pinB)) {\n                if (chipB.isBaseChip) {\n                    if (pinB.output)\n                        return false;\n                }\n                else {\n                    if (!pinB.output)\n                        return false;\n                }\n            }\n        }\n        const bothAreBase = (chipA.isBaseChip && chipB.isBaseChip);\n        const oneIsBase = (chipA.isBaseChip || chipB.isBaseChip) && !bothAreBase;\n        if (oneIsBase) {\n            if (pinA.output != pinB.output)\n                return false;\n        }\n        else if (pinA.output == pinB.output)\n            return false;\n        if (bothAreBase) {\n            if (pinA.output) {\n                const pinS = pinA;\n                pinA = pinB;\n                pinB = pinS;\n            }\n        }\n        else if (oneIsBase) {\n            if (pinA.output) {\n                if (chipA.isBaseChip) {\n                    const pinS = pinA;\n                    pinA = pinB;\n                    pinB = pinS;\n                }\n            }\n            else {\n                if (chipB.isBaseChip) {\n                    const pinS = pinA;\n                    pinA = pinB;\n                    pinB = pinS;\n                }\n            }\n        }\n        else if (!pinA.output) {\n            const pinS = pinA;\n            pinA = pinB;\n            pinB = pinS;\n        }\n        const connection = new Connection_1.default();\n        connection.layer = layer;\n        connection.source = pinA;\n        connection.target = pinB;\n        this.updatePathForConnection(connection);\n        this._connections.push(connection);\n        return true;\n    }\n    connectionAtPos(pos) {\n        const rect = Transform_1.Rect.FromPosAndPad(pos, 0.1);\n        for (const con of this._connections) {\n            if (con.pathIntersectsRect(rect))\n                return con;\n        }\n        return null;\n    }\n    getConnection(id) {\n        var _a;\n        return (_a = this._connections.find(con => con.id == id)) !== null && _a !== void 0 ? _a : null;\n    }\n    getGridMatrix(calcCon) {\n        const grid = [];\n        for (let y = 0; y <= this.size.y; y++) {\n            const line = [];\n            for (let x = 0; x <= this.size.x; x++) {\n                line[x] = 0;\n            }\n            grid.push(line);\n        }\n        ;\n        let cons = this.connections;\n        if (calcCon) {\n            cons = cons.filter(con => con.layer == calcCon.layer && con.id !== calcCon.id && !calcCon.source.isEqualTo(con.source));\n        }\n        cons.forEach(con => {\n            con.path.forEach(p => {\n                if (p.y >= grid.length || p.y < 0)\n                    return;\n                if (p.x >= grid[0].length || p.x < 0)\n                    return;\n                grid[p.y][p.x] = 10;\n            });\n        });\n        this.chips.forEach(chip => {\n            const pos = chip.pos;\n            let size = chip.size;\n            const isRotate = chip.rotation % 2;\n            if (isRotate)\n                size = Transform_1.Vec2.Swap(size);\n            for (let x = 0; x <= size.x; x++) {\n                for (let y = 0; y <= size.y; y++) {\n                    grid[pos.y + y][pos.x + x] = 10;\n                }\n            }\n            for (const o of chip.outputs) {\n                const pin = chip.getOutputPin(o);\n                if (pin) {\n                    const pinPos = chip.getPinPosOut(pin);\n                    if (grid.length > pinPos.y && pinPos.y >= 0) {\n                        const line = grid[pinPos.y];\n                        if (line.length > pinPos.x && pinPos.x >= 0 && line[pinPos.x] < 10) {\n                            line[pinPos.x] = 9;\n                        }\n                    }\n                }\n            }\n            for (const i of chip.inputs) {\n                const pin = chip.getInputPin(i);\n                if (pin) {\n                    const pinPos = chip.getPinPosOut(pin);\n                    if (grid.length > pinPos.y && pinPos.y >= 0) {\n                        const line = grid[pinPos.y];\n                        if (typeof line == \"undefined\") {\n                            console.log(chip.id, grid, pinPos);\n                            break;\n                        }\n                        if (line.length > pinPos.x && pinPos.x >= 0 && line[pinPos.x] < 10) {\n                            line[pinPos.x] = 9;\n                        }\n                    }\n                }\n            }\n        });\n        return grid;\n    }\n}\nexports.default = ChipContent;\n\n\n//# sourceURL=webpack:///./src/designer/chip/ChipContent.ts?");

/***/ }),

/***/ "./src/designer/chip/ChipType.ts":
/*!***************************************!*\
  !*** ./src/designer/chip/ChipType.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ChipContent_1 = __importDefault(__webpack_require__(/*! ./ChipContent */ \"./src/designer/chip/ChipContent.ts\"));\nconst StandardChips_json_1 = __importDefault(__webpack_require__(/*! ../../common/StandardChips.json */ \"./src/common/StandardChips.json\"));\nwindow.addEventListener(\"beforeunload\", () => { ChipType.Save(); });\nclass ChipType {\n    static get ChipScaleFactor() { return ChipType._ChipScaleFactor; }\n    static get SaveString() { return \"CHIP_DESIGNER_TPYES\"; }\n    static get BaseChip() { return ChipType._BaseChip; }\n    static set BaseChip(name) { ChipType._BaseChip = name.toLowerCase(); }\n    static get maxSize() {\n        const size = { ...ChipType.GetData(ChipType.BaseChip).size };\n        size.x -= 1;\n        size.y -= 1;\n        return size;\n    }\n    static SetType(type, data, save = true) {\n        type = type.toLowerCase();\n        data = ChipType.Sanitize(data, type);\n        ChipType.types[type] = data;\n        if (save)\n            ChipType.Save();\n        return data;\n    }\n    static toJSON() {\n        const types = {};\n        for (const [name, data] of Object.entries(ChipType.types)) {\n            const { content, ...rest } = data;\n            types[name] = {\n                ...rest,\n                content: content.toJSON(),\n            };\n        }\n        return types;\n    }\n    static Standard() {\n        if (!ChipType.init)\n            ChipType.LoadStandard();\n        return ChipType._standard;\n    }\n    static TypeList() {\n        return [...ChipType.StandardTypeList(), ...ChipType.CustomTypeList()];\n    }\n    static StandardTypeList() {\n        return Object.keys(ChipType.Standard());\n    }\n    static CustomTypeList() {\n        return Object.keys(ChipType.types).filter(type => type != ChipType.BaseChip);\n    }\n    static New(type) {\n        type = type.toLowerCase();\n        if (ChipType.IsStandard(type))\n            return null;\n        ChipType.SetType(type, ChipType.GetData(type));\n        return type;\n    }\n    static LoadStandard() {\n        Object.entries(StandardChips_json_1.default).forEach(([name, raw]) => {\n            var _a, _b, _c;\n            name = name.toLowerCase();\n            const data = {\n                size: { ...raw.size },\n                inputs: [...((_a = raw.inputs) !== null && _a !== void 0 ? _a : [])],\n                outputs: [...((_b = raw.outputs) !== null && _b !== void 0 ? _b : [])],\n                type: raw.type + \"\",\n                constants: [],\n                content: new ChipContent_1.default({ ...raw.size }),\n                description: (_c = raw.description) !== null && _c !== void 0 ? _c : \"\",\n                code: null,\n            };\n            if (raw.hasOwnProperty(\"code\"))\n                data.code = raw.code;\n            if (raw.hasOwnProperty(\"constants\"))\n                data.constants = [...raw.constants];\n            ChipType._standard[name] = ChipType.Sanitize(data, name);\n        });\n        ChipType.init = true;\n    }\n    static LoadChip(name, chipData) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        name = name.toLowerCase();\n        const def = ChipType.Default();\n        const size = { ...((_a = chipData.size) !== null && _a !== void 0 ? _a : def.size) };\n        const data = {\n            size: size,\n            inputs: [...((_b = chipData.inputs) !== null && _b !== void 0 ? _b : def.inputs)],\n            outputs: [...((_c = chipData.outputs) !== null && _c !== void 0 ? _c : def.outputs)],\n            type: (_d = chipData.type) !== null && _d !== void 0 ? _d : def.type,\n            constants: [...((_e = chipData.constants) !== null && _e !== void 0 ? _e : def.constants)],\n            content: ChipContent_1.default.Factory({ ...size }).fromJSON((_f = chipData.content) !== null && _f !== void 0 ? _f : {}),\n            description: (_g = chipData.description) !== null && _g !== void 0 ? _g : def.description,\n            code: null,\n        };\n        ChipType.SetType(name, data);\n    }\n    static GetData(type) {\n        var _a;\n        type = type.toLowerCase();\n        let result;\n        if (ChipType.Standard().hasOwnProperty(type))\n            result = ChipType.Standard()[type];\n        else\n            result = (_a = ChipType.types[type]) !== null && _a !== void 0 ? _a : ChipType.Default();\n        if (result != null)\n            result = { ...result };\n        return result;\n    }\n    static IsStandard(type) {\n        return ChipType.Standard().hasOwnProperty(type.toLowerCase());\n    }\n    static Default() {\n        return {\n            size: { x: 1, y: 1 },\n            inputs: [\"A\", \"B\"],\n            outputs: [\"R\", \"\"],\n            type: \"custom\",\n            constants: [],\n            content: new ChipContent_1.default({ x: 1, y: 1 }),\n            description: \"\",\n            code: null,\n        };\n    }\n    static AddConst(type, constant) {\n        if (ChipType.IsStandard(type))\n            return;\n        type = type.toLowerCase();\n        const data = ChipType.GetData(type);\n        data.constants.push(constant);\n        ChipType.SetType(type, data);\n    }\n    static RemoveConst(type, constant) {\n        if (ChipType.IsStandard(type))\n            return;\n        type = type.toLowerCase();\n        constant = constant.toUpperCase();\n        const data = ChipType.GetData(type);\n        data.constants = data.constants.filter(c => c != constant);\n        ChipType.SetType(type, data);\n    }\n    static SetSize(type, size) {\n        if (ChipType.IsStandard(type))\n            return;\n        type = type.toLowerCase();\n        const data = ChipType.GetData(type);\n        data.size.x = Math.min(Math.max(size.x, 1), type != ChipType.BaseChip ? ChipType.maxSize.x : 9);\n        data.size.y = Math.min(Math.max(size.y, 1), type != ChipType.BaseChip ? ChipType.maxSize.y : 5);\n        ChipType.SetType(type, data)\n            .content.setSize({ ...data.size });\n    }\n    static SetInput(type, index, name) {\n        if (ChipType.IsStandard(type))\n            return;\n        type = type.toLowerCase();\n        const data = ChipType.GetData(type);\n        name = name.toUpperCase();\n        if (index >= 0 && index < data.inputs.length && (data.inputs.indexOf(name) < 0 || name.length < 1)) {\n            data.inputs[index] = name;\n        }\n        ChipType.SetType(type, data);\n    }\n    static SetOutput(type, index, name) {\n        if (ChipType.IsStandard(type))\n            return;\n        type = type.toLowerCase();\n        const data = ChipType.GetData(type);\n        name = name.toUpperCase();\n        if (index >= 0 && index < data.outputs.length && (data.outputs.indexOf(name) < 0 || name.length < 1)) {\n            data.outputs[index] = name;\n        }\n        ChipType.SetType(type, data);\n    }\n    static Save() {\n        window.localStorage.setItem(ChipType.SaveString, JSON.stringify(ChipType));\n    }\n    static Load() {\n        const json = window.localStorage.getItem(ChipType.SaveString);\n        if (json) {\n            const data = JSON.parse(json);\n            Object.entries(data).forEach((entry) => {\n                this.LoadChip(entry[0], entry[1]);\n            });\n            const loaded = JSON.stringify(ChipType);\n            console.assert(loaded === json, \"LOAD FAILED\", { stored: JSON.parse(json), loaded: JSON.parse(loaded) });\n        }\n    }\n    static Sanitize(data, type) {\n        data = { ...data };\n        type = type.toLowerCase();\n        data.inputs.length = data.size.x + 1;\n        data.outputs.length = data.size.x + 1;\n        for (let i = 0; i < data.inputs.length; i++) {\n            data.inputs[i] = (data.inputs[i] || \"\").toUpperCase();\n        }\n        for (let i = 0; i < data.outputs.length; i++) {\n            data.outputs[i] = (data.outputs[i] || \"\").toUpperCase();\n        }\n        data.constants = [...(new Set([...data.constants]))].map(c => c.toUpperCase()).filter(c => c.length);\n        return data;\n    }\n}\nexports.default = ChipType;\nChipType.types = {};\nChipType._standard = {};\nChipType.init = false;\nChipType._BaseChip = \"base\";\nChipType._ChipScaleFactor = 4;\n\n\n//# sourceURL=webpack:///./src/designer/chip/ChipType.ts?");

/***/ }),

/***/ "./src/designer/chip/Connection.ts":
/*!*****************************************!*\
  !*** ./src/designer/chip/Connection.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Transform_1 = __webpack_require__(/*! ../../common/Transform */ \"./src/common/Transform.ts\");\nconst Pin_1 = __importDefault(__webpack_require__(/*! ./Pin */ \"./src/designer/chip/Pin.ts\"));\nclass Connection {\n    constructor() {\n        this.layer = 0;\n        this._path = [];\n        this._source = new Pin_1.default();\n        this._target = new Pin_1.default();\n        this.validPath = false;\n        this.customPath = false;\n    }\n    get id() {\n        return `${this.source.id}>${this.target.id}`;\n    }\n    static Factory() {\n        return new Connection();\n    }\n    usesChip(chip) {\n        return this.source.chip == chip.id || this.target.chip == chip.id;\n    }\n    usesPin(pin) {\n        return this.source.isEqualTo(pin) || this.target.isEqualTo(pin);\n    }\n    toJSON() {\n        return {\n            layer: this.layer,\n            path: this.path,\n            source: this.source,\n            target: this.target,\n            customPath: this.customPath,\n        };\n    }\n    pathIntersectsRect(rect) {\n        for (const line of this.pathLine) {\n            if (Transform_1.Line.IntersectRect(line, rect))\n                return true;\n        }\n        return false;\n    }\n    get pathLine() {\n        const line = [];\n        for (let i = 1; i < this._path.length; i++) {\n            line.push({\n                start: this._path[i - 1],\n                end: this._path[i]\n            });\n        }\n        return line;\n    }\n    clearPath() {\n        return this.setPath([]);\n    }\n    setPath(path) {\n        this._path = [...path];\n        return this;\n    }\n    distance(content) {\n        var _a, _b;\n        const src = (_a = content.getChip(this.source.chip)) === null || _a === void 0 ? void 0 : _a.getPinPos(this.source);\n        const trg = (_b = content.getChip(this.target.chip)) === null || _b === void 0 ? void 0 : _b.getPinPos(this.target);\n        if (src && trg) {\n            return Transform_1.Vec2.DistanceSquared(src, trg);\n        }\n        return 1000000;\n    }\n    fromJSON(data) {\n        var _a, _b, _c, _d, _e;\n        this.layer = (_a = data.layer) !== null && _a !== void 0 ? _a : this.layer;\n        this._path = [...((_b = data.path) !== null && _b !== void 0 ? _b : this.path)];\n        this._source = Pin_1.default.Factory().fromJSON((_c = data.source) !== null && _c !== void 0 ? _c : {});\n        this._target = Pin_1.default.Factory().fromJSON((_d = data.target) !== null && _d !== void 0 ? _d : {});\n        this.customPath = (_e = data.customPath) !== null && _e !== void 0 ? _e : false;\n        return this;\n    }\n    get source() { return this._source; }\n    set source(connector) { this._source = connector; }\n    get target() { return this._target; }\n    set target(connector) { this._target = connector; }\n    get path() { return [...this._path]; }\n}\nexports.default = Connection;\n\n\n//# sourceURL=webpack:///./src/designer/chip/Connection.ts?");

/***/ }),

/***/ "./src/designer/chip/Pin.ts":
/*!**********************************!*\
  !*** ./src/designer/chip/Pin.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Pin {\n    constructor(chip = \"\", output = false, name = \"\") {\n        this._chip = chip;\n        this._output = output;\n        this._name = name;\n    }\n    get id() {\n        return `${this.chip}_${this.output}_${this.name}`;\n    }\n    static Factory(chip = \"\", output = false, name = \"\") {\n        return new Pin(chip, output, name);\n    }\n    toJSON() {\n        return {\n            chip: this.chip,\n            output: this.output,\n            name: this.name,\n        };\n    }\n    fromJSON(data) {\n        var _a, _b, _c;\n        this._chip = (_a = data.chip) !== null && _a !== void 0 ? _a : this.chip;\n        this._output = (_b = data.output) !== null && _b !== void 0 ? _b : this.output;\n        this._name = (_c = data.name) !== null && _c !== void 0 ? _c : this.name;\n        return this;\n    }\n    isEqualTo(pin) {\n        return this.chip == pin.chip && this.output == pin.output && this.name == pin.name;\n    }\n    get chip() { return this._chip; }\n    get output() { return this._output; }\n    get name() { return this._name; }\n}\nexports.default = Pin;\n\n\n//# sourceURL=webpack:///./src/designer/chip/Pin.ts?");

/***/ }),

/***/ "./src/designer/chip/index.ts":
/*!************************************!*\
  !*** ./src/designer/chip/index.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChipContent = exports.Connection = exports.Pin = exports.ChipType = exports.Chip = void 0;\nvar Chip_1 = __webpack_require__(/*! ./Chip */ \"./src/designer/chip/Chip.ts\");\nObject.defineProperty(exports, \"Chip\", { enumerable: true, get: function () { return __importDefault(Chip_1).default; } });\nvar ChipType_1 = __webpack_require__(/*! ./ChipType */ \"./src/designer/chip/ChipType.ts\");\nObject.defineProperty(exports, \"ChipType\", { enumerable: true, get: function () { return __importDefault(ChipType_1).default; } });\nvar Pin_1 = __webpack_require__(/*! ./Pin */ \"./src/designer/chip/Pin.ts\");\nObject.defineProperty(exports, \"Pin\", { enumerable: true, get: function () { return __importDefault(Pin_1).default; } });\nvar Connection_1 = __webpack_require__(/*! ./Connection */ \"./src/designer/chip/Connection.ts\");\nObject.defineProperty(exports, \"Connection\", { enumerable: true, get: function () { return __importDefault(Connection_1).default; } });\nvar ChipContent_1 = __webpack_require__(/*! ./ChipContent */ \"./src/designer/chip/ChipContent.ts\");\nObject.defineProperty(exports, \"ChipContent\", { enumerable: true, get: function () { return __importDefault(ChipContent_1).default; } });\n\n\n//# sourceURL=webpack:///./src/designer/chip/index.ts?");

/***/ }),

/***/ "./src/designer/data/RightClick.json":
/*!*******************************************!*\
  !*** ./src/designer/data/RightClick.json ***!
  \*******************************************/
/*! exports provided: Remove, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"Remove\\\":{\\\"data\\\":[\\\"remove\\\"],\\\"requirements\\\":[\\\"target-chip\\\"]}}\");\n\n//# sourceURL=webpack:///./src/designer/data/RightClick.json?");

/***/ }),

/***/ "./src/designer/index.ts":
/*!*******************************!*\
  !*** ./src/designer/index.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Designer_1 = __importDefault(__webpack_require__(/*! ./Designer */ \"./src/designer/Designer.ts\"));\nfunction ready(fn) {\n    if (document.readyState != 'loading') {\n        fn();\n    }\n    else {\n        document.addEventListener('DOMContentLoaded', () => fn());\n    }\n}\nready(() => {\n    Designer_1.default.Factory(\"BaseChip\")\n        .run();\n});\n\n\n//# sourceURL=webpack:///./src/designer/index.ts?");

/***/ }),

/***/ "./src/designer/views/chipDetails.twig":
/*!*********************************************!*\
  !*** ./src/designer/views/chipDetails.twig ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"{% set STANDARD = chip.isStandard %}\\n<div class=\\\"card-header chipDetailsTitle\\\">\\n\\t<h4>{{chip.type}}\\n\\t\\t({{chip.id}})<span data-toggle=\\\"details\\\" class=\\\"badge badge-secondary\\\"></span>\\n\\t</h4>\\n</div>\\n<div class=\\\"card-body chipDetailsContent\\\">\\n\\t<form>\\n\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t<label>Name</label>\\n\\t\\t\\t<input data-type=\\\"name\\\" class=\\\"form-control\\\" type=\\\"text\\\" value=\\\"{{ chip.name }}\\\">\\n\\t\\t</div>\\n\\t\\t{% if not base %}\\n\\t\\t\\t<!--div class=\\\"row\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<label>Type</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<select data-type=\\\"type\\\" class=\\\"form-control\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<optgroup label=\\\"Standard\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{% for type in types.standard %}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<option value=\\\"{{type}}\\\" {{ chip.type == type ? \\\"selected\\\" : \\\"\\\"}}>{{type|upper}}</option>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{% endfor %}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</optgroup>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<optgroup label=\\\"Custom\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{% for type in types.custom %}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<option value=\\\"{{type}}\\\" {{ chip.type == type ? \\\"selected\\\" : \\\"\\\"}}>{{type}}</option>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{% endfor %}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</optgroup>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</select>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div-->\\n\\t\\t{% endif %}\\n\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t<label>Size</label>\\n\\t\\t\\t<div class=\\\"input-group\\\">\\n\\t\\t\\t\\t<div class=\\\"input-group-prepend\\\">\\n\\t\\t\\t\\t\\t<span class=\\\"input-group-text\\\">X</span>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<input data-type=\\\"size\\\" data-index=\\\"x\\\" class=\\\"form-control\\\" type=\\\"number\\\" value=\\\"{{ chip.size.x }}\\\" {{STANDARD ? 'disabled' : ''}}>\\n\\t\\t\\t</div>\\n\\t\\t\\t<div class=\\\"input-group\\\">\\n\\t\\t\\t\\t<div class=\\\"input-group-prepend\\\">\\n\\t\\t\\t\\t\\t<span class=\\\"input-group-text\\\">Y</span>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<input data-type=\\\"size\\\" data-index=\\\"y\\\" class=\\\"form-control\\\" type=\\\"number\\\" value=\\\"{{ chip.size.y }}\\\" {{STANDARD ? 'disabled' : ''}}>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t<label>Constants</label>{% if not STANDARD %}<button class=\\\"btn btn-primary\\\" data-action=\\\"new const\\\">Add Const</button>{% endif %}\\n\\t\\t\\t{% for key,value in chip.constants %}\\n\\t\\t\\t\\t<div class=\\\"input-group\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"input-group-prepend\\\">\\n\\t\\t\\t\\t\\t\\t<span class=\\\"input-group-text\\\">{{key}}</span>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<input data-type=\\\"constant\\\" data-index=\\\"{{key}}\\\" class=\\\"form-control\\\" type=\\\"text\\\" value=\\\"{{ value|json_encode()|escape }}\\\">\\n\\t\\t\\t\\t\\t{% if not STANDARD %}\\n\\t\\t\\t\\t\\t<div class=\\\"input-group-append\\\">\\n\\t\\t\\t\\t\\t\\t<button class=\\\"btn btn-danger\\\" type=\\\"button\\\" data-action=\\\"remove const\\\" data-index=\\\"{{key}}\\\">X</button>\\n\\t\\t\\t\\t\\t </div>\\n\\t\\t\\t\\t\\t {% endif %}\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t{% else %}\\n\\t\\t\\t\\t<input class=\\\"form-control\\\" type=\\\"text\\\" value=\\\"N/A\\\" disabled>\\n\\t\\t\\t{% endfor %}\\n\\t\\t</div>\\n\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t<label>Inputs</label>\\n\\t\\t\\t{% for input in chip.inputs %}\\n\\t\\t\\t\\t<div class=\\\"col-md-3\\\">\\n\\t\\t\\t\\t\\t<input id=\\\"{{chip.id}}_input_{{loop.index0}}\\\" data-type=\\\"input\\\" data-index=\\\"{{loop.index0}}\\\" class=\\\"form-control\\\" type=\\\"text\\\" value=\\\"{{ input }}\\\" {{STANDARD ? 'disabled' : ''}}>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t{% endfor %}\\n\\t\\t</div>\\n\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t<label>Outputs</label>\\n\\t\\t\\t{% for output in chip.outputs %}\\n\\t\\t\\t\\t<div class=\\\"col-md-3\\\">\\n\\t\\t\\t\\t\\t<input id=\\\"{{chip.id}}_output_{{loop.index0}}\\\" data-type=\\\"output\\\" data-index=\\\"{{loop.index0}}\\\" class=\\\"form-control\\\" type=\\\"text\\\" value=\\\"{{ output }}\\\" {{STANDARD ? 'disabled' : ''}}>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t{% endfor %}\\n\\t\\t</div>\\n\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t<ul style=\\\"color:#F00;\\\">\\n\\t\\t\\t\\t{% for error in chip.errors %}\\n\\t\\t\\t\\t\\t<li>{{ error }}</li>\\n\\t\\t\\t\\t{% endfor %}\\n\\t\\t\\t</ul>\\n\\t\\t</div>\\n\\t\\t<!--pre>{{dump()}}</pre-->\\n\\t</form>\\n</div>\\n\");\n\n//# sourceURL=webpack:///./src/designer/views/chipDetails.twig?");

/***/ }),

/***/ "./src/designer/views/rightClickMenu.twig":
/*!************************************************!*\
  !*** ./src/designer/views/rightClickMenu.twig ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"<nav class=\\\"nav flex-column\\\">\\n\\t{% for item in items %}\\n\\t\\t{% if item.type == \\\"break\\\" %}\\n\\t\\t\\t<hr style=\\\"width:100%; margin: 5px 2px;\\\">\\n\\t\\t{% else %}\\n\\t\\t\\t<a class=\\\"nav-link {{item.class}}\\\" data-type=\\\"{{item.type}}\\\" data-value=\\\"{{item.value|json_encode()|escape}}\\\" href=\\\"#\\\">\\n\\t\\t\\t\\t{{ item.text }}\\n\\t\\t\\t\\t{% if item.type == \\\"menu\\\" %}\\n\\t\\t\\t\\t\\t<span data-child=\\\"child\\\" style=\\\"float: right;\\\">&gt;</span>\\n\\t\\t\\t\\t{% endif %}\\n\\t\\t\\t</a>\\n\\t\\t{% endif %}\\n\\n\\t\\t<!--\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t        {{ item|json_encode()}}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    -->\\n\\t{% endfor %}\\n</nav>\\n\");\n\n//# sourceURL=webpack:///./src/designer/views/rightClickMenu.twig?");

/***/ }),

/***/ 1:
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//# sourceURL=webpack:///fs_(ignored)?");

/***/ }),

/***/ 2:
/*!*************************************!*\
  !*** multi ./src/designer/index.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./src/designer/index.ts */\"./src/designer/index.ts\");\n\n\n//# sourceURL=webpack:///multi_./src/designer/index.ts?");

/***/ })

/******/ });